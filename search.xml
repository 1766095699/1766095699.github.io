<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DP问题总结</title>
      <link href="/2020/08/04/dp-wen-ti-zong-jie/"/>
      <url>/2020/08/04/dp-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一-DP问题常见的问法-这样问有可能是DP但不绝对"><a href="#一-DP问题常见的问法-这样问有可能是DP但不绝对" class="headerlink" title="一.DP问题常见的问法(这样问有可能是DP但不绝对)"></a>一.DP问题常见的问法(这样问有可能是DP但不绝对)</h2><p><strong><em>DP问题尤其要注意初始状态和最后状态的设定,即边界值要根据题意和数据源范围来定</em></strong></p><h3 id="1-求最大值"><a href="#1-求最大值" class="headerlink" title="1.求最大值"></a>1.求最大值</h3><p>1.1数据值存在负数时：dp值往往要先初始化成负无穷<br>1.2数据值全为非负数时：声明在全局为0即可</p><h3 id="2-求最小值"><a href="#2-求最小值" class="headerlink" title="2.求最小值"></a>2.求最小值</h3><p>2.1数据值存在负数：声明在全局为0即可<br>2.2数据值全为非负数时：dp值往往要初始化成正无穷</p><h3 id="3-求数量"><a href="#3-求数量" class="headerlink" title="3.求数量"></a>3.求数量</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv中文文档</title>
      <link href="/2020/08/04/opencv-zhong-wen-wen-dang/"/>
      <url>/2020/08/04/opencv-zhong-wen-wen-dang/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/tutorials.html" target="_blank" rel="noopener">http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/tutorials.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 人脸识别 </category>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 人脸识别 </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跑图类dp问题</title>
      <link href="/2020/08/03/pao-tu-lei-dp-wen-ti/"/>
      <url>/2020/08/03/pao-tu-lei-dp-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="一-跑图类dp问题的定义"><a href="#一-跑图类dp问题的定义" class="headerlink" title="一.跑图类dp问题的定义"></a>一.跑图类dp问题的定义</h3><p><strong><em>对于数字三角形模型(跑一个金字塔求最值)所演变出来的一系列跑图求最值的模型,我统称为跑图类dp问题</em></strong></p><h3 id="二-经典案例-传纸条"><a href="#二-经典案例-传纸条" class="headerlink" title="二.经典案例(传纸条)"></a>二.经典案例(传纸条)</h3><p><a href="https://www.acwing.com/activity/content/problem/content/1286/1/" target="_blank" rel="noopener">https://www.acwing.com/activity/content/problem/content/1286/1/</a></p><h4 id="1-解法分析"><a href="#1-解法分析" class="headerlink" title="1.解法分析"></a>1.解法分析</h4><p>  本题可以看作是两个人同时从起点出发(原因稍微想一下就明白了),按照闫式分析法，dp[k][i1][i2]表示的含义是走k步,两个人分别走到第i1,i2行的时候dp的最大值,那么从当前状态dp[k][i1][i2]易得：<strong><em>上一个状态的集合dp[k-1]</em></strong> 有四个元素,分别是第一个人和第二个人从向右走和向下走到(i1,k-i1),(i2,k-i2),经过排列组合2X2共有四个元素</p><h4 id="2-AC代码："><a href="#2-AC代码：" class="headerlink" title="2.AC代码："></a>2.AC代码：</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//这题直接套方格取数的模板即可就最后输出的时候要注意以下,出发点和终点会重合</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span> <span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mx</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">>></span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//循环这里可以直接i1和i2&lt;=n即可,但是为了效率更高,我用了min.由于合法的dp值必然是从合法的dp值转移过来,所以不必担心i1,i2超过k的问题</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i1<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i2<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">mx</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>i1<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//因为他们仅仅只在终点和起点会重合,且这两个点的g值为0,所以算到n+m-1步即可</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token operator">+</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="三"><a href="#三" class="headerlink" title="三."></a>三.</h3><p>关于跑图类的模型 其实只要分析清楚定好dp数组的含义,然后找好上一个点集合的元素再列式子就能轻易解决,大部分题目较为简单,但是要注意一下是求最大值还是最小值,数据源有无负数,以及初始化位置dp值的初始化问题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp </tag>
            
            <tag> 数字三角形模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2020/08/02/bei-bao-wen-ti/"/>
      <url>/2020/08/02/bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>同时部署在多平台</title>
      <link href="/2020/08/02/tong-shi-bu-shu-zai-duo-ping-tai/"/>
      <url>/2020/08/02/tong-shi-bu-shu-zai-duo-ping-tai/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/help/articles/4136#article-header0" target="_blank" rel="noopener">https://gitee.com/help/articles/4136#article-header0</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dialog的用法</title>
      <link href="/2020/08/01/dialog-de-yong-fa/"/>
      <url>/2020/08/01/dialog-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<pre><code>  private void showDialog() {    final Dialog dialog=new Dialog(getContext());    View dialogView=LayoutInflater.from(getContext()).inflate(R.layout.me_dialog,null);    dialog.setContentView(dialogView);    dialog.setTitle("请选择您的星座123");    GridView dialogGv=dialogView.findViewById(R.id.megrag_dialog_gv);    //设置适配器    LuckBaseAdapter adapter=new LuckBaseAdapter(getContext(),mDatas);    dialogGv.setAdapter(adapter);    //设置是否能被取消    dialog.setCancelable(true);    //设置点击弹出框的部分,可以取消弹出框    dialog.setCanceledOnTouchOutside(true);    dialogGv.setOnItemClickListener(new AdapterView.OnItemClickListener() {        private Bitmap bitmap;        private String logoname;        private String name;        private StarBean.StarinfoBean bean;        @Override        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {            bean = mDatas.get(position);            name = bean.getName();            logoname = bean.getLogoname();            nameTv.setText(name);            bitmap = contentImgMap.get(logoname);            iconIv.setImageBitmap(bitmap);            selectPos=position;//保存选择位置            dialog.cancel();        }    });    dialog.show();}@Overridepublic void onPause(){    super.onPause();    StarBean.StarinfoBean bean = mDatas.get(selectPos);    String name=bean.getName();    String logoname=bean.getLogoname();    SharedPreferences.Editor editor=star_pref.edit();//获取像共享参数zhong写入数据的对象    editor.putString("name",name);    editor.putString("logoname",logoname);    editor.commit();}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SharedPreferences的简单应用</title>
      <link href="/2020/08/01/sharedpreferences-de-jian-dan-ying-yong/"/>
      <url>/2020/08/01/sharedpreferences-de-jian-dan-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>关于SharePreferences的原理我在此不做赘述(有道云笔记里有写),这里重点分析如果实现首次进入app和之后进入app的页面不同的效果  </p><h2 id="一-代码"><a href="#一-代码" class="headerlink" title="一.代码"></a>一.代码</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeocomActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    TextView tv<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    Handler handler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"HandlerLeak"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断是否是第一次进入此应用,如果是第一次进入此应用,跳到引导界面</span>                <span class="token keyword">boolean</span> isfirst<span class="token operator">=</span>first_pref<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"isfirst"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Intent intent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isfirst<span class="token punctuation">)</span><span class="token punctuation">{</span>                  intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>WeocomActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> GuideActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//为了下一次不跳转更改值</span>                   SharedPreferences<span class="token punctuation">.</span>Editor editor<span class="token operator">=</span>first_pref<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   editor<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"isfirst"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   editor<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>WeocomActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SharedPreferences first_pref<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_weocom<span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>welcome_tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        first_pref <span class="token operator">=</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"first_pref"</span><span class="token punctuation">,</span> MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二-分析"><a href="#二-分析" class="headerlink" title="二.分析"></a>二.分析</h2><p>1.利用getSharepreference 创建对象,然后第一个参数是一个标指key,第二个参数的模式,MODE_PRIVATE表示被本应用读写<br>2.在HandleMessage用getXXX来给isfirst进行赋值</p><pre><code>boolean isfirst=first_pref.getBoolean("isfirst",true);</code></pre><p>然后写一个判断,创建一个editor对象来更改数据源</p><pre><code> SharedPreferences.Editor editor=first_pref.edit();                    editor.putBoolean("isfirst",false);                    editor.commit();</code></pre><h3 id="三-后续"><a href="#三-后续" class="headerlink" title="三.后续"></a>三.后续</h3><p>利用ViewPager写第一次进入的跳转页面(略)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>星梦缘开发的注意事项</title>
      <link href="/2020/08/01/xing-meng-yuan-kai-fa-de-zhu-yi-shi-xiang/"/>
      <url>/2020/08/01/xing-meng-yuan-kai-fa-de-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="一-依赖的导入"><a href="#一-依赖的导入" class="headerlink" title="一.依赖的导入"></a>一.依赖的导入</h2><pre><code>implementation 'com.google.code.gson:gson:2.2.4'implementation 'com.squareup.picasso:picasso:2.5.2'implementation 'de.hdodenhof:circleimageview:3.1.0'</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OXChart的详细用法</title>
      <link href="/2020/07/31/oxchart-de-xiang-xi-yong-fa/"/>
      <url>/2020/07/31/oxchart-de-xiang-xi-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="第三方库来源-原作者的github-："><a href="#第三方库来源-原作者的github-：" class="headerlink" title="第三方库来源(原作者的github)："></a>第三方库来源(原作者的github)：</h1><p>原作者github：<a href="https://github.com/openXu/OXChart" target="_blank" rel="noopener">https://github.com/openXu/OXChart</a></p><h2 id="一-类库接入"><a href="#一-类库接入" class="headerlink" title="一.类库接入"></a>一.类库接入</h2><pre><code>implementation 'com.openxu.viewlib:OXViewLib:xxx'//注意：其中xxx是OXChart的版本号(去原作者github上找)//比如下面的这种写法：implementation 'com.openxu.viewlib:OXViewLib:1.0.2'</code></pre><p>使用主题<br>       <style name="OXViewAppBaseTheme" parent="Theme.AppCompat.Light.NoActionBar"><br>        <item name="android:windowNoTitle">true</item><br>        <item name="android:windowActionBar">false</item><br>        <item name="android:clipToPadding">true</item><br>        <item name="android:windowSoftInputMode">adjustResize</item><br>    </style></p><h2 id="二-南丁格尔玫瑰图"><a href="#二-南丁格尔玫瑰图" class="headerlink" title="二.南丁格尔玫瑰图"></a>二.南丁格尔玫瑰图</h2><p>效果图:<br><img src="https://i.loli.net/2020/07/31/bsTSe2zRVEIXYdf.gif" width="200" height="400">  </p><h3 id="一-xml布局和结果"><a href="#一-xml布局和结果" class="headerlink" title="一.xml布局和结果"></a>一.xml布局和结果</h3><h4 id="1-若无数据-则显示暂无数据"><a href="#1-若无数据-则显示暂无数据" class="headerlink" title="1.若无数据,则显示暂无数据"></a>1.若无数据,则显示暂无数据</h4><h4 id="2-若有数据-则会显示图表"><a href="#2-若有数据-则会显示图表" class="headerlink" title="2.若有数据,则会显示图表"></a>2.若有数据,则会显示图表</h4><h4 id="3-xml代码写法"><a href="#3-xml代码写法" class="headerlink" title="3.xml代码写法"></a>3.xml代码写法</h4><p>利用下面代码中的写法即可,无多余设置</p><pre class=" language-XML"><code class="language-XML">         <com.openxu.cview.chart.rosechart.NightingaleRoseChart        android:id="@+id/roseChartMany"        android:layout_width="match_parent"        android:layout_height="wrap_content"        android:layout_marginTop="2dp"/>  </code></pre><h3 id="二-java代码"><a href="#二-java代码" class="headerlink" title="二.java代码"></a>二.java代码</h3><h4 id="1-roseActivity"><a href="#1-roseActivity" class="headerlink" title="1.roseActivity"></a>1.roseActivity</h4><p>属性在注释里写的很清楚了</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> NightingaleRoseChart rose1<span class="token punctuation">;</span>     rose1<span class="token operator">=</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>rose1<span class="token punctuation">)</span><span class="token punctuation">;</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowChartLable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否在图表上显示指示lable</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowChartNum</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//是否在图表上显示指示num</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowNumTouched</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//点击显示数量</span>        rose1<span class="token punctuation">.</span><span class="token function">setShowRightNum</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//右侧显示数量</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span>roseList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"数据1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"数据2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token string">"数据3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"数据4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RoseBean</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"数据5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数1：数据对象class， 参数2：数量属性字段名称， 参数3：名称属性字段名称， 参数4：数据集合</span>        rose1<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>RoseBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token string">"ClassName"</span><span class="token punctuation">,</span> roseList<span class="token punctuation">)</span><span class="token punctuation">;</span>        rose1<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否正在加载，数据加载完毕后置为false</span></code></pre><h4 id="2-RoseBean的代码"><a href="#2-RoseBean的代码" class="headerlink" title="2.RoseBean的代码"></a>2.RoseBean的代码</h4><p><strong><em>内部写get和set还有构造器即可</em></strong></p><pre class=" language-java"><code class="language-java">        <span class="token keyword">class</span> <span class="token class-name">RoseBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> count<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ClassName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RoseBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RoseBean</span><span class="token punctuation">(</span><span class="token keyword">float</span> count<span class="token punctuation">,</span> String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>        ClassName <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token keyword">float</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ClassName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassName <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三-饼状图"><a href="#三-饼状图" class="headerlink" title="三.饼状图"></a>三.饼状图</h3><img src="https://i.loli.net/2020/07/31/MlpUg3PEjuLRdy9.gif" width="200" height="400">     <h3 id="一-xml布局和结果-1"><a href="#一-xml布局和结果-1" class="headerlink" title="一.xml布局和结果"></a>一.xml布局和结果</h3><h4 id="1-若无数据-则显示暂无数据-1"><a href="#1-若无数据-则显示暂无数据-1" class="headerlink" title="1.若无数据,则显示暂无数据"></a>1.若无数据,则显示暂无数据</h4><h4 id="2-若有数据-则会显示图表-1"><a href="#2-若有数据-则会显示图表-1" class="headerlink" title="2.若有数据,则会显示图表"></a>2.若有数据,则会显示图表</h4><h4 id="3-xml代码写法-1"><a href="#3-xml代码写法-1" class="headerlink" title="3.xml代码写法"></a>3.xml代码写法</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.openxu.cview.chart.piechart.PieChartLayout</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/pieChart2<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_centerVertical</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>paddingRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.openxu.cview.chart.piechart.PieChart</span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.openxu.cview.chart.piechart.PieChartLableView</span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.openxu.cview.chart.piechart.PieChartLayout</span><span class="token punctuation">></span></span></code></pre><p>这里PieChart是表示左边部分用来放饼状图,PieChartLableView用来填右边部分的布局放数据  </p><h3 id="二-java代码-1"><a href="#二-java代码-1" class="headerlink" title="二.java代码"></a>二.java代码</h3><pre><code>private PieChartLayout pieChart2;pieChart2 = (PieChartLayout)findViewById(R.id.pieChart2);    pieChart2.setRingWidth(DensityUtil.dip2px(this, 20));    pieChart2.setTagModul(PieChartLayout.TAG_MODUL.MODUL_LABLE);      //在lable后面显示tag    pieChart2.setDebug(false);    pieChart2.setLoading(true);    //请求数据    List&lt;Object&gt; datalist = new ArrayList&lt;&gt;();    datalist.clear();    datalist.add(new PieBean(20, "IT"));    datalist.add(new PieBean(10, "销售"));    datalist.add(new PieBean(30, "金融"));    datalist.add(new PieBean(8, "林木业"));    datalist.add(new PieBean(15, "制造"));    datalist.add(new PieBean(15, "农业"));    pieChart2.setLoading(false);    pieChart2.setChartData(PieBean.class, "Numner", "Name",datalist ,null);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 统计图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ScrollView底部显示不全的解决方案</title>
      <link href="/2020/07/29/yong-scrollview-di-bu-xian-shi-bu-quan-de-jie-jue-fang-an/"/>
      <url>/2020/07/29/yong-scrollview-di-bu-xian-shi-bu-quan-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>解决方式：在底部最后两行加两个换行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>weight属性的应用</title>
      <link href="/2020/07/29/weight-shu-xing-de-ying-yong/"/>
      <url>/2020/07/29/weight-shu-xing-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ListView的用法+实战</title>
      <link href="/2020/07/28/listview/"/>
      <url>/2020/07/28/listview/</url>
      
        <content type="html"><![CDATA[<p>效果图<br><img src="https://i.loli.net/2020/07/28/E2Z6AkxzvVIpWSe.png" alt="最终效果图1"><br>属性值一列下来就是用ListView实现的  </p><h3 id="一-xml文件"><a href="#一-xml文件" class="headerlink" title="一.xml文件"></a>一.xml文件</h3><h4 id="1-ListView布局在主xml"><a href="#1-ListView布局在主xml" class="headerlink" title="1.ListView布局在主xml"></a>1.ListView布局在主xml</h4><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>         <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/staranalysis_lv<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>divider</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>dividerHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>scrollbars</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>         <span class="token punctuation">/></span></span>  </code></pre><h4 id="2-额外写一个xml写每个item的布局"><a href="#2-额外写一个xml写每个item的布局" class="headerlink" title="2.额外写一个xml写每个item的布局"></a>2.额外写一个xml写每个item的布局</h4><p>![item_star_analysis](<a href="https://i.loli.net/2020/07/28/" target="_blank" rel="noopener">https://i.loli.net/2020/07/28/</a><br>9et2j5BrVEPDK1N.png)<br>这个在后面适配器那里加载的时候会用在</p><h3 id="二-java代码部分"><a href="#二-java代码部分" class="headerlink" title="二.java代码部分"></a>二.java代码部分</h3><p><strong><em>关于notifyDataSetChanged方法的使用：<br>notifyDataSetChanged方法强制listview调用getView来刷新每个Item的内容<br>有时候我们需要修改已经生成的列表，添加或者修改数据，notifyDataSetChanged()可以在修改适配器绑定的数组后，不用重新刷新Activity，通知Activity更新ListView</em></strong></p><p>正是因为listView有notifDataSetChanged这个方法,所以下面这种代码的写法是可行的  </p><h4 id="1-ListView适配器的写法"><a href="#1-ListView适配器的写法" class="headerlink" title="1.ListView适配器的写法"></a>1.ListView适配器的写法</h4><p>(思路都差不多,在GridView那里已经做了详细说明了)</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnalysisBaseAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token punctuation">{</span>    Context context<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>StarAnalysisBean<span class="token operator">></span>mData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AnalysisBaseAdapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>StarAnalysisBean<span class="token operator">></span> mDatas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mData<span class="token operator">=</span>mDatas<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mData<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewHoder holder<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>convertView<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//item_star_analysis是单个item布局方式xml文件</span>            convertView<span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_star_analysis<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            holder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span><span class="token punctuation">;</span>            convertView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            holder<span class="token operator">=</span> <span class="token punctuation">(</span>ViewHoder<span class="token punctuation">)</span> convertView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StarAnalysisBean bean <span class="token operator">=</span> mData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>titleTv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>contentTv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//改变背景颜色</span>        holder<span class="token punctuation">.</span>contentTv<span class="token punctuation">.</span><span class="token function">setBackgroundResource</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">{</span>        TextView titleTv<span class="token punctuation">,</span>contentTv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ViewHoder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>            titleTv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemstat_tv_title<span class="token punctuation">)</span><span class="token punctuation">;</span>            contentTv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemstat_tv_content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><strong><em>下面代码只需要看注释理解就行了,相关核心内容的代码我会在注释前用感叹号标记</em></strong></p><h4 id="2-1方式一-先set构造器-再更新数据源"><a href="#2-1方式一-先set构造器-再更新数据源" class="headerlink" title="2.1方式一 :(先set构造器,再更新数据源)"></a>2.1方式一 :(先set构造器,再更新数据源)</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//主函数部分</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_star_analysis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取上级界面传递过来的数据</span>        Intent intent<span class="token operator">=</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//传过来的是一个类,所以用getSerializableExtra</span>        bean<span class="token operator">=</span> <span class="token punctuation">(</span>StarBean<span class="token punctuation">.</span>StarinfoBean<span class="token punctuation">)</span> intent<span class="token punctuation">.</span><span class="token function">getSerializableExtra</span><span class="token punctuation">(</span><span class="token string">"star"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//initView的代码我省略了</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//！！！！！！！！！！</span>        mDatas<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化显示在ListView上</span>        adapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AnalysisBaseAdapter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>mDatas<span class="token punctuation">)</span><span class="token punctuation">;</span>        analysisLv<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//！！！调用函数</span>        <span class="token function">addDataToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//加载ListView当中的数据源内容</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addDataToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加数据</span>        StarAnalysisBean sab1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"性格特点："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getTd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"掌管宫位："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getGw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>lightpink<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"显阴阳性："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getYy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>lightgreen<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"最大特征："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getTz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>purple<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"主管星球："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getZg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>orange<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"幸运颜色："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getYs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorAccent<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"搭配珠宝："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getZb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"幸运号码："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getHm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>grey<span class="token punctuation">)</span><span class="token punctuation">;</span>        StarAnalysisBean sab9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarAnalysisBean</span><span class="token punctuation">(</span><span class="token string">"相配金属："</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>darkblue<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab1<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab2<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab3<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab4<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab5<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab6<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab7<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab8<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sab9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//！！！数据源发生变化,提醒适配器更新</span>        adapter<span class="token punctuation">.</span><span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong><em>mDatas最开始是没有数据的,但是因为下面调用addDataToList()提醒适配器更新,所以可以addDataToList()写在后面</em></strong></p><h4 id="2-2方式二-可以这样写但是不推荐"><a href="#2-2方式二-可以这样写但是不推荐" class="headerlink" title="2.2方式二(可以这样写但是不推荐):"></a>2.2方式二(可以这样写但是不推荐):</h4><p>addDataToList()写在前面设置适配器的前面,在设置适配器的时候顺便就把数据给赋了,但是在addDataToList()中必须把    adapter.notifyDataSetChanged();这行代码给去掉</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个xml布局的共享与拼接</title>
      <link href="/2020/07/27/gong-xiang-xml-bu-ju/"/>
      <url>/2020/07/27/gong-xiang-xml-bu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="一-在一个xml文件中添加另一个xml文件布局"><a href="#一-在一个xml文件中添加另一个xml文件布局" class="headerlink" title="一.在一个xml文件中添加另一个xml文件布局"></a>一.在一个xml文件中添加另一个xml文件布局</h2><p>当有多个页面有相同部分时,可以先写一个共有部分的xml文件(比如标题头部),然后在另一个xml文件中写</p><pre><code>    &lt;include layout="@layout/xxxx"/&gt;</code></pre><h2 id="在java中实现对多个xml中布局组件的合并"><a href="#在java中实现对多个xml中布局组件的合并" class="headerlink" title="在java中实现对多个xml中布局组件的合并"></a>在java中实现对多个xml中布局组件的合并</h2><p><img src="https://i.loli.net/2020/07/28/zDPJwdYXf2to5MI.png" alt=""><br>使用LayoutInflater可以实现布局组件的的合并<br>实战案例：(星梦缘star部分二级页面的编写)<br><img src="https://i.loli.net/2020/07/28/E2Z6AkxzvVIpWSe.png" alt="最终效果图1"><br><img src="https://i.loli.net/2020/07/28/WbB5MtoVGO7fIYm.png" alt="最终效果图2"></p><p><img src="https://i.loli.net/2020/07/28/M3rbzJWSPwIGLyN.png" alt="activity_star_analysis.xml"><br><img src="https://i.loli.net/2020/07/28/Ju3qg9X7vpSkDtl.png" alt="footer_star_analysis.xml"><br>分开写了这两个模块之后,想要在ListView下面加上星座解析,在java代码中要这样写 ：   </p><pre class=" language-java"><code class="language-java">        ListView analysisLv<span class="token punctuation">;</span>        <span class="token keyword">private</span> TextView footerTv<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ListView底部需要改变的文字</span>          <span class="token comment" spellcheck="true">//为ListView添加底部布局</span>        View footerView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>footer_star_analysis<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将布局转化成View对象(也可以是组件)</span>        analysisLv<span class="token punctuation">.</span><span class="token function">addFooterView</span><span class="token punctuation">(</span>footerView<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置底部的位置添加(也可以设置头部)</span>        footerTv<span class="token operator">=</span>footerView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>footerstar_tv_info<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong><em>其中analysisLv是ListView的对象,footerstar_tv_info是textview的id,对象我们一般声明在外面的全局区域</em></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网格图GridView的用法+实战</title>
      <link href="/2020/07/27/guan-yu-wang-ge-tu-gridview-de-yong-fa/"/>
      <url>/2020/07/27/guan-yu-wang-ge-tu-gridview-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>[<img src="https://s1.ax1x.com/2020/07/27/aPM5Ps.png" alt="效果图">]  </p><h3 id="一-XML布局"><a href="#一-XML布局" class="headerlink" title="一.XML布局"></a>一.XML布局</h3><h4 id="1-主xml写gridview"><a href="#1-主xml写gridview" class="headerlink" title="1.主xml写gridview"></a>1.主xml写gridview</h4><p>其中numColumns用来控制列数      </p><pre><code>    &lt;GridView            android:id="@+id/starfrag_gv"            android:layout_width="match_parent"            android:layout_height="match_parent"            android:numColumns="4"            android:layout_below="@id/starfrag_vp"            /&gt;</code></pre><h4 id="2-额外创建一个xml文件写每个item的布局"><a href="#2-额外创建一个xml文件写每个item的布局" class="headerlink" title="2.额外创建一个xml文件写每个item的布局"></a>2.额外创建一个xml文件写每个item的布局</h4><p><img src="https://i.loli.net/2020/07/28/T3GkcJVydRbsezv.png" alt="item_star_gv"></p><h3 id="二-java代码部分"><a href="#二-java代码部分" class="headerlink" title="二.java代码部分"></a>二.java代码部分</h3><h4 id="1-创建一个GridView的对象"><a href="#1-创建一个GridView的对象" class="headerlink" title="1.创建一个GridView的对象"></a>1.创建一个GridView的对象</h4><pre><code>    starGv=view.findViewById(R.id.starfrag_gv);</code></pre><h4 id="2-写一个适配器StarBaseAdapter继承于BaseAdapter"><a href="#2-写一个适配器StarBaseAdapter继承于BaseAdapter" class="headerlink" title="2.写一个适配器StarBaseAdapter继承于BaseAdapter"></a>2.写一个适配器StarBaseAdapter继承于BaseAdapter</h4><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarBaseAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token punctuation">{</span>    Context context<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>StarInfoBean<span class="token punctuation">.</span>StarinfoBean<span class="token operator">></span>mDatas<span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span>logoMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StarBaseAdapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>StarInfoBean<span class="token punctuation">.</span>StarinfoBean<span class="token operator">></span> mDatas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mDatas <span class="token operator">=</span> mDatas<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logoMap<span class="token operator">=</span> AssetUtils<span class="token punctuation">.</span><span class="token function">getLogoImgMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDatas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewHoder hoder<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>convertView<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            convertView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_star_gv<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            hoder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span><span class="token punctuation">;</span>            convertView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>hoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            hoder<span class="token operator">=</span><span class="token punctuation">(</span>ViewHoder<span class="token punctuation">)</span> convertView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取指定位置数据</span>        StarInfoBean<span class="token punctuation">.</span>StarinfoBean bean<span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得图片名称,根据名称在内存中查找</span>        String logoName<span class="token operator">=</span>bean<span class="token punctuation">.</span><span class="token function">getLogoname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bitmap bitmap<span class="token operator">=</span>logoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>logoName<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>iv<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对item当中的控件进行声明和初始化操作</span>    <span class="token keyword">class</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">{</span>        CircleImageView iv<span class="token punctuation">;</span>        TextView tv<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ViewHoder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span><span class="token punctuation">{</span>            iv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>item_star_iv<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv<span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>item_star_tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-适配器的解释："><a href="#3-适配器的解释：" class="headerlink" title="3.适配器的解释："></a>3.适配器的解释：</h4><p>方法一：构造方法要注意数据的获取,参数传递的问题,要拿到图片，文字数据下面才能布局</p><p>方法二 :getCount返回数据组数大小(size)</p><p>方法三:getItem返回当前item  </p><p>方法四 :getItemId返回position</p><p>前四个方法写法都比较简单</p><p>方法五 ：自定义一个ViewHoder内部类,其中在构造方***法中来初始化xml组件<br>其中CircleImageVie是加了依赖后才可以用的组件    </p><pre><code>class ViewHoder{    CircleImageView iv;    TextView tv;    public ViewHoder(View view){        iv=view.findViewById(R.id.item_star_iv);        tv=view.findViewById(R.id.item_star_tv);    }}</code></pre><p>方法六(核心):View getView<br>关于converView: 首先我们要知道setTag方法是干什么的，他是给View对象的一个标签，标签可以是任何内容，我们这里把他设置成了一个对象，为了实现复用,使用getTag和setTag实现复用<br>convertView作用：这个convertView其实就是最关键的部分原理上讲当ListView滑动的过程中 会有item被滑出屏幕而不再被使用，这时候Android会回收这个条目的view 这个view也就是这里的convertView当item1被移除屏幕的时候 我们会重新new一个View给新显示的item_new 而如果使用了这个convertView 我们其实可以复用它 这样就省去了new View的大量开销</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewHoder hoder<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>convertView<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//下面的那行代码要加载一下每个item的样式,第一个是item的xml文件布局,第二个参数一般直接null</span>            convertView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_star_gv<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            hoder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ViewHoder</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span><span class="token punctuation">;</span>            convertView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>hoder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            hoder<span class="token operator">=</span><span class="token punctuation">(</span>ViewHoder<span class="token punctuation">)</span> convertView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现复用</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取指定位置数据</span>        StarInfoBean<span class="token punctuation">.</span>StarinfoBean bean<span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得图片名称,根据名称在内存中查找</span>        String logoName<span class="token operator">=</span>bean<span class="token punctuation">.</span><span class="token function">getLogoname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bitmap bitmap<span class="token operator">=</span>logoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>logoName<span class="token punctuation">)</span><span class="token punctuation">;</span>        hoder<span class="token punctuation">.</span>iv<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> convertView<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把矩形图片变成圆形的方法</title>
      <link href="/2020/07/27/ba-ju-xing-tu-pian-bian-cheng-yuan-xing-de-fang-fa/"/>
      <url>/2020/07/27/ba-ju-xing-tu-pian-bian-cheng-yuan-xing-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>开源项目的网址：<br><a href="https://github.com/1766095699/CircleImageView" target="_blank" rel="noopener">https://github.com/1766095699/CircleImageView</a><br>需要导入的依赖      </p><pre><code>    implementation 'de.hdodenhof:circleimageview:3.1.0'</code></pre><p><a href="https://imgchr.com/i/aPeYJP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/27/aPeYJP.png" alt="效果图"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轮播图(ViewPager)用法</title>
      <link href="/2020/07/26/lun-bo-tu/"/>
      <url>/2020/07/26/lun-bo-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="一-XML布局"><a href="#一-XML布局" class="headerlink" title="一.XML布局"></a>一.XML布局</h2><p>下面的Liner是用来给小圆点的,其中先align再marin可以让这个布局自动就是再ViewPager的下方</p><pre><code>&lt;androidx.viewpager.widget.ViewPager   android:id="@+id/starfrag_vp"   android:layout_width="match_parent"   android:layout_height="220dp"  /&gt;  &lt;LinearLayout    android:id="@+id/starfrag_layout"    android:layout_width="match_parent"    android:layout_height="10dp"        android:orientation="horizontal"    android:layout_alignBottom="@id/starfrag_vp"    android:layout_marginBottom="10dp"    android:gravity="center_horizontal"/&gt;</code></pre><h2 id="二-java代码"><a href="#二-java代码" class="headerlink" title="二.java代码"></a>二.java代码</h2><h3 id="1-声明一个ViewPager对象"><a href="#1-声明一个ViewPager对象" class="headerlink" title="1.声明一个ViewPager对象"></a>1.声明一个ViewPager对象</h3><pre><code>ViewPager starVp=getView.findViewById(R.id.xx)</code></pre><h3 id="2-声明一个int数组装本地图片"><a href="#2-声明一个int数组装本地图片" class="headerlink" title="2.声明一个int数组装本地图片"></a>2.声明一个int数组装本地图片</h3><pre><code>int[]imgIds={R.mipmap.bg,R.mipmap.bg1};</code></pre><h3 id="3-声明ViewPager和小圆点ivList的数据源"><a href="#3-声明ViewPager和小圆点ivList的数据源" class="headerlink" title="3.声明ViewPager和小圆点ivList的数据源"></a>3.声明ViewPager和小圆点ivList的数据源</h3><pre><code>List&lt;ImageView&gt;ivList;List&lt;ImageView&gt;poinList;</code></pre><h3 id="4-自定义一个initPager函数来将数据传到3的List中"><a href="#4-自定义一个initPager函数来将数据传到3的List中" class="headerlink" title="4.自定义一个initPager函数来将数据传到3的List中"></a>4.自定义一个initPager函数来将数据传到3的List中</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initPager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LinearLayout pointLayout<span class="token punctuation">;</span>        ivList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poinList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>imgIds<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//ImageView的构造器有多种,我们选择context的这种,用getContext来实例化</span>            ImageView iv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置iv对应的图片资源并且记得设置拉伸XY</span>            iv<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>imgIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iv<span class="token punctuation">.</span><span class="token function">setScaleType</span><span class="token punctuation">(</span>ImageView<span class="token punctuation">.</span>ScaleType<span class="token punctuation">.</span>FIT_XY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置图片view的宽高,实例化一个LinearLayout.LayoutParams,选择和父类相同</span>            LinearLayout<span class="token punctuation">.</span>LayoutParams lp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把设置的宽高设置进iv</span>            iv<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将设置好的图片iv加载到集合当中</span>            ivList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//小圆点的做法和上面基本一样-----------------------------------------------</span>            <span class="token comment" spellcheck="true">//创建图片对应的指示器小圆点</span>            ImageView piv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageView</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            piv<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_normal<span class="token punctuation">)</span><span class="token punctuation">;</span>            LinearLayout<span class="token punctuation">.</span>LayoutParams plp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span> LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置以下margin值让小圆点有间隔</span>            plp<span class="token punctuation">.</span><span class="token function">setMargins</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            piv<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>plp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这步特别注意：要将小圆点添加到布局中,ViewPager是再适配器中addview</span>            pointLayout<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>piv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//为了便于操作,将小圆点添加到统一管理的集合当中</span>            poinList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>piv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//---------------------------------------------------------------------    </span>        <span class="token comment" spellcheck="true">//默认第一个小圆点是获取焦点的状态</span>        poinList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_focus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用5中的构造方法,传入context和图片的list</span>        starPagerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StarPagerAdapter</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ivList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加适配器</span>        starVp<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>starPagerAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-ViewPager的适配器"><a href="#5-ViewPager的适配器" class="headerlink" title="5.ViewPager的适配器"></a>5.ViewPager的适配器</h3><p>首先要新建一个类StarPagerAdapter继承PagerAdpter   </p><p>第一个构造方法：要去拿一下图片资源(别忘了context)<br>第二个方法返回集合大小<br>第三个方法判断两次对象是不是同一个对象</p><p>对于第四和第五个方法：其中contain是ViewGroup的对象,,position返回当前图片位置</p><p>第四个方法是实例化item, 用imageView获取当前img,然后用addView加入到ViewPager的 布中最后返回imageView<br>第五个方法是销毁item,直接获取到当前的图片,然后用removeView(imageView)来销毁</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarPagerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">PagerAdapter</span> <span class="token punctuation">{</span>            Context context<span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>ImageView<span class="token operator">></span>imgList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StarPagerAdapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ImageView<span class="token operator">></span> imgList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imgList <span class="token operator">=</span> imgList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imgList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isViewFromObject</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> view<span class="token operator">==</span>object<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断两次对象是不是一个对象</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">instantiateItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ViewGroup container<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ImageView imageView <span class="token operator">=</span> imgList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> imageView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ViewGroup container<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ImageView imageView<span class="token operator">=</span>imgList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>       </code></pre><h3 id="6-实现滑动图片原点跟着变化监听事件"><a href="#6-实现滑动图片原点跟着变化监听事件" class="headerlink" title="6.实现滑动图片原点跟着变化监听事件"></a>6.实现滑动图片原点跟着变化监听事件</h3><p>里面用到的函数就硬背就行了,功能也好理解</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//设置ViewPager的监听器函数</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setVPListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        starVp<span class="token punctuation">.</span><span class="token function">addOnPageChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewPager<span class="token punctuation">.</span>SimpleOnPageChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPageSelected</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>poinList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    poinList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_normal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                poinList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>point_focus<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="7-实现自动轮播效果-利用handler传递信息"><a href="#7-实现自动轮播效果-利用handler传递信息" class="headerlink" title="7.实现自动轮播效果(利用handler传递信息)"></a>7.实现自动轮播效果(利用handler传递信息)</h3><p>先在onCreate主函数中发送一条信息,重写一下Handler中的handleMessage方法,其中内部一定要注意再发送形成循环,对于一种状态,onCreat中只会发一次handler,所以在匿名方法内部要再发送信息形成循环</p><pre class=" language-java"><code class="language-java">    handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><pre class=" language-java"><code class="language-java">    Handler handler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取当前ViewPager显示的页面(getCurrentItem是自带的方法)</span>                    <span class="token keyword">int</span> currentItem<span class="token operator">=</span>starVp<span class="token punctuation">.</span><span class="token function">getCurrentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//判断是否为最后一张,如果是最后一张就回到第一张,否则显示最后一张</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentItem<span class="token operator">==</span>ivList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        starVp<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        currentItem<span class="token operator">++</span><span class="token punctuation">;</span>                        starVp<span class="token punctuation">.</span><span class="token function">setCurrentItem</span><span class="token punctuation">(</span>currentItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//形成循环发送--接受消息的效果,在接受消息的同时也要进行信息发送</span>                    handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地资源的读取</title>
      <link href="/2020/07/25/ben-di-zi-yuan-de-du-qu/"/>
      <url>/2020/07/25/ben-di-zi-yuan-de-du-qu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/25/aSwICF.png" alt="两种资源文件"><br>一.读取Assets文件夹中的文件<br>    1.创建工具类AssetUtils  </p><p>2.自定义参数读取字符串,参数固定(下图时读Json文件),用AssetManager来读文件夹</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getJosonFromAssets</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span>String filename<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取Assets文件夹管理器(固定写法)</span>        AssetManager am <span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出流</span>        ByteArrayOutputStream baos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取文件输入流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//读文件夹中的文件</span>            InputStream is<span class="token operator">=</span>am<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取内容到内存流</span>            <span class="token keyword">int</span> hasRead<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                hasRead<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hasRead<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String msg<span class="token operator">=</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>3.用Bitmap读图片读图片</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> Bitmap <span class="token function">getBitmapFromAssets</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span>String filename<span class="token punctuation">)</span><span class="token punctuation">{</span>        Bitmap bitmap<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件夹管理者</span>        AssetManager am<span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream is<span class="token operator">=</span>am<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            bitmap<span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.将数据放入数组  </p><pre><code>     //将Assets文件夹中的图片一起读取,放在内存当中,便于管理public static void saveBitmapFromAssets(Context context, StarInfoBean starInfoBean){    logoImgMap = new HashMap&lt;&gt;();    contentImgMap=new HashMap&lt;&gt;();    List&lt;StarInfoBean.StarinfoBean&gt; starlist=starInfoBean.getStarinfo();//注意,之前数据已经解析进starInforBean了    for (int i = 0; i &lt;starlist.size() ; i++) {        //读取图片        String logoname=starlist.get(i).getLogoname();        String filename="xzlogo/"+logoname+".png";        Bitmap logoBm=getBitmapFromAssets(context,filename);        logoImgMap.put(logoname,logoBm);        String contentName="xzcontentlogo/"+logoname+".png";        Bitmap bitmap=getBitmapFromAssets(context,contentName);        contentImgMap.put(logoname,bitmap);    }}</code></pre><p>5.get方法得到数组  </p><pre><code>       public static Map&lt;String,Bitmap&gt;getLogoImgMap(){    return logoImgMap;}public static Map&lt;String,Bitmap&gt;getContentImgMap(){    return contentImgMap;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
            <tag> 星梦缘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Stuidio中创建Fragment找不到xml文件的解决方案</title>
      <link href="/2020/07/25/stuidio/"/>
      <url>/2020/07/25/stuidio/</url>
      
        <content type="html"><![CDATA[<p>一.可能是你导入了android.R的包导致的,删去即可<br>二.studio本身的bug,重启stuidio即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>底部导航栏布局和界面切换</title>
      <link href="/2020/07/25/di-bu-cai-dan-lan-bu-ju/"/>
      <url>/2020/07/25/di-bu-cai-dan-lan-bu-ju/</url>
      
        <content type="html"><![CDATA[<p><strong><em>先看以下想要实现的效果：</em></strong><br><img src="https://i.loli.net/2020/07/25/JvQVIcnFhyP7uWA.png" alt="效果图"></p><h2 id="一-RadioGroup和RadioButton设置底部布局"><a href="#一-RadioGroup和RadioButton设置底部布局" class="headerlink" title="一.RadioGroup和RadioButton设置底部布局"></a>一.RadioGroup和RadioButton设置底部布局</h2><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioGroup</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_rg<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/lightyellow<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &lt;RadioButton            android:id="@+id/main_rb_star"            android:drawableTop="@drawable/main_rb_star"            android:text="@string/label_star"            android:checked="true"            <span class="token comment" spellcheck="true">&lt;!--由于四个按钮下面的属性可以直接封装到style里面进行模块化管理 --></span>            android:layout_width="0dp"            android:layout_height="match_parent"            android:layout_weight="1"            <span class="token comment" spellcheck="true">&lt;!--这里一定要设置成@null才会有按钮的效果 --></span>            android:button="@null"            android:checked="true"            android:gravity="center            android:textSize="12sp"            android:drawablePadding="2dp"            android:textColor="@drawable/main_rbtxt"            />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RadioGroup</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--中间部分用布局占位,会去使用Fragmentt替换这块布局--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_layout_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_tv_title<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_above</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/main_rg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong><em>上面的代码总体是在RelativeLayout下进行布局的,！！！！<br> 背景颜色和图片等属性自行调整,想要有图片的效果只要加四个RadioButton即可</em></strong>  </p><p><strong><em>注意:<br>    1.layout_alignParentBottom可以让到导航栏位于底部<br>    2.Group中的padding值可以让导航栏的button分开<br>    3.直接前嵌套多个RadioButton他们回自动评分导航栏<br>    4.button的属性值设置成@null才能有按钮的特效<br>    5.用drawableTop可以将button换成图片,然后直接设置text还有gravity可以实现文字自动居于图片下方<br>    6.想要设置选中和非选中状态文字颜色和图片(textcolor和drawbleTop)：要在drawable中创建一个xml文件,然后设置不同check状态下的情况,改图片用android:drawable,改颜色用android:color</em></strong><br>    <img src="https://i.loli.net/2020/07/25/DWkZejTna9PMwcA.png" alt="自定义不同check状态下的图片"><br>    <strong><em>7.中间部分用布局占位,会去使用Fragmentt替换这块布局</em></strong>   </p><h2 id="二-Fragment页面切换"><a href="#二-Fragment页面切换" class="headerlink" title="二.Fragment页面切换"></a>二.Fragment页面切换</h2><p>1.新建Fragment(同时新建对应的xml文件)<br>2.创建碎片对象(每一项都按照下面的代码写)</p><pre><code>    Fragment starFrag    starFrag=new StarFragment();    //StarFragment是1中创建的Fragment的类名</code></pre><p>3.创建一个addFragmentPage()函数来加载四个Fragment  </p><pre><code>    private void addFragmentPage() {          //1.创建碎片管理者(manager是声明的全局的FragmnentManager的对象)          manager = getSupportFragmentManager();           ////2.创建碎片处理事务对象        FragmentTransaction transaction=manager.beginTransaction();        //3.将四个Fragment统一的添加到布局当中        //add的第一个参数是要布局的区域,第二个是要布局的Fragment对象        transaction.add(R.id.main_layout_center,starFrag);        transaction.add(R.id.main_layout_center,partnerFrag);        transaction.add(R.id.main_layout_center,luckFrag);        transaction.add(R.id.main_layout_center,meFrag);          //4.因为初始的时候第一项时亮的,所以其他的隐藏           transaction.hide(partnerFrag);        transaction.hide(luckFrag);        transaction.hide(meFrag);        //5.//5.提交碎片改变后的事务        transaction.commit();}</code></pre><p> 4.添加点击事件(onCheckedChanged)      </p><pre><code>    @Overridepublic void onCheckedChanged(RadioGroup group, int checkedId) {    FragmentTransaction transaction=manager.beginTransaction();    switch (checkedId){        case R.id.main_rb_star:            transaction.hide(partnerFrag);            transaction.hide(luckFrag);            transaction.hide(meFrag);            transaction.show(starFrag);            break;        case R.id.main_rb_partner:            transaction.hide(starFrag);            transaction.hide(luckFrag);            transaction.hide(meFrag);            transaction.show(partnerFrag);            break;        case R.id.main_rb_luck:            transaction.hide(partnerFrag);            transaction.hide(starFrag);            transaction.hide(meFrag);            transaction.show(luckFrag);            break;        case R.id.main_rb_me:            transaction.hide(partnerFrag);            transaction.hide(luckFrag);            transaction.hide(starFrag);            transaction.show(meFrag);            break;    }        transaction.commit();}     </code></pre><h2 id="三-细节问题"><a href="#三-细节问题" class="headerlink" title="三.细节问题"></a>三.细节问题</h2><h3 id="一-RadioGroup的点击事件"><a href="#一-RadioGroup的点击事件" class="headerlink" title="一.RadioGroup的点击事件"></a>一.RadioGroup的点击事件</h3><p>两种设置方式<img src="https://i.loli.net/2020/07/25/NnKLJucrm5PpX8l.png" alt="方式一"><br><img src="https://i.loli.net/2020/07/25/RJgIomUTvsxdD8S.png" alt="方式二"><br>方式一 : 直接通过匿名对象的方式传参数给点击事件监听器<br>方式二 : 通过调用点击事件接口的形式,在外部重写方法(应为此时MainActivity是Listener的实现类)<br>显然,方式二看上去回更简洁一些,更容易看出代码逻辑</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
            <tag> UI布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized关键字(二)</title>
      <link href="/2020/07/22/synchronized-guan-jian-zi-er/"/>
      <url>/2020/07/22/synchronized-guan-jian-zi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="emsp-一-monitor的JVM源码深入解析"><a href="#emsp-一-monitor的JVM源码深入解析" class="headerlink" title=" 一.monitor的JVM源码深入解析"></a> 一.monitor的JVM源码深入解析</h2><p><img src="https://i.loli.net/2020/07/22/BSqiyrktVT1zaCw.png" alt="JVM源码"></p><h3 id="一-代码解析："><a href="#一-代码解析：" class="headerlink" title="一.代码解析："></a>一.代码解析：</h3><p>  1.在多个线程竞争锁的时候,线程1如果抢到锁,那么后面时刻进来的其他线程就会进入_cxq这个单向列表里等着(处在block状态),当线程一执行完一次同步代码块之后,如果此时依旧是线程1抢到了锁,那么单项列表里线程会被加到_EntryList这个列表中  </p><h3 id="二-monitor竞争"><a href="#二-monitor竞争" class="headerlink" title="二.monitor竞争"></a>二.monitor竞争</h3><p><img src="https://i.loli.net/2020/07/23/sn4GTgMzZIjbJ5p.png" alt="源码位置"></p><p> 1.代码含义<br> 从源码中我们可以得出以下结论(在(一)中提到过了):<br> ①有新线程进入synchronized时,通过CAS操作把owner字段设置成当前线程<br> ②recursions遇到进入sychronized的”{“就会+1,出去的时候减1,对于重入锁,recursions可记录重入的次数<br> ③第一次进入的线程,owner会改为该线程,recursions会赋成1<br> ④如果获取锁失败,则等待锁的释放  </p><h3 id="三-monitor等待"><a href="#三-monitor等待" class="headerlink" title="三.monitor等待"></a>三.monitor等待</h3><p><img src="https://i.loli.net/2020/07/23/fAospXhJcNqgOb2.png" alt="源码位置"><br><img src="https://i.loli.net/2020/07/23/NEvpMwfjFi4DqnR.png" alt="代码概括"></p><h3 id="四-monitor释放"><a href="#四-monitor释放" class="headerlink" title="四.monitor释放"></a>四.monitor释放</h3><p><img src="https://i.loli.net/2020/07/23/ZNnmR8I3UebjMiF.png" alt="源码位置"><br><img src="https://i.loli.net/2020/07/23/2COuLacbdFHAq6t.png" alt="代码概括"></p><h3 id="五-monitor是重量级锁"><a href="#五-monitor是重量级锁" class="headerlink" title="五.monitor是重量级锁"></a>五.monitor是重量级锁</h3><p><img src="https://i.loli.net/2020/07/23/mBNJsKiUqtd8fHQ.png" alt="Linx系统体系架构"><br><img src="https://i.loli.net/2020/07/23/VAWI4ayxzNJjlKP.png" alt="解析"><br>注:正是由于内核态和用户态的的频繁切换,导致synchronized效率很低</p><h2 id="二-CAS简介"><a href="#二-CAS简介" class="headerlink" title="二.CAS简介"></a>二.CAS简介</h2><h3 id="emsp-1-CAS概述和作用"><a href="#emsp-1-CAS概述和作用" class="headerlink" title=" 1.CAS概述和作用"></a> 1.CAS概述和作用</h3><p><img src="https://i.loli.net/2020/07/23/IrGSsoJkLOPTvYa.png" alt=""><br><img src="https://i.loli.net/2020/07/23/tIvJz456ngxQryj.png" alt="代码"><br>内存中的值,旧的预估值和要改的新值之间的关系是,如果内存值和预估值不同,就一直在while循环中进行比较,如果相同,就赋给新值</p><h3 id="emsp-2-乐观锁和悲观锁"><a href="#emsp-2-乐观锁和悲观锁" class="headerlink" title=" 2.乐观锁和悲观锁"></a> 2.乐观锁和悲观锁</h3><p><img src="https://i.loli.net/2020/07/23/imhNGwOpU5FnD9s.png" alt=""><br><strong><em>总结:<br> ①悲观锁会造成线程阻塞,性能差<br> ②乐观锁的处理机制是判断别人有没有改过数据,如果没人改就自己更新,有人改就重试,总体性能较好<br> ③乐观锁适用于竞争不激烈,多核CPU的场景下,因为如果不断重试效率可能还不如synchronized</em></strong></p><h2 id="三-synchronized优化"><a href="#三-synchronized优化" class="headerlink" title="三.synchronized优化"></a>三.synchronized优化</h2><h3 id="emsp-一-Java对象布局细节"><a href="#emsp-一-Java对象布局细节" class="headerlink" title=" 一.Java对象布局细节"></a> 一.Java对象布局细节</h3><h4 id="emsp-1-对象布局"><a href="#emsp-1-对象布局" class="headerlink" title=" 1.对象布局"></a> 1.对象布局</h4><p><img src="https://i.loli.net/2020/07/23/dSPG3JvkHDxuUA4.png" alt=""><br><strong><em>实例数据:也就是在对象中声明的变量等数据</em></strong>  </p><p><strong><em>对齐数据:由于字节位数的关系,一个对象的字节数必须是8的整数倍。例如 : 一个对象内存总共是13字节,那么为了对齐数据,总内存会占16字节,补充了3字节</em></strong></p><p><strong><em>对象头:每个对象生来就有的,对象头主要分为Mark Word和Klass pointer(类型指针)</em></strong></p><h3 id="2-对象头的大小"><a href="#2-对象头的大小" class="headerlink" title="2.对象头的大小"></a>2.对象头的大小</h3><p><img src="https://i.loli.net/2020/07/23/rAIYV1SmTCPdOJg.png" alt=""><br>用JOL工具包显示出的对象头大小结果（平时是IDA默认是开启指针压缩的）:<br><img src="https://i.loli.net/2020/07/23/dkKIyU6Eh7MDFsQ.png" alt="指针压缩时"><br><img src="https://i.loli.net/2020/07/23/QbfvLnYwI3OSAyB.png" alt="取消指针压缩时"><br>由于平时默认指针压缩时开着的,如果开启了指针压缩,那么会占,12字节,Klass Pointer会被压缩4个字节(由上图比较可以发现)  </p><p><img src="https://i.loli.net/2020/07/23/fHa4IdJu5qSLzON.png" alt="Klass pointer详解"></p><h3 id="3-关于JOL工具包显示结果中Value值的含义"><a href="#3-关于JOL工具包显示结果中Value值的含义" class="headerlink" title="3.关于JOL工具包显示结果中Value值的含义"></a>3.关于JOL工具包显示结果中Value值的含义</h3><p><img src="https://i.loli.net/2020/07/23/JLXQkDx7zMV19gO.png" alt="Mark Word的存储结构"><br><img src="https://i.loli.net/2020/07/23/3IXJNsOeBogDZUM.png" alt=""><br>输出obj.hashCode之后可以发现,由于hashCode的高位对应value的低位(小端存储)</p><hr><h2 id="四-锁"><a href="#四-锁" class="headerlink" title="四.锁"></a>四.锁</h2><p><strong><em>锁的进化过程:无锁–&gt;偏向锁–&gt;轻量级锁–&gt;重量级锁</em></strong></p><h3 id="一-偏向锁"><a href="#一-偏向锁" class="headerlink" title="一.偏向锁"></a>一.偏向锁</h3><h4 id="1-引入偏向锁的目的"><a href="#1-引入偏向锁的目的" class="headerlink" title="1.引入偏向锁的目的"></a>1.引入偏向锁的目的</h4><p> 由于实践中通常程序第一个线程会被多次调用,所以出现了偏向锁</p><h4 id="2-基本原理"><a href="#2-基本原理" class="headerlink" title="2.基本原理"></a>2.基本原理</h4><p>  当线程第一次访问同步块并获取锁时，偏向锁处理流程如下：<br>①虚拟机将会把对象头中的标志位设为“01”，即偏向模式。<br>②同时使用CAS操作把获取到这个锁的线程的ID记录在对象的Mark Word之中 ，如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作，偏向锁的效率高。  </p><h4 id="3-偏向锁的撤销"><a href="#3-偏向锁的撤销" class="headerlink" title="3.偏向锁的撤销"></a>3.偏向锁的撤销</h4><p>①偏向锁的撤销动作必须等待全局安全点(所有线程都停下来的时候)<br>②暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态<br>③撤销偏向锁，恢复到无锁（标志位为 01）或轻量级锁（标志位为 00）的状态  </p><p>偏向锁在Java 6之后是默认启用的，但在应用程序启动几秒钟之后才激活，可以使用XX:BiasedLockingStartupDelay=0 参数关闭延迟，如果确定应用程序中所有锁通常情况下处于竞争 状态，可以通过 XX:-UseBiasedLocking=false 参数关闭偏向锁。</p><h4 id="4-偏向锁的好处与不足"><a href="#4-偏向锁的好处与不足" class="headerlink" title="4.偏向锁的好处与不足"></a>4.偏向锁的好处与不足</h4><p>好处:  适用于只有一个线程反复多次拿到同一把锁的情况(竞争不强),提高性能<br>不足： 如果竞争太过强烈，比如开线程池导致一把锁被多个线程访问,那么偏模式就是多余的 </p><hr><h3 id="二-轻量级锁"><a href="#二-轻量级锁" class="headerlink" title="二.轻量级锁"></a>二.轻量级锁</h3><p><img src="https://i.loli.net/2020/07/23/zflbAcPaVq6dC1S.png" alt="原理示意图"></p><p> 栈帧 : 一个进入栈的方法就是一个栈帧</p><p><img src="https://i.loli.net/2020/07/23/JLXQkDx7zMV19gO.png" alt="Mark Word的存储结构"></p><h4 id="1-基本原理-见上图和下文文字说明"><a href="#1-基本原理-见上图和下文文字说明" class="headerlink" title="1.基本原理(见上图和下文文字说明)"></a>1.基本原理(见上图和下文文字说明)</h4><p> 1. 判断当前对象是否处于无锁状态（hashcode、0、01），如果是，则JVM首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方把这份拷贝加了一个Displaced前缀，即Displaced Mark Word），将对象的Mark Word复制到栈帧中的Lock Record中，将Lock Reocrd中的owner指向当前对象。<br> 2. JVM利用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，如果成功表示竞争到锁，则将锁标志位变成00，执行同步操作。<br> 3. 如果失败则判断当前对象的Mark Word是否指向当前线程的栈帧(查看是否当前已经指向了)，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了**(出现竞争)，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态。 </p><p><strong><em>原理总结</em></strong>：<br><strong><em> 1.栈帧中生成LockRecord获取Mark Word的信息,Mark Word指向LockRecord指向的地址，并LockRecord中的owner标记锁<br> 2.指针修改成功则锁标志位改成00,若修改失败,则判断是否已经指向当前栈帧(即值是否相等),若相等则竞争到锁,执行同步代码块,否则等待转化为重量级锁(出现竞争状态)</em></strong></p><h4 id="2-引入轻量级锁的目的"><a href="#2-引入轻量级锁的目的" class="headerlink" title="2.引入轻量级锁的目的"></a>2.引入轻量级锁的目的</h4><p> 多个线程交替执行时,利用轻量级锁来提高性能<br> <strong><em>注意 ：这里指的时交替执行而不是竞争,如果多个线程同时进入临界区,会导致轻量级锁膨胀升级重量级锁，所以轻量级锁的出现并非是要 替代重量级锁。这个两个不同的概念</em></strong></p><h4 id="3-轻量级锁的释放-生成的逆过程"><a href="#3-轻量级锁的释放-生成的逆过程" class="headerlink" title="3.轻量级锁的释放(生成的逆过程)"></a>3.轻量级锁的释放(生成的逆过程)</h4><p> 1.取数据： 取出在获取轻量级锁保存在Displaced Mark Word中的数据。<br> 2.换数据 用CAS操作将取出的数据替换当前对象的Mark Word中，如果成功，则说明释放锁成功。<br> 3.释放失败则锁升级 如果CAS操作替换失败，说明有其他线程尝试获取该锁，则需要将轻量级锁需要膨胀升级为重量级锁。  </p><p><strong><em>疑惑：为什么会CAS操作失败说明其他线程尝试获取该锁</em></strong><br>   <strong><em>百度解释：这里说一下轻量级锁释放失败是就证明锁升级的原理，因为之前 mark word 指向的是本线程的指针，这个是 cas 期望的值，但是被其他线程更改为了指向互斥量的对象了，cas 就失败，就证明升级为了重量级锁。<a href="https://zhuanlan.zhihu.com/p/155637411" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/155637411</a></em></strong></p><h4 id="4-轻量级锁的好处和弊端"><a href="#4-轻量级锁的好处和弊端" class="headerlink" title="4.轻量级锁的好处和弊端"></a>4.轻量级锁的好处和弊端</h4><p>好处：在多线程交替执行同步块的情况下，可以避免重量级锁引起的性能消耗。<br>弊端：对于轻量级锁，其性能提升的依据是“对于绝大部分的锁，在整个生命周期内都是不会存在竞争的”，如 果打破这个依据则除了互斥的开销外，还有额外的CAS操作，因此在有多线程竞争的情况下，轻量级锁 比重量级锁更慢。 </p><h3 id="三-自旋锁"><a href="#三-自旋锁" class="headerlink" title="三.自旋锁"></a>三.自旋锁</h3><h4 id="1-自旋锁的原理"><a href="#1-自旋锁的原理" class="headerlink" title="1.自旋锁的原理"></a>1.自旋锁的原理</h4><p>前面我们讨论monitor实现锁的时候，知道monitor会阻塞和唤醒线程，线程的阻塞和唤醒需要CPU从 用户态转为核心态，频繁的阻塞和唤醒对CPU来说是一件负担很重的工作，这些操作给系统的并发性能 带来了很大的压力。同时，虚拟机的开发团队也注意到在许多应用上，共享数据的锁定状态只会持续很 短的一段时间，为了这段时间阻塞和唤醒线程并不值得。如果物理机器有一个以上的处理器，能让两个 或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一下”，但不放弃处理器的执行 时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需让线程执行一个忙循环(自 旋) , 这项技术就是所谓的自旋锁<br>自旋锁在JDK 1.4.2中就已经引入 ，只不过默认是关闭的，可以使用-XX:+UseSpinning参数来开启，在 JDK 6中 就已经改为默认开启了。自旋等待不能代替阻塞，且先不说对处理器数量的要求，自旋等待本 身虽然避免了线程切换的开销，但它是要占用处理器时间的，因此，如果锁被占用的时间很短，自旋等 待的效果就会非常好，反之，如果锁被占用的时间很长。那么自旋的线程只会白白消耗处理器资源，而 不会做任何有用的工作，反而会带来性 能上的浪费。因此，自旋等待的时间必须要有一定的限度，如果在多线程交替执行同步块的情况下，可以避免重量级锁引起的性能消耗。自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程了。自旋次数的默认值 是10次，用户可以使用参数-XX : PreBlockSpin来更改。 </p><p><strong><em>总结:</em></strong>  </p><p><strong><em>由于重量级锁及其浪费性能,所以在升级成重量级锁之前会先自旋试试看能不能拿到锁,可以剩下线程阻塞和唤醒线程的时间</em></strong>  </p><p><strong><em>就好比你去找别人,到别人家门口了,发现敲了一次们之后没人,如果你间断性的敲门(相当于自旋),可能门一会儿就开了,如果你回家等着等到那个人通知你说门开了再过去,明显前者效率更优</em></strong></p><h4 id="2-适应性自旋锁"><a href="#2-适应性自旋锁" class="headerlink" title="2.适应性自旋锁"></a>2.适应性自旋锁</h4><p>在JDK 6中引入了自适应的自旋锁。自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上 的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持 有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持 续相对更长的时间，比如100次循环。另外，如果对于某个锁，自旋很少成功获得过，那在以后要获取 这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，随着程序运行和性能监控 信息的不断完善，虚拟机对程序锁的状况预测就会越来越准确，虛拟机就会变得越来越“聪明”了。 </p><p><strong><em>总结:</em></strong> </p><p><strong><em>虚拟机会根据你之前拿到锁所需要的自旋次数来自适应的选出一个较优方案,如果自旋次数很大,就会自动转入重量级锁,如果较小,那么下次自旋会给出一个比这次大一点点的自旋数</em></strong>    </p><h3 id="五-锁消除和锁粗化"><a href="#五-锁消除和锁粗化" class="headerlink" title="五.锁消除和锁粗化"></a>五.锁消除和锁粗化</h3><p>精确定义：锁消除是指虚拟机即时编译器（JIT）在运行时，对一些代码上要求同步，但是被检测到不可能存在共享 数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中， 堆上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们 是线程私有的，同步加锁自然就无须进行。变量是否逃逸，对于虚拟机来说需要使用数据流分析来确 定，但是程序员自己应该是很清楚的，怎么会在明知道不存在数据争用的情况下要求同步呢?实际上有 许多同步措施并不是程序员自己加入的，同步的代码在Java程序中的普遍程度也许超过了大部分读者的 想象。下面这段非常简单的代码仅仅是输出3个字符串相加的结果，无论是源码字面上还是程序语义上 都没有同步。</p><p><strong><em>总结：</em></strong>  </p><p><strong><em>锁消除：如果代码时不需要同步,但是你加了sychronized,那么程序会自动把synchronized忽略掉,这样就省去了同步的时间,提高效率</em></strong> </p><p><strong><em>锁粗化：JVM会探测到一连串细小的操作都使用同一个对象加锁，将同步代码块的范围放大，放到这串操作的外面，这样只需要加一次锁即可。<br>比如：synchronized放在for循环的内部和外部不影响结果,那么如果你放在内部的话会影响程序效率,这时候程序会把synchronized优化放到外面去,这样只需要进入同步代码块一次即可</em></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 线程 </category>
          
          <category> 线程安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> synchronized </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型</title>
      <link href="/2020/07/21/java-nei-cun-mo-xing/"/>
      <url>/2020/07/21/java-nei-cun-mo-xing/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JOL的安装</title>
      <link href="/2020/07/21/openjdk14-de-an-zhuang-he-jol-de-shi-yong/"/>
      <url>/2020/07/21/openjdk14-de-an-zhuang-he-jol-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>下载 jol 工具包<br><a href="https://repo.maven.apache.org/maven2/org/openjdk/jol/jol-cli/" target="_blank" rel="noopener">https://repo.maven.apache.org/maven2/org/openjdk/jol/jol-cli/</a><br>选择一个版本，进去后下载 jol-cli-<em>.</em>-full.jar  一定要下载full 的jar</p><p>导入包</p><p>然后在maven的pom.xml中添加依赖</p><pre><code>    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;            &lt;artifactId&gt;jol-core&lt;/artifactId&gt;            &lt;version&gt;0.9&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><p>对于intellij而言,还要在Project Structure的Dependency中加入下好的JOL工具的jar包即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 第三方工具安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方工具安装配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized关键字(一)</title>
      <link href="/2020/07/21/synchronized-guan-jian-zi/"/>
      <url>/2020/07/21/synchronized-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="一-并发编程的三大问题"><a href="#一-并发编程的三大问题" class="headerlink" title="一.并发编程的三大问题"></a>一.并发编程的三大问题</h2><h3 id="一-可见性"><a href="#一-可见性" class="headerlink" title="一.可见性"></a>一.可见性</h3><h4 id="emsp-1-概念"><a href="#emsp-1-概念" class="headerlink" title=" 1.概念:"></a> 1.概念:</h4><p> 对于共享数据,一个线程对该数据的值进行修改后另一个线程无法得到修改后的值  </p><h4 id="emsp-2-代码演示："><a href="#emsp-2-代码演示：" class="headerlink" title=" 2.代码演示："></a> 2.代码演示：</h4><pre><code>public class Test1 {private static boolean flag=true;public static void main(String[] args) throws InterruptedException {    new Thread(){        @Override        public void run() {            while (flag){                ;            }            System.out.println("flag已修改");        }    }.start();    Thread.sleep(2000);    new Thread(){        @Override        public void run() {            flag=false;            System.out.println("已经被我修改");            }        }.start();    }}  </code></pre><p> 运行结果：<img src="https://i.loli.net/2020/07/22/vYbSzhJt4VXW5RF.png" alt=""><br> <strong><em>不难发现,当线程二将flag改为true的时候线程一并不能提前得到最新数据,导致程序依旧停留在while循环中</em></strong>  </p><h4 id="3-原因分析"><a href="#3-原因分析" class="headerlink" title="3.原因分析"></a>3.原因分析</h4><p> <br><img src="https://i.loli.net/2020/07/22/wtyEl7iIvfadGxz.png" alt="内存模型"><br> 线程工作原理:在线程操作变量时,会先将主内存中的变量拷贝到工作内存中,然后对工作内存中的拷贝变量进行赋值计算等操作,操作完之后再赋值给主内存  </p><p> 分析:比如示例代码的上下两个线程分别表示线程1和线程2,线程一的工作内存复制的值是true,当线程2将flag改为false并且赋给主内存后,线程一并不会去读取主内存中的值,这也就导致了线程一卡在while循环无法出来</p><h4 id="4-解决方法"><a href="#4-解决方法" class="headerlink" title="4.解决方法"></a>4.解决方法</h4><p> 方式一：用volatile修饰共享变量<br> 原理：被volatile修饰的变量,当主内存中该变量被别的线程二改变时,会将工作内存中的变量全部作废,这样线程一要重新向主内存中去读取数据的值  </p><p>给flag添加了volatile之后代码的运行结果：</p><p><img src="https://i.loli.net/2020/07/22/JG7PLNXIlZrY6DW.png" alt="">  </p><p>  方式二：用synchronized来保证可见性<br>仅就红色区域为新添的代码(synchronized的参数要放一个对象),也能解决这个问题<br><img src="https://i.loli.net/2020/07/22/WHw6Gop87BEaSON.png" alt="">  </p><p>原理分析：<br>sychronized的时候会有lock和unlock的操作,在lock的时候会刷新当前线程工作内存中的值,实现工作内存及时读取最新的数据值<br><img src="https://i.loli.net/2020/07/22/ODvapBmMls3Z2Xu.png" alt=""></p><p>补充：正因为如此,所以如果仅仅只在while循环中加一句</p><pre><code> System.out.println("true");</code></pre><p>最后的也能退出循环,因为println的源码中有用到synchronized<br><img src="https://i.loli.net/2020/07/22/TOuj3JhNRZVfDG8.png" alt=""></p><h3 id="二-原子性"><a href="#二-原子性" class="headerlink" title="二.原子性"></a>二.原子性</h3><h4 id="emsp-1-概念-1"><a href="#emsp-1-概念-1" class="headerlink" title=" 1.概念:"></a> 1.概念:</h4><p> 在一次或多次操作中,要么所有操作都执行，而且不会因为互相干扰出现异常结果,要么都不执行      (经典抢车票中的线程安全问题)</p><h4 id="emsp-2-代码演示-代码选自-创建多线程的四种方式中的方式二"><a href="#emsp-2-代码演示-代码选自-创建多线程的四种方式中的方式二" class="headerlink" title=" 2.代码演示(代码选自 创建多线程的四种方式中的方式二):"></a> 2.代码演示(代码选自 <a href="https://1766095699.github.io/2020/07/19/jin-cheng-yu-xian-cheng/">创建多线程的四种方式中的方式二</a>):</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Runnable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票已售罄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.创建一个实现类的对象</span>            Mythread t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*4.每个线程各自创建一个以实现类对象为参数的Thread              类的对象*/</span>            Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.start开启进程</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行结果：<img src="https://i.loli.net/2020/07/22/nS9QeX3G67x4qMF.png" alt=""><br><strong><em>不难发现,产生了重票</em></strong></p><h4 id="emsp-3-原因分析："><a href="#emsp-3-原因分析：" class="headerlink" title=" 3.原因分析："></a> 3.原因分析：</h4><p> 由于可能在同一时间多个线程同时对共享变量进行操作,正是由于同时操作,所以导致得到的票重复之类的问题<br><img src="https://i.loli.net/2020/07/22/4yRtEDVuIfGYe5i.png" alt=""></p><h4 id="emsp-4-解决方法"><a href="#emsp-4-解决方法" class="headerlink" title=" 4.解决方法"></a> 4.解决方法</h4><p>  方式一(syncronized)：用synchronized进行同步的代码块,哪个进程拿到锁就哪个进程执行,如果没拿到的只能在外面等着,这保证了代码块最多只能有一个进程在执行   </p><p>例如:对于上面的代码示例中while内部用synchronized包起来,这样当线程一拿到锁开始抢票的时候其他线程都在while那里等着不往下执行,等线程一执行完代码块后锁释放出来再和其他进程一起去抢<br><img src="https://i.loli.net/2020/07/22/yxKSQ4LJvbIEzmX.png" alt=""></p><p><strong><em>注意： synchronized如果是把while也包进来了结果会是只有一个进程直接把所有票抢完,原因可以结合上面的原理自行分析<br>所以使用synchronized有一个原则:不能包的太多也不能太少</em></strong></p><h3 id="三-有序性"><a href="#三-有序性" class="headerlink" title="三.有序性"></a>三.有序性</h3><h4 id="emsp-1-概念-2"><a href="#emsp-1-概念-2" class="headerlink" title=" 1.概念:"></a> 1.概念:</h4><p> 代码执行顺序不是严格按照顺序从上到下执行的</p><h4 id="emsp-2-代码示例"><a href="#emsp-2-代码示例" class="headerlink" title=" 2.代码示例():"></a> 2.代码示例():</h4><p><img src="https://i.loli.net/2020/07/22/jUxlerpFIzoRmn4.png" alt=""></p><pre><code>ready=true;num=2;经过重排序,执行顺序变成num=2;ready=true</code></pre><p>此时,如果线程二先执行并且重排序的话可能导致r.r1=0,我们要做得就是避免这种情况为了避免这种情况</p><h4 id="emsp-3-原因分析"><a href="#emsp-3-原因分析" class="headerlink" title=" 3.原因分析"></a> 3.原因分析</h4><p> 程序代码在执行过程中的先后顺序，由于Java在编译期以及运行期的优化,导致了代码的执行顺序未必就是开发者编写代码时的顺序</p><h4 id="emsp-4-解决方法-1"><a href="#emsp-4-解决方法-1" class="headerlink" title=" 4.解决方法:"></a> 4.解决方法:</h4><p> 方式一(synchronized关键字) :给上述代码的actor1和actor2内的代码加上synchronized,即便内部会发生重排序,但是不会影响到外部。因为加了synchronized之后只会有一个线程执行代码块中的内容<br> 方式二(volatile):给共享变量加上volatile,可以保证不发生重排序</p><h2 id="二-synchronized的可重入性"><a href="#二-synchronized的可重入性" class="headerlink" title="二.synchronized的可重入性"></a>二.synchronized的可重入性</h2><h3 id="emsp-1-概念-3"><a href="#emsp-1-概念-3" class="headerlink" title=" 1.概念:"></a> 1.概念:</h3><p> synchronized允许多层嵌套  </p><h3 id="emsp-2-代码示例-1"><a href="#emsp-2-代码示例-1" class="headerlink" title=" 2.代码示例:"></a> 2.代码示例:</h3><pre><code>class Mythread extends Thread{//2.重写run方法@Overridepublic void run() {     synchronized (this){         System.out.println(getName()+"进入同步代码块1");         synchronized (this){             System.out.println(getName()+"进入同步代码块2");         }     } }}  public class Test1 {    public static void main(String[] args) {        Mythread t1= new Mythread();        Mythread t2= new Mythread();        t1.setName("线程一");        t2.setName("线程二");        t1.start();        t2.start();    }}</code></pre><p>代码结果：<img src="https://i.loli.net/2020/07/22/XTxWcgEyhAD1dHz.png" alt=""></p><h3 id="emsp-3-可重入的原理-好处-小结"><a href="#emsp-3-可重入的原理-好处-小结" class="headerlink" title=" 3.可重入的原理,好处,小结"></a> 3.可重入的原理,好处,小结</h3><p><img src="https://i.loli.net/2020/07/22/yq2831ljgsYvVTI.png" alt=""><br><strong><em>关于synchronized的计数器：每进入一层synchronized就+1,到了结尾就-1</em></strong></p><hr><h2 id="三-synchronized的不可中断性"><a href="#三-synchronized的不可中断性" class="headerlink" title="三.synchronized的不可中断性"></a>三.synchronized的不可中断性</h2><h3 id="emsp-1-概念-4"><a href="#emsp-1-概念-4" class="headerlink" title=" 1.概念:"></a> 1.概念:</h3><p> 一个线程获得锁后,另一个线程想要获得锁，必须处于阻塞或等待状态,如果第一个线程不释放锁， 第二个线程会一直阻塞或等待，不可被中断。</p><h3 id="emsp-1-代码示例"><a href="#emsp-1-代码示例" class="headerlink" title=" 1.代码示例:"></a> 1.代码示例:</h3><pre><code>class Mythread implements Runnable{@Overridepublic void run() {    synchronized (this){    System.out.println(Thread.currentThread().getName()+"进入代码块");        try {            Thread.sleep(98899);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}}public class Test1 {public static void main(String[] args) {    Mythread t= new Mythread();    Thread t1=new Thread(t);    Thread t2=new Thread(t);    t1.setName("线程一");    t2.setName("线程二");    t1.start();    try {        Thread.sleep(1000);    } catch (InterruptedException e) {        e.printStackTrace();    }    t2.start();    System.out.println(t1.getState());    System.out.println(t2.getState());    }}</code></pre><p>代码结果: <img src="https://i.loli.net/2020/07/22/bMRwQJrl41xHhNT.png" alt=""><br>当线程一还在执行的时候,线程二处于阻塞状态,即便手动暂停,线程二依旧处于阻塞状态,体现了synchronized的不可中断性,线程二只能在synchronized那一行等着锁释放</p><h2 id="四-Reentrantlock的可中断和不可中断"><a href="#四-Reentrantlock的可中断和不可中断" class="headerlink" title="四.Reentrantlock的可中断和不可中断"></a>四.Reentrantlock的可中断和不可中断</h2><h3 id="emsp-1-Lock可中断代码-lock-lock"><a href="#emsp-1-Lock可中断代码-lock-lock" class="headerlink" title=" 1.Lock可中断代码(lock.lock())"></a> 1.Lock可中断代码(lock.lock())</h3><pre><code>class Mythread implements Runnable{Lock lock=new ReentrantLock();@Overridepublic void run() {    lock.lock();    System.out.println(Thread.currentThread().getName()+"获得锁");        try {            sleep(50000);        } catch (InterruptedException e) {            e.printStackTrace();        }        lock.unlock();    System.out.println("释放锁");    }}public class Test1 {    public static void main(String[] args) {        Mythread t= new Mythread();        Thread t1=new Thread(t);        Thread t2=new Thread(t);        t1.setName("线程一");        t2.setName("线程二");        t1.start();        t2.start();        try {            sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println("停止第线程二前");        t2.interrupt();        System.out.println("停止第线程二后");        System.out.println(t1.getState());        System.out.println(t2.getState());    }}</code></pre><p>代码结果 :   <img src="https://i.loli.net/2020/07/22/QxqPIBuYdVa3R7t.png" alt=""><br>结果显示 :线程二处于WAITING状态,不可暂停  </p><h3 id="emsp-2-Lock的可中断性代码示例-trylock"><a href="#emsp-2-Lock的可中断性代码示例-trylock" class="headerlink" title=" 2.Lock的可中断性代码示例(trylock())"></a> 2.Lock的可中断性代码示例(trylock())</h3><p><img src="https://i.loli.net/2020/07/22/C6O4qlkLdsbzjf2.png" alt=""></p><p><strong><em>就是利用了 trylock,第二个参数是单位,比如SECOND就是秒</em></strong></p><hr><h2 id="五-javap反汇编学习synchronized的原理"><a href="#五-javap反汇编学习synchronized的原理" class="headerlink" title="五.javap反汇编学习synchronized的原理"></a>五.javap反汇编学习synchronized的原理</h2><h3 id="一-monitorenter"><a href="#一-monitorenter" class="headerlink" title="一.monitorenter"></a>一.monitorenter</h3><h4 id="1-JVM规范文档和反汇编代码"><a href="#1-JVM规范文档和反汇编代码" class="headerlink" title="1.JVM规范文档和反汇编代码"></a>1.JVM规范文档和反汇编代码</h4><p><img src="https://i.loli.net/2020/07/22/thSP8pnbC5AVYHJ.png" alt="JVM规范中描述monitorenter"><br><img src="https://i.loli.net/2020/07/22/xtgrq6MEQO4iRbC.png" alt="左边是代码,右边是反编译的结果"></p><h4 id="emsp-2-monitorenter小结"><a href="#emsp-2-monitorenter小结" class="headerlink" title=" 2.monitorenter小结"></a> 2.monitorenter小结</h4><p> synchronized的锁对象会关联一个monitor,这个monitor不是我们主动创建的,，是JVM的线程执行到这个同步代码块,发现锁对象没有monitor就会创建monitor monitor内部有两个重要的成员变量owner:拥有这把锁的线程,recursions会记录线程拥有锁的次数,当一个线程拥有monitor后其他线程只能等待</p><h3 id="二-monitorexit"><a href="#二-monitorexit" class="headerlink" title="二.monitorexit"></a>二.monitorexit</h3><h4 id="emsp-1-JVM规范文档和反汇编代码"><a href="#emsp-1-JVM规范文档和反汇编代码" class="headerlink" title=" 1.JVM规范文档和反汇编代码"></a> 1.JVM规范文档和反汇编代码</h4><p><img src="https://i.loli.net/2020/07/22/Vwltz6pyBC21YZn.png" alt="JVM规范中描述monitorexit"><br><img src="https://i.loli.net/2020/07/22/K2Q4BsAVd37SrF9.png" alt="左边是代码,右边是反编译的结果"></p><p><strong><em>注意：从反汇编的Exception table可以看出：synchronized一旦出现异常是会释放锁的</em></strong></p><h3 id="三-同步方法"><a href="#三-同步方法" class="headerlink" title="三.同步方法"></a>三.同步方法</h3><p><img src="https://i.loli.net/2020/07/22/fTW3lakubmZS4Fs.png" alt=""><br><strong><em>也就是说在进入方法时隐式调用monitorenter,结束的时候隐式调用monitorexit</em></strong></p><h3 id="四-小结"><a href="#四-小结" class="headerlink" title="四.小结"></a>四.小结</h3><p>  通过javap反汇编我们看到synchronized使用编程了monitorentor和monitorexit两个指令.每个锁对象都会关联一个monitor(监视器,它才是真正的锁对象),它内部有两个重要的成员变量owner会保存获得锁的线程,recursions会保存线程获得锁的次数当执行到monitorexit时,recursions会-1 ,当计数器减到0时这个线程就会释放锁</p><h2 id="emsp-五-synchronized和lock的区别-面试题"><a href="#emsp-五-synchronized和lock的区别-面试题" class="headerlink" title=" 五.synchronized和lock的区别(面试题)"></a> 五.synchronized和lock的区别(面试题)</h2><p><img src="https://i.loli.net/2020/07/22/HU81YTzqOyjGNZo.png" alt=""><br>注1:由于synchronized是重量锁,效率比较低,虽然相较于以前进行了优化<br>注2:ReentranLock是否是公平锁可以自己控制,在实例化lock的时候参数不写就默认非公平,(fair)表示公平锁  </p><pre><code>    ReentrantLock lock=new ReentrantLock();//非公平锁    ReentrantLock lock=new ReentrantLock();//公平锁</code></pre><p>公平锁 :即满足队列的原则,先进先出<br>非公平锁 :所有进程同时抢一把锁看运气</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> synchronized </tag>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建多线程的四种方式(暂时不考虑线程安全问题)</title>
      <link href="/2020/07/19/jin-cheng-yu-xian-cheng/"/>
      <url>/2020/07/19/jin-cheng-yu-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="再次提醒：下文内容仅就总结多线程的创建方式-不考虑线程安全问题-且为了直观-在异常处理方面大量省略"><a href="#再次提醒：下文内容仅就总结多线程的创建方式-不考虑线程安全问题-且为了直观-在异常处理方面大量省略" class="headerlink" title="再次提醒：下文内容仅就总结多线程的创建方式,不考虑线程安全问题,且为了直观,在异常处理方面大量省略"></a>再次提醒：下文内容仅就总结多线程的创建方式,不考虑线程安全问题,且为了直观,在异常处理方面大量省略</h1><h2 id="一-程序-进程-线程的基本概念"><a href="#一-程序-进程-线程的基本概念" class="headerlink" title="一.程序,进程,线程的基本概念"></a>一.程序,进程,线程的基本概念</h2><p><img src="https://i.loli.net/2020/07/20/atozTYeqNsSMl3H.png" alt=""><br> 这里只要做简单的了解即可,红字部分有印象就行,详细内容在虚拟机部分做具体解释</p><h2 id="二-创建多线程的四种方式-以多线程抢票为背景"><a href="#二-创建多线程的四种方式-以多线程抢票为背景" class="headerlink" title="二.创建多线程的四种方式(以多线程抢票为背景)"></a>二.创建多线程的四种方式(以多线程抢票为背景)</h2><h2 id="①在JDK5-0之前："><a href="#①在JDK5-0之前：" class="headerlink" title="①在JDK5.0之前："></a>①<strong><em>在JDK5.0之前：</em></strong></h2><h3 id="emsp-方式一：继承Thread类"><a href="#emsp-方式一：继承Thread类" class="headerlink" title=" 方式一：继承Thread类"></a> 方式一：继承Thread类</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个子类继承Thread</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票已售罄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span>  <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 3.实例化子类对象</span>            Mythread t1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Mythread t2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 4.start开启线程</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p><strong><em>总结：继承Thread创建多线程的步骤：<br>  1.创建一个子类继承Thread<br>  2.重写run方法<br>  3.实例化子类对象<br>  4.start开启线程</em></strong></p><hr><h3 id="emsp-方式二：实现Runnable接口"><a href="#emsp-方式二：实现Runnable接口" class="headerlink" title=" 方式二：实现Runnable接口"></a> 方式二：实现Runnable接口</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Runnable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票已售罄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.创建一个实现类的对象</span>            Mythread t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*4.每个线程各自创建一个以实现类对象为参数的Thread              类的对象*/</span>            Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.start开启进程</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p><strong><em>总结：继承Thread创建多线程的步骤：<br>  1.创建一个实现Runnable接口的类<br>  2.重写run方法<br>  3.创建一个实现类的对象<br>  4.每个线程各自创建一个以实现类对象为参数的Thread类的对象<br>  5.start开启进程</em></strong></p><hr><h3 id="关于Thead带参构造器的源码："><a href="#关于Thead带参构造器的源码：" class="headerlink" title="关于Thead带参构造器的源码："></a>关于Thead带参构造器的源码：</h3><pre><code>public Thread(Runnable target) {    init(null, target, "Thread-" + nextThreadNum(), 0);}</code></pre><p>不难发现,其参数必须是Runnable接口实现类的对象  </p><p><strong><em>注:相比于继承Thread类,方式二可以直接实现数据共享,方式一需要用static修饰成员变量(这一点在讲同步的时候尤其重要)</em></strong></p><hr><h2 id="②在JDK5-0新增："><a href="#②在JDK5-0新增：" class="headerlink" title="②在JDK5.0新增："></a>②<strong><em>在JDK5.0新增：</em></strong></h2><h3 id="emsp-方式三-借助FutureTask类和Callable接口"><a href="#emsp-方式三-借助FutureTask类和Callable接口" class="headerlink" title=" 方式三:借助FutureTask类和Callable接口"></a> 方式三:借助FutureTask类和Callable接口</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Callable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.重写call函数(由于多态,Obj的返回值类型可以自动向下转化)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> UnknownHostException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.创建一个实现类的对象</span>            MyThread myThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.创建一个FutureTask的对象,传入Callable实现类的对象</span>            FutureTask futureTask<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.创建一个Thread类的对象传入对象futureTask并start</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.如果需要返回值,再调用futureTask.get()来取返回值</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Object sum<span class="token operator">=</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为"</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p>总结:<br>  1.创建一个实现Callable接口的类<br>  2.重写call方法<br>  3.创建一个实现类的对象<br>  4.创建一个FutureTask的对象,传入Callable实现类的对象<br>  5.创建一个Thread类的对象传入对象futureTask并start<br>  6.如果需要call函数的返回值,需要调用future.get()的方法</p><p><strong><em>注:Callable可以简单认为是Runnable的升级版,Callable允许有返回值功能更强大</em></strong></p><p><img src="https://i.loli.net/2020/07/20/AefVTnO3Wwld7sj.png" alt=""><br><img src="https://i.loli.net/2020/07/20/KdbyL2SRvIpDi3O.png" alt=""></p><h3 id="关于FutureTask构造器的源码解析"><a href="#关于FutureTask构造器的源码解析" class="headerlink" title="关于FutureTask构造器的源码解析"></a>关于FutureTask构造器的源码解析</h3><p><img src="https://i.loli.net/2020/07/20/rAUoceJVH86GYRF.png" alt=""><br><img src="https://i.loli.net/2020/07/20/mShDs6cjOlNERJg.png" alt=""><br><img src="https://i.loli.net/2020/07/20/RhTQ9D47BejrCoz.png" alt=""><br>不难发现,FutrueTask其实继承了Runnable,所以在Tread实例化的时候可以直接带FutureTask的对象,并且上图中的构造器中对callable进行了回调</p><hr><h3 id="emsp-方式四：调用线程池来实现多线程-开发中主要还是用线程池"><a href="#emsp-方式四：调用线程池来实现多线程-开发中主要还是用线程池" class="headerlink" title=" 方式四：调用线程池来实现多线程(开发中主要还是用线程池)"></a> 方式四：调用线程池来实现多线程(开发中主要还是用线程池)</h3><p><img src="https://i.loli.net/2020/07/20/MmVdAXyKNHCvtUS.png" alt=""></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1.创建一个实现Runnable接口的类</span>    <span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"票"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"售罄了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.提供指定线程数量的线程池</span>            ExecutorService service<span class="token operator">=</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//service.submit(new Mythread());//适用于Callable</span>    <span class="token comment" spellcheck="true">//4.执行指定的线程操作需要提供实现Runnable接口或Callable接口的类</span>            service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适用于Runnable</span>            service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭线程池</span>            service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>线程池的好处:</p><p><img src="https://i.loli.net/2020/07/20/bYuxqV2FJLMR3fw.png" alt=""><br>注:用survice.getClass()可以找到survice的实现类,可以发现是ThreadPoolExxcutor,然后上属的方法要通过强转才能用：<br>    ThreadPoolExxcutor survice1=(ThreadPoolExxcutor) survice;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/17/hello-world/"/>
      <url>/2020/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
